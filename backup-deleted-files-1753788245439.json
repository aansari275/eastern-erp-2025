{
  "timestamp": "2025-07-29T11:24:05.438Z",
  "deletedFiles": 30,
  "totalSize": 446852,
  "files": [
    {
      "path": "client/src/components/ComplianceAuditForm.tsx",
      "content": "import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\nimport { Button } from './ui/button';\nimport { Badge } from './ui/badge';\nimport { Input } from './ui/input';\nimport { Textarea } from './ui/textarea';\nimport { \n  ArrowLeft, \n  ArrowRight, \n  Check, \n  X, \n  AlertTriangle, \n  Camera, \n  Trash2, \n  Save,\n  Send,\n  Plus\n} from 'lucide-react';\nimport { useToast } from '../hooks/use-toast';\nimport { ComplianceAudit, InsertComplianceAudit } from '../../../shared/schema';\nimport { uploadEvidenceImage } from '../utils/firebaseStorage';\n\ninterface ComplianceAuditFormProps {\n  company: 'EHI' | 'EMPL';\n  onBack: () => void;\n  existingAudit?: ComplianceAudit | null;\n}\n\ninterface ChecklistItem {\n  code: string;\n  question: string;\n  response?: 'Yes' | 'No' | 'NA';\n  remarks?: string;\n  evidence?: string[];\n}\n\ninterface AuditPart {\n  title: string;\n  items: ChecklistItem[];\n}\n\nconst auditParts: AuditPart[] = [\n  {\n    title: \"Design Control\",\n    items: [\n      { code: \"C1\", question: \"Are design and development procedures established?\" },\n      { code: \"C2\", question: \"Are design input requirements identified and reviewed?\" },\n      { code: \"C3\", question: \"Are design reviews conducted at key stages?\" },\n      { code: \"C4\", question: \"Does design output include all necessary production info?\" },\n      { code: \"C5\", question: \"Are design changes verified and controlled?\" },\n      { code: \"C6\", question: \"Is prototype or pilot testing done before production?\" },\n      { code: \"C7\", question: \"Are design personnel competent and qualified?\" }\n    ]\n  },\n  {\n    title: \"Purchasing Control\",\n    items: [\n      { code: \"C8\", question: \"Are suppliers evaluated and approved before ordering?\" },\n      { code: \"C9\", question: \"Are materials purchased from approved sources?\" },\n      { code: \"C10\", question: \"Are product specs and requirements agreed with suppliers?\" },\n      { code: \"C11\", question: \"Is supplier performance monitored and recorded?\" },\n      { code: \"C12\", question: \"Is supplier risk assessed to avoid material shortages?\" }\n    ]\n  },\n  {\n    title: \"Storage Management\",\n    items: [\n      { code: \"C13\", question: \"Is inventory recorded for incoming and outgoing goods?\" },\n      { code: \"C14\", question: \"Is inventory stored in safe and suitable conditions?\" },\n      { code: \"C15\", question: \"Are materials clearly identified and segregated?\" },\n      { code: \"C16\", question: \"Is product condition checked regularly in storage?\" },\n      { code: \"C17\", question: \"Is inventory managed using FIFO or similar systems?\" }\n    ]\n  },\n  {\n    title: \"Incoming Inspection\",\n    items: [\n      { code: \"C18\", question: \"Is there a separate area for uninspected materials?\" },\n      { code: \"C19\", question: \"Are inspection criteria defined for incoming goods?\" },\n      { code: \"C20\", question: \"Are inspections conducted and results recorded?\" },\n      { code: \"C21\", question: \"Are unverified materials checked via alternate methods?\" },\n      { code: \"C22\", question: \"Are customer-designated sources properly controlled?\" },\n      { code: \"C23\", question: \"Is inspection status clearly marked on materials?\" },\n      { code: \"C24\", question: \"Are rejected materials properly handled and recorded?\" },\n      { code: \"C25\", question: \"Are inspection results analyzed for supplier evaluation?\" }\n    ]\n  },\n  {\n    title: \"Production Control\",\n    items: [\n      { code: \"C26\", question: \"Are manufacturing inputs reviewed and documented?\" },\n      { code: \"C27\", question: \"Are outputs expressed in specs and drawings?\" },\n      { code: \"C28\", question: \"Is there a control plan for production?\" },\n      { code: \"C29\", question: \"Are QC staff and work instructions in place?\" },\n      { code: \"C30\", question: \"Are materials defined via BOM or similar?\" },\n      { code: \"C31\", question: \"Is production scheduled based on capacity and orders?\" },\n      { code: \"C32\", question: \"Are products traceable and batch-controlled?\" },\n      { code: \"C33\", question: \"Are rejected items isolated and rechecked?\" },\n      { code: \"C34\", question: \"Are defects and trends analyzed?\" },\n      { code: \"C35\", question: \"Are new tools evaluated before use?\" },\n      { code: \"C36\", question: \"Are process parameters monitored and recorded?\" },\n      { code: \"C37\", question: \"Can QC stop production for quality issues?\" },\n      { code: \"C38\", question: \"Is equipment maintenance planned and recorded?\" },\n      { code: \"C39\", question: \"Are handling and transport methods suitable?\" },\n      { code: \"C40\", question: \"Are packing and packaging requirements defined?\" },\n      { code: \"C41\", question: \"Is the production flow chart available and clear?\" },\n      { code: \"C42\", question: \"Are outsourced processes identified?\" },\n      { code: \"C43\", question: \"Does the factory have relevant production experience?\" },\n      { code: \"C44\", question: \"Are workers skilled and observed during audit?\" },\n      { code: \"C45\", question: \"Are machines and facilities adequate for production?\" }\n    ]\n  },\n  {\n    title: \"Final Product Inspection & Testing\",\n    items: [\n      { code: \"C46\", question: \"Are customer specs available for QC?\" },\n      { code: \"C47\", question: \"Are final inspection criteria defined?\" },\n      { code: \"C48\", question: \"Are final inspections conducted and recorded?\" },\n      { code: \"C49\", question: \"Are appearance checks done with proper tools?\" },\n      { code: \"C50\", question: \"Are safety and functionality checks performed?\" },\n      { code: \"C51\", question: \"Are rejected lots isolated and handled properly?\" },\n      { code: \"C52\", question: \"Are causes of rejects investigated and improved?\" },\n      { code: \"C53\", question: \"Is ongoing reliability testing conducted?\" }\n    ]\n  },\n  {\n    title: \"Measuring & Testing Equipment\",\n    items: [\n      { code: \"C54\", question: \"Is life/reliability testing equipment available?\" },\n      { code: \"C55\", question: \"Are gauges and tools maintained and protected?\" },\n      { code: \"C56\", question: \"Is equipment calibrated regularly?\" },\n      { code: \"C57\", question: \"Are display devices checked frequently?\" },\n      { code: \"C58\", question: \"Is equipment condition verified with fault simulation?\" }\n    ]\n  },\n  {\n    title: \"Resource Management\",\n    items: [\n      { code: \"C59\", question: \"Is infrastructure adequate and layout optimized?\" },\n      { code: \"C60\", question: \"Is the factory clean and well-maintained?\" },\n      { code: \"C61\", question: \"Are training needs identified and addressed?\" },\n      { code: \"C62\", question: \"Are employees motivated for quality and innovation?\" },\n      { code: \"C63\", question: \"Are contingency plans in place for emergencies?\" }\n    ]\n  },\n  {\n    title: \"Continuous Improvement\",\n    items: [\n      { code: \"C64\", question: \"Is data collected to support improvement?\" },\n      { code: \"C65\", question: \"Are failures recorded and investigated?\" },\n      { code: \"C66\", question: \"Are quality objectives defined and measured?\" },\n      { code: \"C67\", question: \"Are internal audits planned and conducted?\" },\n      { code: \"C68\", question: \"Does top management review the QMS?\" },\n      { code: \"C69\", question: \"Are corrective actions taken and reviewed?\" },\n      { code: \"C70\", question: \"Are preventive actions implemented?\" },\n      { code: \"C71\", question: \"Are improvement programs like 5S or Kaizen used?\" },\n      { code: \"C72\", question: \"Are audit and review results followed up?\" },\n      { code: \"C73\", question: \"Are customer complaints reviewed?\" }\n    ]\n  },\n  {\n    title: \"Social & Environmental Responsibility\",\n    items: [\n      { code: \"C74\", question: \"Are working conditions (air, light, cleanliness) acceptable?\" },\n      { code: \"C75\", question: \"Are all workers above the legal working age?\" },\n      { code: \"C76\", question: \"Do working hours comply with labor laws?\" },\n      { code: \"C77\", question: \"Do workers get at least one day off per week?\" },\n      { code: \"C78\", question: \"Are workers employed voluntarily?\" },\n      { code: \"C79\", question: \"Are wages equal to or above legal minimum?\" },\n      { code: \"C80\", question: \"Do women have equal rights and protections?\" },\n      { code: \"C81\", question: \"Are workers treated respectfully without abuse?\" },\n      { code: \"C82\", question: \"Is the fire protection system adequate and functional?\" },\n      { code: \"C83\", question: \"Are fire and evacuation drills conducted regularly?\" }\n    ]\n  },\n  {\n    title: \"Health & Safety\",\n    items: [\n      { code: \"C84\", question: \"Are buildings in good physical condition?\" },\n      { code: \"C85\", question: \"Are machine guards installed for safety?\" },\n      { code: \"C86\", question: \"Are special equipment registered and inspected?\" },\n      { code: \"C87\", question: \"Are safety instructions about clothing/jewelry followed?\" },\n      { code: \"C88\", question: \"Is PPE provided and in good condition?\" },\n      { code: \"C89\", question: \"Are PPE signs posted in required areas?\" },\n      { code: \"C90\", question: \"Do workers follow safety instructions and use PPE?\" },\n      { code: \"C91\", question: \"Is dormitory separate from production areas?\" },\n      { code: \"C92\", question: \"Is a valid restaurant license available if required?\" },\n      { code: \"C93\", question: \"Is medical service (e.g., first aid) available for workers?\" }\n    ]\n  }\n];\n\nexport function ComplianceAuditForm({ company, onBack, existingAudit }: ComplianceAuditFormProps) {\n  const { toast } = useToast();\n  const [currentPart, setCurrentPart] = useState(0);\n  const [auditData, setAuditData] = useState<{\n    auditorName: string;\n    location: string;\n    auditScope: string;\n    checklist: ChecklistItem[];\n    partScores: Record<string, number>;\n  }>({\n    auditorName: '',\n    location: '',\n    auditScope: '',\n    checklist: auditParts.flatMap(part => part.items),\n    partScores: {}\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isSaving, setIsSaving] = useState(false);\n  const [auditId, setAuditId] = useState<string | null>(existingAudit?.id || null);\n  const [uploadingEvidence, setUploadingEvidence] = useState<Set<string>>(new Set());\n  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);\n  const [forceRender, setForceRender] = useState(0);\n\n  // Load existing audit data if editing\n  useEffect(() => {\n    if (existingAudit) {\n      setAuditData({\n        auditorName: existingAudit.auditorName,\n        location: existingAudit.location,\n        auditScope: existingAudit.auditScope,\n        checklist: existingAudit.parts?.flatMap(part => \n          part.items.map(item => ({\n            code: item.id || `C${Math.random().toString(36).substr(2, 3)}`,\n            question: item.question || '',\n            response: item.response as 'Yes' | 'No' | 'NA' | undefined,\n            remarks: item.remark,\n            evidence: item.evidenceImages || []\n          }))\n        ) || auditParts.flatMap(part => part.items),\n        partScores: {}\n      });\n    }\n  }, [existingAudit]);\n\n  const updateResponse = (code: string, response: 'Yes' | 'No' | 'NA') => {\n    setAuditData(prev => ({\n      ...prev,\n      checklist: prev.checklist.map(item =>\n        item.code === code ? { ...item, response } : item\n      )\n    }));\n    setHasUnsavedChanges(true);\n  };\n\n  const updateRemarks = (code: string, remarks: string) => {\n    setAuditData(prev => ({\n      ...prev,\n      checklist: prev.checklist.map(item =>\n        item.code === code ? { ...item, remarks } : item\n      )\n    }));\n    setHasUnsavedChanges(true);\n  };\n\n  const addEvidence = (code: string, imageUrl: string) => {\n    console.log('📝 Adding evidence to state:', { code, imageUrl });\n    \n    setAuditData(prev => {\n      const updated = {\n        ...prev,\n        checklist: prev.checklist.map(item =>\n          item.code === code \n            ? { ...item, evidence: [...(item.evidence || []), imageUrl] }\n            : item\n        )\n      };\n      \n      // Log the specific item that was updated\n      const updatedItem = updated.checklist.find(item => item.code === code);\n      console.log('🔍 Evidence added to item:', updatedItem);\n      \n      return updated;\n    });\n    \n    setHasUnsavedChanges(true);\n    \n    // Force a re-render to show thumbnails immediately\n    setForceRender(prev => prev + 1);\n    \n    // Auto-save after adding evidence to persist thumbnails\n    setTimeout(() => {\n      console.log('⏰ Auto-saving draft after evidence addition...');\n      saveDraft();\n    }, 1000);\n  };\n\n  const removeEvidence = (code: string, index: number) => {\n    setAuditData(prev => ({\n      ...prev,\n      checklist: prev.checklist.map(item =>\n        item.code === code \n          ? { ...item, evidence: item.evidence?.filter((_, i) => i !== index) || [] }\n          : item\n      )\n    }));\n    setHasUnsavedChanges(true);\n    \n    // Auto-save after removing evidence\n    setTimeout(() => {\n      saveDraft();\n    }, 1000);\n  };\n\n  const calculatePartScore = (partIndex: number) => {\n    const part = auditParts[partIndex];\n    const partItems = auditData.checklist.filter(item => \n      part.items.some(partItem => partItem.code === item.code)\n    );\n    \n    const applicableItems = partItems.filter(item => item.response && item.response !== 'NA');\n    const yesCount = partItems.filter(item => item.response === 'Yes').length;\n    \n    return applicableItems.length > 0 ? Math.round((yesCount / applicableItems.length) * 100) : 0;\n  };\n\n  const calculateTotalScore = () => {\n    const applicableItems = auditData.checklist.filter(item => item.response && item.response !== 'NA');\n    const yesCount = auditData.checklist.filter(item => item.response === 'Yes').length;\n    \n    return applicableItems.length > 0 ? Math.round((yesCount / applicableItems.length) * 100) : 0;\n  };\n\n  const updateEvidenceInFirestore = async (auditId: string, questionCode: string, evidenceUrl: string) => {\n    try {\n      // Get current audit data\n      const response = await fetch(`/api/audits/compliance/${auditId}`);\n      if (!response.ok) throw new Error('Failed to fetch audit');\n      \n      const { audit } = await response.json();\n      \n      // Update the specific question's evidence array in parts structure\n      const updatedParts = audit.parts.map((part: any) => ({\n        ...part,\n        items: part.items.map((item: any) => {\n          if (item.code === questionCode) {\n            return {\n              ...item,\n              evidenceImages: [...(item.evidenceImages || []), evidenceUrl]\n            };\n          }\n          return item;\n        })\n      }));\n      \n      // CRITICAL: Also update the checklist field for PDF generation\n      const updatedChecklist = (audit.checklist || []).map((item: ChecklistItem) => {\n        if (item.code === questionCode) {\n          return {\n            ...item,\n            evidence: [...(item.evidence || []), evidenceUrl]\n          };\n        }\n        return item;\n      });\n      \n      console.log(`🔄 Updating evidence for ${questionCode}: ${evidenceUrl.substring(0, 50)}...`);\n      console.log(`📋 Updated checklist item:`, updatedChecklist.find(item => item.code === questionCode));\n      \n      // Update Firestore with BOTH parts and checklist fields\n      const updateResponse = await fetch(`/api/audits/compliance/${auditId}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          ...audit,\n          parts: updatedParts,\n          checklist: updatedChecklist,\n          updatedAt: new Date().toISOString()\n        })\n      });\n      \n      if (!updateResponse.ok) {\n        throw new Error('Failed to update audit in Firestore');\n      }\n      \n      console.log(`✅ Evidence URL successfully added to both parts and checklist for ${questionCode}`);\n    } catch (error) {\n      console.error('Error updating evidence in Firestore:', error);\n      throw error;\n    }\n  };\n\n  const handleImageUpload = async (code: string, event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    console.log('🖼️ Starting image upload for code:', code, 'File:', file.name, 'Size:', file.size);\n\n    // If no audit ID yet, we need to create a draft first\n    if (!auditId) {\n      console.log('📝 No audit ID, creating draft first');\n      toast({\n        title: \"Saving audit first\",\n        description: \"Creating audit draft before uploading evidence...\",\n      });\n      await saveDraft();\n      if (!auditId) {\n        console.error('❌ Failed to create audit ID');\n        toast({\n          title: \"Error\",\n          description: \"Failed to create audit. Please try again.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      console.log('✅ Audit ID created:', auditId);\n    }\n\n    // Add to uploading set for UI feedback\n    setUploadingEvidence(prev => new Set([...prev, code]));\n    \n    try {\n      toast({\n        title: \"Uploading evidence\",\n        description: \"Saving evidence image...\",\n      });\n\n      // Upload to Firebase Storage\n      console.log('📤 Uploading to Firebase Storage...');\n      const uploadResult = await uploadEvidenceImage(file, auditId, code);\n      console.log('✅ Image uploaded successfully:', uploadResult.url);\n      \n      // Add the Firebase Storage URL to local state (this will auto-save)\n      console.log('💾 Adding evidence to local state...');\n      addEvidence(code, uploadResult.url);\n      \n      // Update Firestore with the new evidence URL\n      console.log('🔄 Updating Firestore...');\n      await updateEvidenceInFirestore(auditId, code, uploadResult.url);\n      console.log('✅ Evidence updated in Firestore');\n      \n      // Verify the state was updated\n      const updatedItem = auditData.checklist.find(item => item.code === code);\n      console.log('🔍 Updated checklist item:', updatedItem);\n      \n      toast({\n        title: \"Evidence uploaded\",\n        description: \"Evidence image saved successfully.\",\n      });\n    } catch (error) {\n      console.error('❌ Evidence upload error:', error);\n      toast({\n        title: \"Upload failed\",\n        description: `Failed to upload evidence: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        variant: \"destructive\",\n      });\n    } finally {\n      // Remove from uploading set\n      setUploadingEvidence(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(code);\n        return newSet;\n      });\n      \n      // Reset file input\n      event.target.value = '';\n    }\n  };\n\n  const saveDraft = async () => {\n    setIsSaving(true);\n    try {\n      // Validate required fields\n      if (!auditData.auditorName.trim()) {\n        toast({\n          title: \"Missing Information\",\n          description: \"Please enter the auditor name before saving.\",\n          variant: \"destructive\",\n        });\n        setIsSaving(false);\n        return;\n      }\n\n      if (!auditData.location.trim()) {\n        toast({\n          title: \"Missing Information\", \n          description: \"Please enter the audit location before saving.\",\n          variant: \"destructive\",\n        });\n        setIsSaving(false);\n        return;\n      }\n\n      // Create flattened checklist array\n      const flattenedChecklist = auditParts.flatMap(part => \n        part.items.map(item => {\n          const checklistItem = auditData.checklist.find(c => c.code === item.code);\n          return {\n            code: item.code,\n            question: item.question,\n            response: checklistItem?.response,\n            remark: checklistItem?.remarks,\n            evidence: checklistItem?.evidence || []\n          };\n        })\n      );\n      \n      console.log('📋 Flattened checklist before saving:', flattenedChecklist);\n      console.log('📊 Checklist items with evidence:', flattenedChecklist.filter(item => item.evidence && item.evidence.length > 0));\n\n      const auditToSave: InsertComplianceAudit = {\n        auditorName: auditData.auditorName,\n        location: auditData.location,\n        auditScope: auditData.auditScope,\n        company,\n        auditDate: new Date().toISOString().split('T')[0],\n        // Keep original parts structure\n        parts: auditParts.map((part, index) => ({\n          id: `part-${index + 1}`,\n          title: part.title,\n          items: part.items.map(item => {\n            const checklistItem = auditData.checklist.find(c => c.code === item.code);\n            return {\n              code: item.code,\n              question: item.question,\n              response: checklistItem?.response,\n              remark: checklistItem?.remarks,\n              evidenceImages: checklistItem?.evidence || []\n            };\n          }),\n          weight: 1,\n          maxPoints: part.items.length\n        })),\n        // Add flattened checklist array\n        checklist: flattenedChecklist,\n        status: 'draft'\n      };\n\n      // Determine if this is an update or new save\n      const isUpdate = auditId && existingAudit;\n      const url = isUpdate ? `/api/audits/compliance/${auditId}` : '/api/audits/compliance';\n      const method = isUpdate ? 'PUT' : 'POST';\n\n      // API call to save draft\n      const response = await fetch(url, {\n        method,\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(auditToSave)\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        // Set the audit ID for future evidence uploads\n        if (result.id && !auditId) {\n          setAuditId(result.id);\n        }\n        \n        // Trigger cache refresh for real-time UI updates\n        window.dispatchEvent(new CustomEvent('compliance-audit-saved'));\n        \n        setHasUnsavedChanges(false);\n        toast({\n          title: \"Draft saved\",\n          description: \"Audit draft saved successfully.\",\n        });\n      } else {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.error || 'Failed to save draft');\n      }\n    } catch (error) {\n      console.error('Save draft error:', error);\n      toast({\n        title: \"Error saving draft\",\n        description: error instanceof Error ? error.message : \"Failed to save audit draft. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const submitAudit = async () => {\n    setIsSubmitting(true);\n    try {\n      // Create flattened checklist array for submission\n      const flattenedChecklist = auditParts.flatMap(part => \n        part.items.map(item => {\n          const checklistItem = auditData.checklist.find(c => c.code === item.code);\n          return {\n            code: item.code,\n            question: item.question,\n            response: checklistItem?.response,\n            remark: checklistItem?.remarks,\n            evidence: checklistItem?.evidence || []\n          };\n        })\n      );\n      \n      console.log('📋 Flattened checklist before submission:', flattenedChecklist);\n      console.log('📊 Checklist items with evidence:', flattenedChecklist.filter(item => item.evidence && item.evidence.length > 0));\n\n      const auditToSubmit: InsertComplianceAudit = {\n        auditorName: auditData.auditorName,\n        location: auditData.location,\n        auditScope: auditData.auditScope,\n        company,\n        auditDate: new Date().toISOString().split('T')[0],\n        // Keep original parts structure\n        parts: auditParts.map((part, index) => ({\n          id: `part-${index + 1}`,\n          title: part.title,\n          items: part.items.map(item => {\n            const checklistItem = auditData.checklist.find(c => c.code === item.code);\n            return {\n              code: item.code,\n              question: item.question,\n              response: checklistItem?.response,\n              remark: checklistItem?.remarks,\n              evidenceImages: checklistItem?.evidence || []\n            };\n          }),\n          weight: 1,\n          maxPoints: part.items.length\n        })),\n        // Add flattened checklist array\n        checklist: flattenedChecklist,\n        status: 'submitted'\n      };\n\n      const response = await fetch('/api/audits/compliance', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(auditToSubmit)\n      });\n\n      if (response.ok) {\n        // Trigger cache refresh for real-time UI updates\n        window.dispatchEvent(new CustomEvent('compliance-audit-submitted'));\n        \n        toast({\n          title: \"Audit submitted\",\n          description: \"Compliance audit submitted successfully.\",\n        });\n        onBack();\n      } else {\n        throw new Error('Failed to submit audit');\n      }\n    } catch (error) {\n      toast({\n        title: \"Error submitting audit\",\n        description: \"Failed to submit audit. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const currentPartData = auditParts[currentPart];\n  const currentPartItems = auditData.checklist.filter(item => \n    currentPartData.items.some(partItem => partItem.code === item.code)\n  );\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-4\">\n      <div className=\"max-w-4xl mx-auto\">\n        {/* Header */}\n        <div className=\"mb-6\">\n          <div className=\"flex items-center gap-4 mb-4\">\n            <Button variant=\"outline\" onClick={onBack} className=\"flex items-center gap-2\">\n              <ArrowLeft className=\"h-4 w-4\" />\n              Back to Dashboard\n            </Button>\n            <Badge variant=\"secondary\" className=\"text-sm\">\n              {company === 'EHI' ? 'Eastern Home Industries' : 'Eastern Mills Private Limited'}\n            </Badge>\n          </div>\n          \n          <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">\n            Compliance Audit Form\n          </h1>\n          \n          <div className=\"flex items-center gap-4 text-sm text-gray-600\">\n            <span>Part {currentPart + 1} of {auditParts.length}</span>\n            <span>•</span>\n            <span>{currentPartData.title}</span>\n            <span>•</span>\n            <span>Score: {calculatePartScore(currentPart)}%</span>\n          </div>\n        </div>\n\n        {/* Basic Info (only on first part) */}\n        {currentPart === 0 && (\n          <Card className=\"mb-6\">\n            <CardHeader>\n              <CardTitle>Audit Information</CardTitle>\n            </CardHeader>\n            <CardContent className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">Auditor Name</label>\n                <Input\n                  value={auditData.auditorName}\n                  onChange={(e) => setAuditData(prev => ({ ...prev, auditorName: e.target.value }))}\n                  placeholder=\"Enter auditor name\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">Location</label>\n                <Input\n                  value={auditData.location}\n                  onChange={(e) => setAuditData(prev => ({ ...prev, location: e.target.value }))}\n                  placeholder=\"Enter audit location\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">Audit Scope</label>\n                <Input\n                  value={auditData.auditScope}\n                  onChange={(e) => setAuditData(prev => ({ ...prev, auditScope: e.target.value }))}\n                  placeholder=\"Enter audit scope\"\n                />\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Checklist Items */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span>Part {currentPart + 1}: {currentPartData.title}</span>\n              <Badge variant=\"secondary\">\n                {calculatePartScore(currentPart)}% Complete\n              </Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {currentPartData.items.map((item, index) => {\n              const checklistItem = auditData.checklist.find(c => c.code === item.code);\n              return (\n                <div key={item.code} className=\"border rounded-lg p-4 bg-white\">\n                  <div className=\"flex items-start justify-between mb-3\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {item.code}\n                        </Badge>\n                        <span className=\"text-sm font-medium text-gray-900\">\n                          {item.question}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Response Buttons */}\n                  <div className=\"flex gap-2 mb-3\">\n                    <Button\n                      variant={checklistItem?.response === 'Yes' ? 'default' : 'outline'}\n                      size=\"sm\"\n                      onClick={() => updateResponse(item.code, 'Yes')}\n                      className=\"flex items-center gap-1\"\n                    >\n                      <Check className=\"h-3 w-3\" />\n                      Yes\n                    </Button>\n                    <Button\n                      variant={checklistItem?.response === 'No' ? 'destructive' : 'outline'}\n                      size=\"sm\"\n                      onClick={() => updateResponse(item.code, 'No')}\n                      className=\"flex items-center gap-1\"\n                    >\n                      <X className=\"h-3 w-3\" />\n                      No\n                    </Button>\n                    <Button\n                      variant={checklistItem?.response === 'NA' ? 'secondary' : 'outline'}\n                      size=\"sm\"\n                      onClick={() => updateResponse(item.code, 'NA')}\n                      className=\"flex items-center gap-1\"\n                    >\n                      <AlertTriangle className=\"h-3 w-3\" />\n                      N/A\n                    </Button>\n                  </div>\n\n                  {/* Remarks */}\n                  <div className=\"mb-3\">\n                    <label className=\"block text-xs font-medium text-gray-700 mb-1\">\n                      Remarks (Optional)\n                    </label>\n                    <Textarea\n                      value={checklistItem?.remarks || ''}\n                      onChange={(e) => updateRemarks(item.code, e.target.value)}\n                      placeholder=\"Add any remarks or observations...\"\n                      className=\"text-sm\"\n                      rows={2}\n                    />\n                  </div>\n\n                  {/* Evidence Images */}\n                  <div>\n                    <label className=\"block text-xs font-medium text-gray-700 mb-2\">\n                      Evidence Images (Optional - Max 5)\n                    </label>\n                    <div className=\"flex items-center gap-2 flex-wrap\">\n                      {(() => {\n                        const evidence = checklistItem?.evidence || [];\n                        console.log('🖼️ Rendering thumbnails for', item.code, ':', evidence);\n                        return evidence.map((imageUrl, imgIndex) => (\n                          <div key={`${item.code}-${imgIndex}-${imageUrl}`} className=\"relative\">\n                            <img\n                              src={imageUrl}\n                              alt={`Evidence ${imgIndex + 1}`}\n                              className=\"w-16 h-16 object-cover rounded border\"\n                              onLoad={() => console.log('✅ Image loaded:', imageUrl)}\n                              onError={(e) => console.error('❌ Image load error:', imageUrl, e)}\n                            />\n                            <Button\n                              variant=\"destructive\"\n                              size=\"sm\"\n                              className=\"absolute -top-2 -right-2 h-5 w-5 rounded-full p-0\"\n                              onClick={() => removeEvidence(item.code, imgIndex)}\n                            >\n                              <X className=\"h-3 w-3\" />\n                            </Button>\n                          </div>\n                        ));\n                      })()}\n                      \n                      {(!checklistItem?.evidence || checklistItem.evidence.length < 5) && (\n                        <label className=\"cursor-pointer\">\n                          <div className=\"w-16 h-16 border-2 border-dashed border-gray-300 rounded flex items-center justify-center hover:border-blue-400 transition-colors\">\n                            {uploadingEvidence.has(item.code) ? (\n                              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600\"></div>\n                            ) : (\n                              <Plus className=\"h-6 w-6 text-gray-400\" />\n                            )}\n                          </div>\n                          <input\n                            type=\"file\"\n                            accept=\"image/*\"\n                            className=\"hidden\"\n                            onChange={(e) => handleImageUpload(item.code, e)}\n                            disabled={uploadingEvidence.has(item.code)}\n                          />\n                        </label>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </CardContent>\n        </Card>\n\n        {/* Navigation and Actions */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              onClick={() => setCurrentPart(Math.max(0, currentPart - 1))}\n              disabled={currentPart === 0}\n              className=\"flex items-center gap-2\"\n            >\n              <ArrowLeft className=\"h-4 w-4\" />\n              Previous Part\n            </Button>\n            \n            {currentPart < auditParts.length - 1 && (\n              <Button\n                onClick={() => setCurrentPart(Math.min(auditParts.length - 1, currentPart + 1))}\n                className=\"flex items-center gap-2\"\n              >\n                Next Part\n                <ArrowRight className=\"h-4 w-4\" />\n              </Button>\n            )}\n          </div>\n\n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              onClick={saveDraft}\n              disabled={isSaving}\n              className={`flex items-center gap-2 ${hasUnsavedChanges ? 'border-orange-300 bg-orange-50' : ''}`}\n            >\n              <Save className=\"h-4 w-4\" />\n              {isSaving ? 'Saving...' : hasUnsavedChanges ? 'Save Draft*' : 'Save Draft'}\n            </Button>\n            \n            {currentPart === auditParts.length - 1 && (\n              <Button\n                onClick={submitAudit}\n                disabled={isSubmitting || !auditData.auditorName || !auditData.location}\n                className=\"flex items-center gap-2\"\n              >\n                <Send className=\"h-4 w-4\" />\n                {isSubmitting ? 'Submitting...' : 'Submit Audit'}\n              </Button>\n            )}\n          </div>\n        </div>\n\n        {/* Progress Indicator */}\n        <div className=\"mt-6\">\n          <div className=\"flex justify-between text-xs text-gray-500 mb-1\">\n            <span>Progress</span>\n            <span>{currentPart + 1} / {auditParts.length}</span>\n          </div>\n          <div className=\"w-full bg-gray-200 rounded-full h-2\">\n            <div \n              className=\"bg-blue-500 h-2 rounded-full transition-all duration-300\"\n              style={{ width: `${((currentPart + 1) / auditParts.length) * 100}%` }}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}",
      "size": 36227
    },
    {
      "path": "client/src/components/ComplianceAuditForm.js",
      "content": "import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\nimport { Button } from './ui/button';\nimport { Badge } from './ui/badge';\nimport { Input } from './ui/input';\nimport { Textarea } from './ui/textarea';\nimport { ArrowLeft, ArrowRight, Check, X, AlertTriangle, Save, Send, Plus } from 'lucide-react';\nimport { useToast } from '../hooks/use-toast';\nimport { uploadEvidenceImage } from '../utils/firebaseStorage';\nconst auditParts = [\n    {\n        title: \"Design Control\",\n        items: [\n            { code: \"C1\", question: \"Are design and development procedures established?\" },\n            { code: \"C2\", question: \"Are design input requirements identified and reviewed?\" },\n            { code: \"C3\", question: \"Are design reviews conducted at key stages?\" },\n            { code: \"C4\", question: \"Does design output include all necessary production info?\" },\n            { code: \"C5\", question: \"Are design changes verified and controlled?\" },\n            { code: \"C6\", question: \"Is prototype or pilot testing done before production?\" },\n            { code: \"C7\", question: \"Are design personnel competent and qualified?\" }\n        ]\n    },\n    {\n        title: \"Purchasing Control\",\n        items: [\n            { code: \"C8\", question: \"Are suppliers evaluated and approved before ordering?\" },\n            { code: \"C9\", question: \"Are materials purchased from approved sources?\" },\n            { code: \"C10\", question: \"Are product specs and requirements agreed with suppliers?\" },\n            { code: \"C11\", question: \"Is supplier performance monitored and recorded?\" },\n            { code: \"C12\", question: \"Is supplier risk assessed to avoid material shortages?\" }\n        ]\n    },\n    {\n        title: \"Storage Management\",\n        items: [\n            { code: \"C13\", question: \"Is inventory recorded for incoming and outgoing goods?\" },\n            { code: \"C14\", question: \"Is inventory stored in safe and suitable conditions?\" },\n            { code: \"C15\", question: \"Are materials clearly identified and segregated?\" },\n            { code: \"C16\", question: \"Is product condition checked regularly in storage?\" },\n            { code: \"C17\", question: \"Is inventory managed using FIFO or similar systems?\" }\n        ]\n    },\n    {\n        title: \"Incoming Inspection\",\n        items: [\n            { code: \"C18\", question: \"Is there a separate area for uninspected materials?\" },\n            { code: \"C19\", question: \"Are inspection criteria defined for incoming goods?\" },\n            { code: \"C20\", question: \"Are inspections conducted and results recorded?\" },\n            { code: \"C21\", question: \"Are unverified materials checked via alternate methods?\" },\n            { code: \"C22\", question: \"Are customer-designated sources properly controlled?\" },\n            { code: \"C23\", question: \"Is inspection status clearly marked on materials?\" },\n            { code: \"C24\", question: \"Are rejected materials properly handled and recorded?\" },\n            { code: \"C25\", question: \"Are inspection results analyzed for supplier evaluation?\" }\n        ]\n    },\n    {\n        title: \"Production Control\",\n        items: [\n            { code: \"C26\", question: \"Are manufacturing inputs reviewed and documented?\" },\n            { code: \"C27\", question: \"Are outputs expressed in specs and drawings?\" },\n            { code: \"C28\", question: \"Is there a control plan for production?\" },\n            { code: \"C29\", question: \"Are QC staff and work instructions in place?\" },\n            { code: \"C30\", question: \"Are materials defined via BOM or similar?\" },\n            { code: \"C31\", question: \"Is production scheduled based on capacity and orders?\" },\n            { code: \"C32\", question: \"Are products traceable and batch-controlled?\" },\n            { code: \"C33\", question: \"Are rejected items isolated and rechecked?\" },\n            { code: \"C34\", question: \"Are defects and trends analyzed?\" },\n            { code: \"C35\", question: \"Are new tools evaluated before use?\" },\n            { code: \"C36\", question: \"Are process parameters monitored and recorded?\" },\n            { code: \"C37\", question: \"Can QC stop production for quality issues?\" },\n            { code: \"C38\", question: \"Is equipment maintenance planned and recorded?\" },\n            { code: \"C39\", question: \"Are handling and transport methods suitable?\" },\n            { code: \"C40\", question: \"Are packing and packaging requirements defined?\" },\n            { code: \"C41\", question: \"Is the production flow chart available and clear?\" },\n            { code: \"C42\", question: \"Are outsourced processes identified?\" },\n            { code: \"C43\", question: \"Does the factory have relevant production experience?\" },\n            { code: \"C44\", question: \"Are workers skilled and observed during audit?\" },\n            { code: \"C45\", question: \"Are machines and facilities adequate for production?\" }\n        ]\n    },\n    {\n        title: \"Final Product Inspection & Testing\",\n        items: [\n            { code: \"C46\", question: \"Are customer specs available for QC?\" },\n            { code: \"C47\", question: \"Are final inspection criteria defined?\" },\n            { code: \"C48\", question: \"Are final inspections conducted and recorded?\" },\n            { code: \"C49\", question: \"Are appearance checks done with proper tools?\" },\n            { code: \"C50\", question: \"Are safety and functionality checks performed?\" },\n            { code: \"C51\", question: \"Are rejected lots isolated and handled properly?\" },\n            { code: \"C52\", question: \"Are causes of rejects investigated and improved?\" },\n            { code: \"C53\", question: \"Is ongoing reliability testing conducted?\" }\n        ]\n    },\n    {\n        title: \"Measuring & Testing Equipment\",\n        items: [\n            { code: \"C54\", question: \"Is life/reliability testing equipment available?\" },\n            { code: \"C55\", question: \"Are gauges and tools maintained and protected?\" },\n            { code: \"C56\", question: \"Is equipment calibrated regularly?\" },\n            { code: \"C57\", question: \"Are display devices checked frequently?\" },\n            { code: \"C58\", question: \"Is equipment condition verified with fault simulation?\" }\n        ]\n    },\n    {\n        title: \"Resource Management\",\n        items: [\n            { code: \"C59\", question: \"Is infrastructure adequate and layout optimized?\" },\n            { code: \"C60\", question: \"Is the factory clean and well-maintained?\" },\n            { code: \"C61\", question: \"Are training needs identified and addressed?\" },\n            { code: \"C62\", question: \"Are employees motivated for quality and innovation?\" },\n            { code: \"C63\", question: \"Are contingency plans in place for emergencies?\" }\n        ]\n    },\n    {\n        title: \"Continuous Improvement\",\n        items: [\n            { code: \"C64\", question: \"Is data collected to support improvement?\" },\n            { code: \"C65\", question: \"Are failures recorded and investigated?\" },\n            { code: \"C66\", question: \"Are quality objectives defined and measured?\" },\n            { code: \"C67\", question: \"Are internal audits planned and conducted?\" },\n            { code: \"C68\", question: \"Does top management review the QMS?\" },\n            { code: \"C69\", question: \"Are corrective actions taken and reviewed?\" },\n            { code: \"C70\", question: \"Are preventive actions implemented?\" },\n            { code: \"C71\", question: \"Are improvement programs like 5S or Kaizen used?\" },\n            { code: \"C72\", question: \"Are audit and review results followed up?\" },\n            { code: \"C73\", question: \"Are customer complaints reviewed?\" }\n        ]\n    },\n    {\n        title: \"Social & Environmental Responsibility\",\n        items: [\n            { code: \"C74\", question: \"Are working conditions (air, light, cleanliness) acceptable?\" },\n            { code: \"C75\", question: \"Are all workers above the legal working age?\" },\n            { code: \"C76\", question: \"Do working hours comply with labor laws?\" },\n            { code: \"C77\", question: \"Do workers get at least one day off per week?\" },\n            { code: \"C78\", question: \"Are workers employed voluntarily?\" },\n            { code: \"C79\", question: \"Are wages equal to or above legal minimum?\" },\n            { code: \"C80\", question: \"Do women have equal rights and protections?\" },\n            { code: \"C81\", question: \"Are workers treated respectfully without abuse?\" },\n            { code: \"C82\", question: \"Is the fire protection system adequate and functional?\" },\n            { code: \"C83\", question: \"Are fire and evacuation drills conducted regularly?\" }\n        ]\n    },\n    {\n        title: \"Health & Safety\",\n        items: [\n            { code: \"C84\", question: \"Are buildings in good physical condition?\" },\n            { code: \"C85\", question: \"Are machine guards installed for safety?\" },\n            { code: \"C86\", question: \"Are special equipment registered and inspected?\" },\n            { code: \"C87\", question: \"Are safety instructions about clothing/jewelry followed?\" },\n            { code: \"C88\", question: \"Is PPE provided and in good condition?\" },\n            { code: \"C89\", question: \"Are PPE signs posted in required areas?\" },\n            { code: \"C90\", question: \"Do workers follow safety instructions and use PPE?\" },\n            { code: \"C91\", question: \"Is dormitory separate from production areas?\" },\n            { code: \"C92\", question: \"Is a valid restaurant license available if required?\" },\n            { code: \"C93\", question: \"Is medical service (e.g., first aid) available for workers?\" }\n        ]\n    }\n];\nexport function ComplianceAuditForm({ company, onBack, existingAudit }) {\n    const { toast } = useToast();\n    const [currentPart, setCurrentPart] = useState(0);\n    const [auditData, setAuditData] = useState({\n        auditorName: '',\n        location: '',\n        auditScope: '',\n        checklist: auditParts.flatMap(part => part.items),\n        partScores: {}\n    });\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    const [isSaving, setIsSaving] = useState(false);\n    const [auditId, setAuditId] = useState(existingAudit?.id || null);\n    const [uploadingEvidence, setUploadingEvidence] = useState(new Set());\n    // Load existing audit data if editing\n    useEffect(() => {\n        if (existingAudit) {\n            setAuditData({\n                auditorName: existingAudit.auditorName,\n                location: existingAudit.location,\n                auditScope: existingAudit.auditScope,\n                checklist: existingAudit.parts?.flatMap(part => part.items.map(item => ({\n                    code: item.id || `C${Math.random().toString(36).substr(2, 3)}`,\n                    question: item.question || '',\n                    response: item.response,\n                    remarks: item.remark,\n                    evidence: item.evidenceImages || []\n                }))) || auditParts.flatMap(part => part.items),\n                partScores: {}\n            });\n        }\n    }, [existingAudit]);\n    const updateResponse = (code, response) => {\n        setAuditData(prev => ({\n            ...prev,\n            checklist: prev.checklist.map(item => item.code === code ? { ...item, response } : item)\n        }));\n    };\n    const updateRemarks = (code, remarks) => {\n        setAuditData(prev => ({\n            ...prev,\n            checklist: prev.checklist.map(item => item.code === code ? { ...item, remarks } : item)\n        }));\n    };\n    const addEvidence = (code, imageUrl) => {\n        setAuditData(prev => ({\n            ...prev,\n            checklist: prev.checklist.map(item => item.code === code\n                ? { ...item, evidence: [...(item.evidence || []), imageUrl] }\n                : item)\n        }));\n    };\n    const removeEvidence = (code, index) => {\n        setAuditData(prev => ({\n            ...prev,\n            checklist: prev.checklist.map(item => item.code === code\n                ? { ...item, evidence: item.evidence?.filter((_, i) => i !== index) || [] }\n                : item)\n        }));\n    };\n    const calculatePartScore = (partIndex) => {\n        const part = auditParts[partIndex];\n        const partItems = auditData.checklist.filter(item => part.items.some(partItem => partItem.code === item.code));\n        const applicableItems = partItems.filter(item => item.response && item.response !== 'NA');\n        const yesCount = partItems.filter(item => item.response === 'Yes').length;\n        return applicableItems.length > 0 ? Math.round((yesCount / applicableItems.length) * 100) : 0;\n    };\n    const calculateTotalScore = () => {\n        const applicableItems = auditData.checklist.filter(item => item.response && item.response !== 'NA');\n        const yesCount = auditData.checklist.filter(item => item.response === 'Yes').length;\n        return applicableItems.length > 0 ? Math.round((yesCount / applicableItems.length) * 100) : 0;\n    };\n    const updateEvidenceInFirestore = async (auditId, questionCode, evidenceUrl) => {\n        try {\n            // Get current audit data\n            const response = await fetch(`/api/audits/compliance/${auditId}`);\n            if (!response.ok)\n                throw new Error('Failed to fetch audit');\n            const { audit } = await response.json();\n            // Update the specific question's evidence array in parts structure\n            const updatedParts = audit.parts.map((part) => ({\n                ...part,\n                items: part.items.map((item) => {\n                    if (item.code === questionCode) {\n                        return {\n                            ...item,\n                            evidenceImages: [...(item.evidenceImages || []), evidenceUrl]\n                        };\n                    }\n                    return item;\n                })\n            }));\n            // CRITICAL: Also update the checklist field for PDF generation\n            const updatedChecklist = (audit.checklist || []).map((item) => {\n                if (item.code === questionCode) {\n                    return {\n                        ...item,\n                        evidence: [...(item.evidence || []), evidenceUrl]\n                    };\n                }\n                return item;\n            });\n            console.log(`🔄 Updating evidence for ${questionCode}: ${evidenceUrl.substring(0, 50)}...`);\n            console.log(`📋 Updated checklist item:`, updatedChecklist.find(item => item.code === questionCode));\n            // Update Firestore with BOTH parts and checklist fields\n            const updateResponse = await fetch(`/api/audits/compliance/${auditId}`, {\n                method: 'PUT',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({\n                    ...audit,\n                    parts: updatedParts,\n                    checklist: updatedChecklist,\n                    updatedAt: new Date().toISOString()\n                })\n            });\n            if (!updateResponse.ok) {\n                throw new Error('Failed to update audit in Firestore');\n            }\n            console.log(`✅ Evidence URL successfully added to both parts and checklist for ${questionCode}`);\n        }\n        catch (error) {\n            console.error('Error updating evidence in Firestore:', error);\n            throw error;\n        }\n    };\n    const handleImageUpload = async (code, event) => {\n        const file = event.target.files?.[0];\n        if (!file)\n            return;\n        // If no audit ID yet, we need to create a draft first\n        if (!auditId) {\n            toast({\n                title: \"Saving audit first\",\n                description: \"Creating audit draft before uploading evidence...\",\n            });\n            await saveDraft();\n            if (!auditId) {\n                toast({\n                    title: \"Error\",\n                    description: \"Failed to create audit. Please try again.\",\n                    variant: \"destructive\",\n                });\n                return;\n            }\n        }\n        // Add to uploading set for UI feedback\n        setUploadingEvidence(prev => new Set([...prev, code]));\n        try {\n            toast({\n                title: \"Uploading evidence\",\n                description: \"Saving evidence image...\",\n            });\n            // Upload to Firebase Storage\n            const uploadResult = await uploadEvidenceImage(file, auditId, code);\n            // Add the Firebase Storage URL to local state\n            addEvidence(code, uploadResult.url);\n            // Update Firestore with the new evidence URL\n            await updateEvidenceInFirestore(auditId, code, uploadResult.url);\n            toast({\n                title: \"Evidence uploaded\",\n                description: \"Evidence image saved successfully.\",\n            });\n        }\n        catch (error) {\n            console.error('Evidence upload error:', error);\n            toast({\n                title: \"Upload failed\",\n                description: \"Failed to upload evidence. Please retry.\",\n                variant: \"destructive\",\n            });\n        }\n        finally {\n            // Remove from uploading set\n            setUploadingEvidence(prev => {\n                const newSet = new Set(prev);\n                newSet.delete(code);\n                return newSet;\n            });\n        }\n    };\n    const saveDraft = async () => {\n        setIsSaving(true);\n        try {\n            // Create flattened checklist array\n            const flattenedChecklist = auditParts.flatMap(part => part.items.map(item => {\n                const checklistItem = auditData.checklist.find(c => c.code === item.code);\n                return {\n                    code: item.code,\n                    question: item.question,\n                    response: checklistItem?.response,\n                    remark: checklistItem?.remarks,\n                    evidence: checklistItem?.evidence || []\n                };\n            }));\n            console.log('📋 Flattened checklist before saving:', flattenedChecklist);\n            console.log('📊 Checklist items with evidence:', flattenedChecklist.filter(item => item.evidence && item.evidence.length > 0));\n            const auditToSave = {\n                auditorName: auditData.auditorName,\n                location: auditData.location,\n                auditScope: auditData.auditScope,\n                company,\n                auditDate: new Date().toISOString().split('T')[0],\n                // Keep original parts structure\n                parts: auditParts.map((part, index) => ({\n                    id: `part-${index + 1}`,\n                    title: part.title,\n                    items: part.items.map(item => {\n                        const checklistItem = auditData.checklist.find(c => c.code === item.code);\n                        return {\n                            code: item.code,\n                            question: item.question,\n                            response: checklistItem?.response,\n                            remark: checklistItem?.remarks,\n                            evidenceImages: checklistItem?.evidence || []\n                        };\n                    }),\n                    weight: 1,\n                    maxPoints: part.items.length\n                })),\n                // Add flattened checklist array\n                checklist: flattenedChecklist,\n                status: 'draft'\n            };\n            // API call to save draft\n            const response = await fetch('/api/audits/compliance', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify(auditToSave)\n            });\n            if (response.ok) {\n                const result = await response.json();\n                // Set the audit ID for future evidence uploads\n                if (result.id && !auditId) {\n                    setAuditId(result.id);\n                }\n                // Trigger cache refresh for real-time UI updates\n                window.dispatchEvent(new CustomEvent('compliance-audit-saved'));\n                toast({\n                    title: \"Draft saved\",\n                    description: \"Audit draft saved successfully.\",\n                });\n            }\n            else {\n                throw new Error('Failed to save draft');\n            }\n        }\n        catch (error) {\n            toast({\n                title: \"Error saving draft\",\n                description: \"Failed to save audit draft. Please try again.\",\n                variant: \"destructive\",\n            });\n        }\n        finally {\n            setIsSaving(false);\n        }\n    };\n    const submitAudit = async () => {\n        setIsSubmitting(true);\n        try {\n            // Create flattened checklist array for submission\n            const flattenedChecklist = auditParts.flatMap(part => part.items.map(item => {\n                const checklistItem = auditData.checklist.find(c => c.code === item.code);\n                return {\n                    code: item.code,\n                    question: item.question,\n                    response: checklistItem?.response,\n                    remark: checklistItem?.remarks,\n                    evidence: checklistItem?.evidence || []\n                };\n            }));\n            console.log('📋 Flattened checklist before submission:', flattenedChecklist);\n            console.log('📊 Checklist items with evidence:', flattenedChecklist.filter(item => item.evidence && item.evidence.length > 0));\n            const auditToSubmit = {\n                auditorName: auditData.auditorName,\n                location: auditData.location,\n                auditScope: auditData.auditScope,\n                company,\n                auditDate: new Date().toISOString().split('T')[0],\n                // Keep original parts structure\n                parts: auditParts.map((part, index) => ({\n                    id: `part-${index + 1}`,\n                    title: part.title,\n                    items: part.items.map(item => {\n                        const checklistItem = auditData.checklist.find(c => c.code === item.code);\n                        return {\n                            code: item.code,\n                            question: item.question,\n                            response: checklistItem?.response,\n                            remark: checklistItem?.remarks,\n                            evidenceImages: checklistItem?.evidence || []\n                        };\n                    }),\n                    weight: 1,\n                    maxPoints: part.items.length\n                })),\n                // Add flattened checklist array\n                checklist: flattenedChecklist,\n                status: 'submitted'\n            };\n            const response = await fetch('/api/audits/compliance', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify(auditToSubmit)\n            });\n            if (response.ok) {\n                // Trigger cache refresh for real-time UI updates\n                window.dispatchEvent(new CustomEvent('compliance-audit-submitted'));\n                toast({\n                    title: \"Audit submitted\",\n                    description: \"Compliance audit submitted successfully.\",\n                });\n                onBack();\n            }\n            else {\n                throw new Error('Failed to submit audit');\n            }\n        }\n        catch (error) {\n            toast({\n                title: \"Error submitting audit\",\n                description: \"Failed to submit audit. Please try again.\",\n                variant: \"destructive\",\n            });\n        }\n        finally {\n            setIsSubmitting(false);\n        }\n    };\n    const currentPartData = auditParts[currentPart];\n    const currentPartItems = auditData.checklist.filter(item => currentPartData.items.some(partItem => partItem.code === item.code));\n    return (_jsx(\"div\", { className: \"min-h-screen bg-gray-50 p-4\", children: _jsxs(\"div\", { className: \"max-w-4xl mx-auto\", children: [_jsxs(\"div\", { className: \"mb-6\", children: [_jsxs(\"div\", { className: \"flex items-center gap-4 mb-4\", children: [_jsxs(Button, { variant: \"outline\", onClick: onBack, className: \"flex items-center gap-2\", children: [_jsx(ArrowLeft, { className: \"h-4 w-4\" }), \"Back to Dashboard\"] }), _jsx(Badge, { variant: \"secondary\", className: \"text-sm\", children: company === 'EHI' ? 'Eastern Home Industries' : 'Eastern Mills Private Limited' })] }), _jsx(\"h1\", { className: \"text-2xl font-bold text-gray-900 mb-2\", children: \"Compliance Audit Form\" }), _jsxs(\"div\", { className: \"flex items-center gap-4 text-sm text-gray-600\", children: [_jsxs(\"span\", { children: [\"Part \", currentPart + 1, \" of \", auditParts.length] }), _jsx(\"span\", { children: \"\\u2022\" }), _jsx(\"span\", { children: currentPartData.title }), _jsx(\"span\", { children: \"\\u2022\" }), _jsxs(\"span\", { children: [\"Score: \", calculatePartScore(currentPart), \"%\"] })] })] }), currentPart === 0 && (_jsxs(Card, { className: \"mb-6\", children: [_jsx(CardHeader, { children: _jsx(CardTitle, { children: \"Audit Information\" }) }), _jsxs(CardContent, { className: \"grid grid-cols-1 md:grid-cols-3 gap-4\", children: [_jsxs(\"div\", { children: [_jsx(\"label\", { className: \"block text-sm font-medium mb-2\", children: \"Auditor Name\" }), _jsx(Input, { value: auditData.auditorName, onChange: (e) => setAuditData(prev => ({ ...prev, auditorName: e.target.value })), placeholder: \"Enter auditor name\" })] }), _jsxs(\"div\", { children: [_jsx(\"label\", { className: \"block text-sm font-medium mb-2\", children: \"Location\" }), _jsx(Input, { value: auditData.location, onChange: (e) => setAuditData(prev => ({ ...prev, location: e.target.value })), placeholder: \"Enter audit location\" })] }), _jsxs(\"div\", { children: [_jsx(\"label\", { className: \"block text-sm font-medium mb-2\", children: \"Audit Scope\" }), _jsx(Input, { value: auditData.auditScope, onChange: (e) => setAuditData(prev => ({ ...prev, auditScope: e.target.value })), placeholder: \"Enter audit scope\" })] })] })] })), _jsxs(Card, { className: \"mb-6\", children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: \"flex items-center justify-between\", children: [_jsxs(\"span\", { children: [\"Part \", currentPart + 1, \": \", currentPartData.title] }), _jsxs(Badge, { variant: \"secondary\", children: [calculatePartScore(currentPart), \"% Complete\"] })] }) }), _jsx(CardContent, { className: \"space-y-6\", children: currentPartData.items.map((item, index) => {\n                                const checklistItem = auditData.checklist.find(c => c.code === item.code);\n                                return (_jsxs(\"div\", { className: \"border rounded-lg p-4 bg-white\", children: [_jsx(\"div\", { className: \"flex items-start justify-between mb-3\", children: _jsx(\"div\", { className: \"flex-1\", children: _jsxs(\"div\", { className: \"flex items-center gap-2 mb-2\", children: [_jsx(Badge, { variant: \"outline\", className: \"text-xs\", children: item.code }), _jsx(\"span\", { className: \"text-sm font-medium text-gray-900\", children: item.question })] }) }) }), _jsxs(\"div\", { className: \"flex gap-2 mb-3\", children: [_jsxs(Button, { variant: checklistItem?.response === 'Yes' ? 'default' : 'outline', size: \"sm\", onClick: () => updateResponse(item.code, 'Yes'), className: \"flex items-center gap-1\", children: [_jsx(Check, { className: \"h-3 w-3\" }), \"Yes\"] }), _jsxs(Button, { variant: checklistItem?.response === 'No' ? 'destructive' : 'outline', size: \"sm\", onClick: () => updateResponse(item.code, 'No'), className: \"flex items-center gap-1\", children: [_jsx(X, { className: \"h-3 w-3\" }), \"No\"] }), _jsxs(Button, { variant: checklistItem?.response === 'NA' ? 'secondary' : 'outline', size: \"sm\", onClick: () => updateResponse(item.code, 'NA'), className: \"flex items-center gap-1\", children: [_jsx(AlertTriangle, { className: \"h-3 w-3\" }), \"N/A\"] })] }), _jsxs(\"div\", { className: \"mb-3\", children: [_jsx(\"label\", { className: \"block text-xs font-medium text-gray-700 mb-1\", children: \"Remarks (Optional)\" }), _jsx(Textarea, { value: checklistItem?.remarks || '', onChange: (e) => updateRemarks(item.code, e.target.value), placeholder: \"Add any remarks or observations...\", className: \"text-sm\", rows: 2 })] }), _jsxs(\"div\", { children: [_jsx(\"label\", { className: \"block text-xs font-medium text-gray-700 mb-2\", children: \"Evidence Images (Optional - Max 5)\" }), _jsxs(\"div\", { className: \"flex items-center gap-2 flex-wrap\", children: [checklistItem?.evidence?.map((imageUrl, imgIndex) => (_jsxs(\"div\", { className: \"relative\", children: [_jsx(\"img\", { src: imageUrl, alt: `Evidence ${imgIndex + 1}`, className: \"w-16 h-16 object-cover rounded border\" }), _jsx(Button, { variant: \"destructive\", size: \"sm\", className: \"absolute -top-2 -right-2 h-5 w-5 rounded-full p-0\", onClick: () => removeEvidence(item.code, imgIndex), children: _jsx(X, { className: \"h-3 w-3\" }) })] }, imgIndex))), (!checklistItem?.evidence || checklistItem.evidence.length < 5) && (_jsxs(\"label\", { className: \"cursor-pointer\", children: [_jsx(\"div\", { className: \"w-16 h-16 border-2 border-dashed border-gray-300 rounded flex items-center justify-center hover:border-blue-400 transition-colors\", children: uploadingEvidence.has(item.code) ? (_jsx(\"div\", { className: \"animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600\" })) : (_jsx(Plus, { className: \"h-6 w-6 text-gray-400\" })) }), _jsx(\"input\", { type: \"file\", accept: \"image/*\", className: \"hidden\", onChange: (e) => handleImageUpload(item.code, e), disabled: uploadingEvidence.has(item.code) })] }))] })] })] }, item.code));\n                            }) })] }), _jsxs(\"div\", { className: \"flex items-center justify-between\", children: [_jsxs(\"div\", { className: \"flex gap-2\", children: [_jsxs(Button, { variant: \"outline\", onClick: () => setCurrentPart(Math.max(0, currentPart - 1)), disabled: currentPart === 0, className: \"flex items-center gap-2\", children: [_jsx(ArrowLeft, { className: \"h-4 w-4\" }), \"Previous Part\"] }), currentPart < auditParts.length - 1 && (_jsxs(Button, { onClick: () => setCurrentPart(Math.min(auditParts.length - 1, currentPart + 1)), className: \"flex items-center gap-2\", children: [\"Next Part\", _jsx(ArrowRight, { className: \"h-4 w-4\" })] }))] }), _jsxs(\"div\", { className: \"flex gap-2\", children: [_jsxs(Button, { variant: \"outline\", onClick: saveDraft, disabled: isSaving, className: \"flex items-center gap-2\", children: [_jsx(Save, { className: \"h-4 w-4\" }), isSaving ? 'Saving...' : 'Save Draft'] }), currentPart === auditParts.length - 1 && (_jsxs(Button, { onClick: submitAudit, disabled: isSubmitting || !auditData.auditorName || !auditData.location, className: \"flex items-center gap-2\", children: [_jsx(Send, { className: \"h-4 w-4\" }), isSubmitting ? 'Submitting...' : 'Submit Audit'] }))] })] }), _jsxs(\"div\", { className: \"mt-6\", children: [_jsxs(\"div\", { className: \"flex justify-between text-xs text-gray-500 mb-1\", children: [_jsx(\"span\", { children: \"Progress\" }), _jsxs(\"span\", { children: [currentPart + 1, \" / \", auditParts.length] })] }), _jsx(\"div\", { className: \"w-full bg-gray-200 rounded-full h-2\", children: _jsx(\"div\", { className: \"bg-blue-500 h-2 rounded-full transition-all duration-300\", style: { width: `${((currentPart + 1) / auditParts.length) * 100}%` } }) })] })] }) }));\n}\n",
      "size": 31557
    },
    {
      "path": "client/src/components/ComplianceAuditFormClean.tsx",
      "content": "import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\nimport { Button } from './ui/button';\nimport { Badge } from './ui/badge';\nimport { Input } from './ui/input';\nimport { Textarea } from './ui/textarea';\nimport { \n  ArrowLeft, \n  ArrowRight, \n  Check, \n  X, \n  AlertTriangle, \n  Camera, \n  Trash2, \n  Save,\n  Send\n} from 'lucide-react';\nimport { useToast } from '../hooks/use-toast';\nimport { ComplianceAudit, ChecklistItem } from '../../../shared/schema';\nimport { uploadEvidenceImage } from '../utils/firebaseStorage';\n\ninterface ComplianceAuditFormCleanProps {\n  company: 'EHI' | 'EMPL';\n  onBack: () => void;\n  existingAudit?: ComplianceAudit | null;\n}\n\n// Complete 93-item checklist template\nconst checklistTemplate: ChecklistItem[] = [\n  // Design Control (C1-C7)\n  { code: \"C1\", question: \"Are design and development procedures established?\", remark: \"\", evidence: [] },\n  { code: \"C2\", question: \"Are design input requirements identified and reviewed?\", remark: \"\", evidence: [] },\n  { code: \"C3\", question: \"Are design reviews conducted at key stages?\", remark: \"\", evidence: [] },\n  { code: \"C4\", question: \"Does design output include all necessary production info?\", remark: \"\", evidence: [] },\n  { code: \"C5\", question: \"Are design changes verified and controlled?\", remark: \"\", evidence: [] },\n  { code: \"C6\", question: \"Is prototype or pilot testing done before production?\", remark: \"\", evidence: [] },\n  { code: \"C7\", question: \"Are design personnel competent and qualified?\", remark: \"\", evidence: [] },\n  \n  // Purchasing Control (C8-C12)\n  { code: \"C8\", question: \"Are suppliers evaluated and approved before ordering?\", remark: \"\", evidence: [] },\n  { code: \"C9\", question: \"Are materials purchased from approved sources?\", remark: \"\", evidence: [] },\n  { code: \"C10\", question: \"Are product specs and requirements agreed with suppliers?\", remark: \"\", evidence: [] },\n  { code: \"C11\", question: \"Is supplier performance monitored and recorded?\", remark: \"\", evidence: [] },\n  { code: \"C12\", question: \"Is supplier risk assessed to avoid material shortages?\", remark: \"\", evidence: [] },\n  \n  // Storage Management (C13-C17)\n  { code: \"C13\", question: \"Is inventory recorded for incoming and outgoing goods?\", remark: \"\", evidence: [] },\n  { code: \"C14\", question: \"Is inventory stored in safe and suitable conditions?\", remark: \"\", evidence: [] },\n  { code: \"C15\", question: \"Are materials clearly identified and segregated?\", remark: \"\", evidence: [] },\n  { code: \"C16\", question: \"Is product condition checked regularly in storage?\", remark: \"\", evidence: [] },\n  { code: \"C17\", question: \"Is inventory managed using FIFO or similar systems?\", remark: \"\", evidence: [] },\n  \n  // Incoming Inspection (C18-C25)\n  { code: \"C18\", question: \"Is there a separate area for uninspected materials?\", remark: \"\", evidence: [] },\n  { code: \"C19\", question: \"Are inspection criteria defined for incoming goods?\", remark: \"\", evidence: [] },\n  { code: \"C20\", question: \"Are inspections conducted and results recorded?\", remark: \"\", evidence: [] },\n  { code: \"C21\", question: \"Are unverified materials checked via alternate methods?\", remark: \"\", evidence: [] },\n  { code: \"C22\", question: \"Are customer-designated sources properly controlled?\", remark: \"\", evidence: [] },\n  { code: \"C23\", question: \"Is inspection status clearly marked on materials?\", remark: \"\", evidence: [] },\n  { code: \"C24\", question: \"Are rejected materials properly handled and recorded?\", remark: \"\", evidence: [] },\n  { code: \"C25\", question: \"Are inspection results analyzed for supplier evaluation?\", remark: \"\", evidence: [] },\n  \n  // Production Control (C26-C45)\n  { code: \"C26\", question: \"Are manufacturing inputs reviewed and documented?\", remark: \"\", evidence: [] },\n  { code: \"C27\", question: \"Are outputs expressed in specs and drawings?\", remark: \"\", evidence: [] },\n  { code: \"C28\", question: \"Is there a control plan for production?\", remark: \"\", evidence: [] },\n  { code: \"C29\", question: \"Are QC staff and work instructions in place?\", remark: \"\", evidence: [] },\n  { code: \"C30\", question: \"Are materials defined via BOM or similar?\", remark: \"\", evidence: [] },\n  { code: \"C31\", question: \"Is production scheduled based on capacity and orders?\", remark: \"\", evidence: [] },\n  { code: \"C32\", question: \"Are products traceable and batch-controlled?\", remark: \"\", evidence: [] },\n  { code: \"C33\", question: \"Are rejected items isolated and rechecked?\", remark: \"\", evidence: [] },\n  { code: \"C34\", question: \"Are defects and trends analyzed?\", remark: \"\", evidence: [] },\n  { code: \"C35\", question: \"Are new tools evaluated before use?\", remark: \"\", evidence: [] },\n  { code: \"C36\", question: \"Are process parameters monitored and recorded?\", remark: \"\", evidence: [] },\n  { code: \"C37\", question: \"Can QC stop production for quality issues?\", remark: \"\", evidence: [] },\n  { code: \"C38\", question: \"Is equipment maintenance planned and recorded?\", remark: \"\", evidence: [] },\n  { code: \"C39\", question: \"Are handling and transport methods suitable?\", remark: \"\", evidence: [] },\n  { code: \"C40\", question: \"Are packing and packaging requirements defined?\", remark: \"\", evidence: [] },\n  { code: \"C41\", question: \"Is the production flow chart available and clear?\", remark: \"\", evidence: [] },\n  { code: \"C42\", question: \"Are outsourced processes identified?\", remark: \"\", evidence: [] },\n  { code: \"C43\", question: \"Does the factory have relevant production experience?\", remark: \"\", evidence: [] },\n  { code: \"C44\", question: \"Are workers skilled and observed during audit?\", remark: \"\", evidence: [] },\n  { code: \"C45\", question: \"Are machines and facilities adequate for production?\", remark: \"\", evidence: [] },\n  \n  // Final Product Inspection & Testing (C46-C53)\n  { code: \"C46\", question: \"Are customer specs available for QC?\", remark: \"\", evidence: [] },\n  { code: \"C47\", question: \"Are final inspection criteria defined?\", remark: \"\", evidence: [] },\n  { code: \"C48\", question: \"Are final inspections conducted and recorded?\", remark: \"\", evidence: [] },\n  { code: \"C49\", question: \"Are appearance checks done with proper tools?\", remark: \"\", evidence: [] },\n  { code: \"C50\", question: \"Are safety and functionality checks performed?\", remark: \"\", evidence: [] },\n  { code: \"C51\", question: \"Are rejected lots isolated and handled properly?\", remark: \"\", evidence: [] },\n  { code: \"C52\", question: \"Are causes of rejects investigated and improved?\", remark: \"\", evidence: [] },\n  { code: \"C53\", question: \"Is ongoing reliability testing conducted?\", remark: \"\", evidence: [] },\n  \n  // Measuring & Testing Equipment (C54-C58)\n  { code: \"C54\", question: \"Are measuring instruments calibrated and controlled?\", remark: \"\", evidence: [] },\n  { code: \"C55\", question: \"Is calibration status clearly marked on equipment?\", remark: \"\", evidence: [] },\n  { code: \"C56\", question: \"Are measurement standards traceable to national standards?\", remark: \"\", evidence: [] },\n  { code: \"C57\", question: \"Are out-of-calibration results investigated?\", remark: \"\", evidence: [] },\n  { code: \"C58\", question: \"Is equipment protected from environmental conditions?\", remark: \"\", evidence: [] },\n  \n  // Resource Management (C59-C63)\n  { code: \"C59\", question: \"Are quality personnel competent and trained?\", remark: \"\", evidence: [] },\n  { code: \"C60\", question: \"Is training effectiveness evaluated and recorded?\", remark: \"\", evidence: [] },\n  { code: \"C61\", question: \"Are job descriptions and responsibilities defined?\", remark: \"\", evidence: [] },\n  { code: \"C62\", question: \"Is the work environment suitable for quality work?\", remark: \"\", evidence: [] },\n  { code: \"C63\", question: \"Are infrastructure requirements identified and provided?\", remark: \"\", evidence: [] },\n  \n  // Continuous Improvement (C64-C73)\n  { code: \"C64\", question: \"Are customer satisfaction levels monitored?\", remark: \"\", evidence: [] },\n  { code: \"C65\", question: \"Are internal audits planned and conducted?\", remark: \"\", evidence: [] },\n  { code: \"C66\", question: \"Are audit findings addressed with corrective actions?\", remark: \"\", evidence: [] },\n  { code: \"C67\", question: \"Is management review conducted at planned intervals?\", remark: \"\", evidence: [] },\n  { code: \"C68\", question: \"Are quality objectives set and monitored?\", remark: \"\", evidence: [] },\n  { code: \"C69\", question: \"Is statistical data used for decision making?\", remark: \"\", evidence: [] },\n  { code: \"C70\", question: \"Are preventive actions implemented to avoid problems?\", remark: \"\", evidence: [] },\n  { code: \"C71\", question: \"Is there a system for handling customer complaints?\", remark: \"\", evidence: [] },\n  { code: \"C72\", question: \"Are quality costs analyzed and controlled?\", remark: \"\", evidence: [] },\n  { code: \"C73\", question: \"Is there evidence of continuous improvement activities?\", remark: \"\", evidence: [] },\n  \n  // Social & Environmental Responsibility (C74-C83)\n  { code: \"C74\", question: \"Are environmental policies established and implemented?\", remark: \"\", evidence: [] },\n  { code: \"C75\", question: \"Is waste management controlled and monitored?\", remark: \"\", evidence: [] },\n  { code: \"C76\", question: \"Are energy consumption reduction measures in place?\", remark: \"\", evidence: [] },\n  { code: \"C77\", question: \"Are chemical usage and storage properly controlled?\", remark: \"\", evidence: [] },\n  { code: \"C78\", question: \"Is water usage monitored and controlled?\", remark: \"\", evidence: [] },\n  { code: \"C79\", question: \"Are social responsibility policies documented?\", remark: \"\", evidence: [] },\n  { code: \"C80\", question: \"Are worker rights and conditions monitored?\", remark: \"\", evidence: [] },\n  { code: \"C81\", question: \"Is child labor prevention actively enforced?\", remark: \"\", evidence: [] },\n  { code: \"C82\", question: \"Are community relations maintained positively?\", remark: \"\", evidence: [] },\n  { code: \"C83\", question: \"Is supplier social compliance monitored?\", remark: \"\", evidence: [] },\n  \n  // Health & Safety (C84-C93)\n  { code: \"C84\", question: \"Are health and safety policies established?\", remark: \"\", evidence: [] },\n  { code: \"C85\", question: \"Is safety training provided to all workers?\", remark: \"\", evidence: [] },\n  { code: \"C86\", question: \"Are personal protective equipment provided and used?\", remark: \"\", evidence: [] },\n  { code: \"C87\", question: \"Are workplace hazards identified and controlled?\", remark: \"\", evidence: [] },\n  { code: \"C88\", question: \"Is emergency response planning in place?\", remark: \"\", evidence: [] },\n  { code: \"C89\", question: \"Are accident/incident reports maintained?\", remark: \"\", evidence: [] },\n  { code: \"C90\", question: \"Is first aid equipment and training available?\", remark: \"\", evidence: [] },\n  { code: \"C91\", question: \"Are fire safety measures adequate and tested?\", remark: \"\", evidence: [] },\n  { code: \"C92\", question: \"Is workplace ergonomics considered and addressed?\", remark: \"\", evidence: [] },\n  { code: \"C93\", question: \"Are health monitoring programs in place?\", remark: \"\", evidence: [] }\n];\n\nexport default function ComplianceAuditFormClean({ company, onBack, existingAudit }: ComplianceAuditFormCleanProps) {\n  const { toast } = useToast();\n  \n  // Clean state - single checklist array\n  const [auditData, setAuditData] = useState<ComplianceAudit>({\n    auditDate: new Date().toISOString().split('T')[0],\n    company,\n    auditorName: '',\n    location: '',\n    auditScope: '',\n    checklist: checklistTemplate,\n    status: 'draft'\n  });\n\n  const [currentPage, setCurrentPage] = useState(0);\n  const [isUploading, setIsUploading] = useState(false);\n  const [isSaving, setIsSaving] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const itemsPerPage = 10;\n  const totalPages = Math.ceil(auditData.checklist.length / itemsPerPage);\n  const currentItems = auditData.checklist.slice(\n    currentPage * itemsPerPage,\n    (currentPage + 1) * itemsPerPage\n  );\n\n  // Load existing audit data\n  useEffect(() => {\n    if (existingAudit?.checklist) {\n      setAuditData(prev => ({\n        ...prev,\n        ...existingAudit,\n        checklist: existingAudit.checklist\n      }));\n    }\n  }, [existingAudit]);\n\n  // Update checklist item\n  const updateChecklistItem = (code: string, field: keyof ChecklistItem, value: any) => {\n    setAuditData(prev => ({\n      ...prev,\n      checklist: prev.checklist.map(item =>\n        item.code === code\n          ? { ...item, [field]: value }\n          : item\n      ),\n      updatedAt: new Date().toISOString()\n    }));\n  };\n\n  // Handle image upload\n  const handleImageUpload = async (code: string, file: File) => {\n    if (!auditData.id) {\n      toast({\n        title: \"Save Required\",\n        description: \"Please save the audit as draft before uploading images.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsUploading(true);\n    try {\n      console.log(`🧹 CLEAN: Uploading image for ${code}`);\n      const imageUrl = await uploadEvidenceImage(file, auditData.id, code);\n      \n      // Add image URL to checklist item's evidence array\n      updateChecklistItem(code, 'evidence', [\n        ...(auditData.checklist.find(item => item.code === code)?.evidence || []),\n        imageUrl\n      ]);\n\n      // Auto-save after image upload\n      await saveAudit();\n\n      toast({\n        title: \"Image Uploaded\",\n        description: \"Evidence image uploaded successfully\"\n      });\n    } catch (error) {\n      console.error('Image upload failed:', error);\n      toast({\n        title: \"Upload Failed\",\n        description: \"Failed to upload image. Please try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  // Remove image from checklist item\n  const removeImage = (code: string, imageIndex: number) => {\n    const item = auditData.checklist.find(item => item.code === code);\n    if (item?.evidence) {\n      const updatedEvidence = item.evidence.filter((_, index) => index !== imageIndex);\n      updateChecklistItem(code, 'evidence', updatedEvidence);\n    }\n  };\n\n  // Save audit (draft or update)\n  const saveAudit = async () => {\n    setIsSaving(true);\n    try {\n      const method = auditData.id ? 'PUT' : 'POST';\n      const url = auditData.id \n        ? `/api/audits/compliance/${auditData.id}`\n        : '/api/audits/compliance';\n\n      console.log('🧹 CLEAN: Saving audit with checklist items:', auditData.checklist.length);\n\n      const response = await fetch(url, {\n        method,\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(auditData)\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const result = await response.json();\n      \n      if (result.success) {\n        if (!auditData.id) {\n          setAuditData(prev => ({ ...prev, id: result.id }));\n        }\n        \n        toast({\n          title: \"Draft Saved\",\n          description: \"Audit saved successfully\"\n        });\n      } else {\n        throw new Error(result.error || 'Save failed');\n      }\n    } catch (error) {\n      console.error('Save failed:', error);\n      toast({\n        title: \"Save Failed\",\n        description: \"Failed to save audit. Please try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  // Submit audit\n  const submitAudit = async () => {\n    setIsSubmitting(true);\n    try {\n      const submitData = {\n        ...auditData,\n        status: 'submitted',\n        submittedAt: new Date().toISOString()\n      };\n\n      const method = auditData.id ? 'PUT' : 'POST';\n      const url = auditData.id \n        ? `/api/audits/compliance/${auditData.id}`\n        : '/api/audits/compliance';\n\n      const response = await fetch(url, {\n        method,\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(submitData)\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const result = await response.json();\n      \n      if (result.success) {\n        toast({\n          title: \"Audit Submitted\",\n          description: \"Compliance audit submitted successfully\"\n        });\n        onBack();\n      } else {\n        throw new Error(result.error || 'Submit failed');\n      }\n    } catch (error) {\n      console.error('Submit failed:', error);\n      toast({\n        title: \"Submit Failed\",\n        description: \"Failed to submit audit. Please try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <Button variant=\"outline\" onClick={onBack}>\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Dashboard\n          </Button>\n          <Badge variant=\"outline\">{company}</Badge>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Badge variant=\"secondary\">\n            Page {currentPage + 1} of {totalPages}\n          </Badge>\n          <Badge variant=\"outline\">\n            {auditData.checklist.filter(item => item.response).length} / {auditData.checklist.length} Completed\n          </Badge>\n        </div>\n      </div>\n\n      {/* Basic Info */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Audit Information</CardTitle>\n        </CardHeader>\n        <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <label className=\"block text-sm font-medium mb-2\">Auditor Name</label>\n            <Input\n              value={auditData.auditorName}\n              onChange={(e) => setAuditData(prev => ({ ...prev, auditorName: e.target.value }))}\n              placeholder=\"Enter auditor name\"\n            />\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium mb-2\">Audit Date</label>\n            <Input\n              type=\"date\"\n              value={auditData.auditDate}\n              onChange={(e) => setAuditData(prev => ({ ...prev, auditDate: e.target.value }))}\n            />\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium mb-2\">Location</label>\n            <Input\n              value={auditData.location}\n              onChange={(e) => setAuditData(prev => ({ ...prev, location: e.target.value }))}\n              placeholder=\"Enter audit location\"\n            />\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium mb-2\">Audit Scope</label>\n            <Input\n              value={auditData.auditScope}\n              onChange={(e) => setAuditData(prev => ({ ...prev, auditScope: e.target.value }))}\n              placeholder=\"Enter audit scope\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Checklist Items */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Compliance Checklist</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {currentItems.map((item) => (\n            <div key={item.code} className=\"border rounded-lg p-4 space-y-4\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <Badge variant=\"outline\">{item.code}</Badge>\n                  </div>\n                  <p className=\"text-sm text-gray-700 mb-3\">{item.question}</p>\n                </div>\n              </div>\n\n              {/* Response Buttons */}\n              <div className=\"flex space-x-2\">\n                {(['Yes', 'No', 'NA'] as const).map((response) => (\n                  <Button\n                    key={response}\n                    variant={item.response === response ? 'default' : 'outline'}\n                    size=\"sm\"\n                    onClick={() => updateChecklistItem(item.code, 'response', response)}\n                    className={\n                      item.response === response\n                        ? response === 'Yes'\n                          ? 'bg-green-600 hover:bg-green-700'\n                          : response === 'No'\n                          ? 'bg-red-600 hover:bg-red-700'\n                          : 'bg-gray-600 hover:bg-gray-700'\n                        : ''\n                    }\n                  >\n                    {response === 'Yes' && <Check className=\"h-4 w-4 mr-1\" />}\n                    {response === 'No' && <X className=\"h-4 w-4 mr-1\" />}\n                    {response === 'NA' && <AlertTriangle className=\"h-4 w-4 mr-1\" />}\n                    {response}\n                  </Button>\n                ))}\n              </div>\n\n              {/* Remarks */}\n              <Textarea\n                placeholder=\"Add remarks (optional)\"\n                value={item.remark}\n                onChange={(e) => updateChecklistItem(item.code, 'remark', e.target.value)}\n                className=\"min-h-[60px]\"\n              />\n\n              {/* Evidence Images */}\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-between\">\n                  <label className=\"text-sm font-medium\">Evidence Images</label>\n                  <div className=\"flex items-center space-x-2\">\n                    <input\n                      type=\"file\"\n                      accept=\"image/*\"\n                      onChange={(e) => {\n                        const file = e.target.files?.[0];\n                        if (file) handleImageUpload(item.code, file);\n                      }}\n                      className=\"hidden\"\n                      id={`image-upload-${item.code}`}\n                    />\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => document.getElementById(`image-upload-${item.code}`)?.click()}\n                      disabled={isUploading || (item.evidence?.length || 0) >= 5}\n                    >\n                      <Camera className=\"h-4 w-4 mr-1\" />\n                      Add Image\n                    </Button>\n                  </div>\n                </div>\n                \n                {item.evidence && item.evidence.length > 0 && (\n                  <div className=\"grid grid-cols-3 gap-2\">\n                    {item.evidence.map((imageUrl, index) => (\n                      <div key={index} className=\"relative group\">\n                        <img\n                          src={imageUrl}\n                          alt={`Evidence ${index + 1}`}\n                          className=\"w-full h-20 object-cover rounded border\"\n                        />\n                        <Button\n                          variant=\"destructive\"\n                          size=\"sm\"\n                          className=\"absolute top-1 right-1 h-6 w-6 p-0 opacity-0 group-hover:opacity-100 transition-opacity\"\n                          onClick={() => removeImage(item.code, index)}\n                        >\n                          <Trash2 className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </div>\n          ))}\n        </CardContent>\n      </Card>\n\n      {/* Navigation and Actions */}\n      <div className=\"flex items-center justify-between\">\n        <Button\n          variant=\"outline\"\n          onClick={() => setCurrentPage(Math.max(0, currentPage - 1))}\n          disabled={currentPage === 0}\n        >\n          <ArrowLeft className=\"h-4 w-4 mr-2\" />\n          Previous\n        </Button>\n\n        <div className=\"flex space-x-2\">\n          <Button\n            variant=\"outline\"\n            onClick={saveAudit}\n            disabled={isSaving}\n          >\n            <Save className=\"h-4 w-4 mr-2\" />\n            {isSaving ? 'Saving...' : 'Save Draft'}\n          </Button>\n          \n          {currentPage === totalPages - 1 && (\n            <Button\n              onClick={submitAudit}\n              disabled={isSubmitting}\n              className=\"bg-green-600 hover:bg-green-700\"\n            >\n              <Send className=\"h-4 w-4 mr-2\" />\n              {isSubmitting ? 'Submitting...' : 'Submit Audit'}\n            </Button>\n          )}\n        </div>\n\n        <Button\n          variant=\"outline\"\n          onClick={() => setCurrentPage(Math.min(totalPages - 1, currentPage + 1))}\n          disabled={currentPage === totalPages - 1}\n        >\n          Next\n          <ArrowRight className=\"h-4 w-4 ml-2\" />\n        </Button>\n      </div>\n    </div>\n  );\n}",
      "size": 24800
    },
    {
      "path": "client/src/components/ComplianceAuditFormClean.js",
      "content": "import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\nimport { Button } from './ui/button';\nimport { Badge } from './ui/badge';\nimport { Input } from './ui/input';\nimport { Textarea } from './ui/textarea';\nimport { ArrowLeft, ArrowRight, Check, X, AlertTriangle, Camera, Trash2, Save, Send } from 'lucide-react';\nimport { useToast } from '../hooks/use-toast';\nimport { uploadEvidenceImage } from '../utils/firebaseStorage';\n// Complete 93-item checklist template\nconst checklistTemplate = [\n    // Design Control (C1-C7)\n    { code: \"C1\", question: \"Are design and development procedures established?\", remark: \"\", evidence: [] },\n    { code: \"C2\", question: \"Are design input requirements identified and reviewed?\", remark: \"\", evidence: [] },\n    { code: \"C3\", question: \"Are design reviews conducted at key stages?\", remark: \"\", evidence: [] },\n    { code: \"C4\", question: \"Does design output include all necessary production info?\", remark: \"\", evidence: [] },\n    { code: \"C5\", question: \"Are design changes verified and controlled?\", remark: \"\", evidence: [] },\n    { code: \"C6\", question: \"Is prototype or pilot testing done before production?\", remark: \"\", evidence: [] },\n    { code: \"C7\", question: \"Are design personnel competent and qualified?\", remark: \"\", evidence: [] },\n    // Purchasing Control (C8-C12)\n    { code: \"C8\", question: \"Are suppliers evaluated and approved before ordering?\", remark: \"\", evidence: [] },\n    { code: \"C9\", question: \"Are materials purchased from approved sources?\", remark: \"\", evidence: [] },\n    { code: \"C10\", question: \"Are product specs and requirements agreed with suppliers?\", remark: \"\", evidence: [] },\n    { code: \"C11\", question: \"Is supplier performance monitored and recorded?\", remark: \"\", evidence: [] },\n    { code: \"C12\", question: \"Is supplier risk assessed to avoid material shortages?\", remark: \"\", evidence: [] },\n    // Storage Management (C13-C17)\n    { code: \"C13\", question: \"Is inventory recorded for incoming and outgoing goods?\", remark: \"\", evidence: [] },\n    { code: \"C14\", question: \"Is inventory stored in safe and suitable conditions?\", remark: \"\", evidence: [] },\n    { code: \"C15\", question: \"Are materials clearly identified and segregated?\", remark: \"\", evidence: [] },\n    { code: \"C16\", question: \"Is product condition checked regularly in storage?\", remark: \"\", evidence: [] },\n    { code: \"C17\", question: \"Is inventory managed using FIFO or similar systems?\", remark: \"\", evidence: [] },\n    // Incoming Inspection (C18-C25)\n    { code: \"C18\", question: \"Is there a separate area for uninspected materials?\", remark: \"\", evidence: [] },\n    { code: \"C19\", question: \"Are inspection criteria defined for incoming goods?\", remark: \"\", evidence: [] },\n    { code: \"C20\", question: \"Are inspections conducted and results recorded?\", remark: \"\", evidence: [] },\n    { code: \"C21\", question: \"Are unverified materials checked via alternate methods?\", remark: \"\", evidence: [] },\n    { code: \"C22\", question: \"Are customer-designated sources properly controlled?\", remark: \"\", evidence: [] },\n    { code: \"C23\", question: \"Is inspection status clearly marked on materials?\", remark: \"\", evidence: [] },\n    { code: \"C24\", question: \"Are rejected materials properly handled and recorded?\", remark: \"\", evidence: [] },\n    { code: \"C25\", question: \"Are inspection results analyzed for supplier evaluation?\", remark: \"\", evidence: [] },\n    // Production Control (C26-C45)\n    { code: \"C26\", question: \"Are manufacturing inputs reviewed and documented?\", remark: \"\", evidence: [] },\n    { code: \"C27\", question: \"Are outputs expressed in specs and drawings?\", remark: \"\", evidence: [] },\n    { code: \"C28\", question: \"Is there a control plan for production?\", remark: \"\", evidence: [] },\n    { code: \"C29\", question: \"Are QC staff and work instructions in place?\", remark: \"\", evidence: [] },\n    { code: \"C30\", question: \"Are materials defined via BOM or similar?\", remark: \"\", evidence: [] },\n    { code: \"C31\", question: \"Is production scheduled based on capacity and orders?\", remark: \"\", evidence: [] },\n    { code: \"C32\", question: \"Are products traceable and batch-controlled?\", remark: \"\", evidence: [] },\n    { code: \"C33\", question: \"Are rejected items isolated and rechecked?\", remark: \"\", evidence: [] },\n    { code: \"C34\", question: \"Are defects and trends analyzed?\", remark: \"\", evidence: [] },\n    { code: \"C35\", question: \"Are new tools evaluated before use?\", remark: \"\", evidence: [] },\n    { code: \"C36\", question: \"Are process parameters monitored and recorded?\", remark: \"\", evidence: [] },\n    { code: \"C37\", question: \"Can QC stop production for quality issues?\", remark: \"\", evidence: [] },\n    { code: \"C38\", question: \"Is equipment maintenance planned and recorded?\", remark: \"\", evidence: [] },\n    { code: \"C39\", question: \"Are handling and transport methods suitable?\", remark: \"\", evidence: [] },\n    { code: \"C40\", question: \"Are packing and packaging requirements defined?\", remark: \"\", evidence: [] },\n    { code: \"C41\", question: \"Is the production flow chart available and clear?\", remark: \"\", evidence: [] },\n    { code: \"C42\", question: \"Are outsourced processes identified?\", remark: \"\", evidence: [] },\n    { code: \"C43\", question: \"Does the factory have relevant production experience?\", remark: \"\", evidence: [] },\n    { code: \"C44\", question: \"Are workers skilled and observed during audit?\", remark: \"\", evidence: [] },\n    { code: \"C45\", question: \"Are machines and facilities adequate for production?\", remark: \"\", evidence: [] },\n    // Final Product Inspection & Testing (C46-C53)\n    { code: \"C46\", question: \"Are customer specs available for QC?\", remark: \"\", evidence: [] },\n    { code: \"C47\", question: \"Are final inspection criteria defined?\", remark: \"\", evidence: [] },\n    { code: \"C48\", question: \"Are final inspections conducted and recorded?\", remark: \"\", evidence: [] },\n    { code: \"C49\", question: \"Are appearance checks done with proper tools?\", remark: \"\", evidence: [] },\n    { code: \"C50\", question: \"Are safety and functionality checks performed?\", remark: \"\", evidence: [] },\n    { code: \"C51\", question: \"Are rejected lots isolated and handled properly?\", remark: \"\", evidence: [] },\n    { code: \"C52\", question: \"Are causes of rejects investigated and improved?\", remark: \"\", evidence: [] },\n    { code: \"C53\", question: \"Is ongoing reliability testing conducted?\", remark: \"\", evidence: [] },\n    // Measuring & Testing Equipment (C54-C58)\n    { code: \"C54\", question: \"Are measuring instruments calibrated and controlled?\", remark: \"\", evidence: [] },\n    { code: \"C55\", question: \"Is calibration status clearly marked on equipment?\", remark: \"\", evidence: [] },\n    { code: \"C56\", question: \"Are measurement standards traceable to national standards?\", remark: \"\", evidence: [] },\n    { code: \"C57\", question: \"Are out-of-calibration results investigated?\", remark: \"\", evidence: [] },\n    { code: \"C58\", question: \"Is equipment protected from environmental conditions?\", remark: \"\", evidence: [] },\n    // Resource Management (C59-C63)\n    { code: \"C59\", question: \"Are quality personnel competent and trained?\", remark: \"\", evidence: [] },\n    { code: \"C60\", question: \"Is training effectiveness evaluated and recorded?\", remark: \"\", evidence: [] },\n    { code: \"C61\", question: \"Are job descriptions and responsibilities defined?\", remark: \"\", evidence: [] },\n    { code: \"C62\", question: \"Is the work environment suitable for quality work?\", remark: \"\", evidence: [] },\n    { code: \"C63\", question: \"Are infrastructure requirements identified and provided?\", remark: \"\", evidence: [] },\n    // Continuous Improvement (C64-C73)\n    { code: \"C64\", question: \"Are customer satisfaction levels monitored?\", remark: \"\", evidence: [] },\n    { code: \"C65\", question: \"Are internal audits planned and conducted?\", remark: \"\", evidence: [] },\n    { code: \"C66\", question: \"Are audit findings addressed with corrective actions?\", remark: \"\", evidence: [] },\n    { code: \"C67\", question: \"Is management review conducted at planned intervals?\", remark: \"\", evidence: [] },\n    { code: \"C68\", question: \"Are quality objectives set and monitored?\", remark: \"\", evidence: [] },\n    { code: \"C69\", question: \"Is statistical data used for decision making?\", remark: \"\", evidence: [] },\n    { code: \"C70\", question: \"Are preventive actions implemented to avoid problems?\", remark: \"\", evidence: [] },\n    { code: \"C71\", question: \"Is there a system for handling customer complaints?\", remark: \"\", evidence: [] },\n    { code: \"C72\", question: \"Are quality costs analyzed and controlled?\", remark: \"\", evidence: [] },\n    { code: \"C73\", question: \"Is there evidence of continuous improvement activities?\", remark: \"\", evidence: [] },\n    // Social & Environmental Responsibility (C74-C83)\n    { code: \"C74\", question: \"Are environmental policies established and implemented?\", remark: \"\", evidence: [] },\n    { code: \"C75\", question: \"Is waste management controlled and monitored?\", remark: \"\", evidence: [] },\n    { code: \"C76\", question: \"Are energy consumption reduction measures in place?\", remark: \"\", evidence: [] },\n    { code: \"C77\", question: \"Are chemical usage and storage properly controlled?\", remark: \"\", evidence: [] },\n    { code: \"C78\", question: \"Is water usage monitored and controlled?\", remark: \"\", evidence: [] },\n    { code: \"C79\", question: \"Are social responsibility policies documented?\", remark: \"\", evidence: [] },\n    { code: \"C80\", question: \"Are worker rights and conditions monitored?\", remark: \"\", evidence: [] },\n    { code: \"C81\", question: \"Is child labor prevention actively enforced?\", remark: \"\", evidence: [] },\n    { code: \"C82\", question: \"Are community relations maintained positively?\", remark: \"\", evidence: [] },\n    { code: \"C83\", question: \"Is supplier social compliance monitored?\", remark: \"\", evidence: [] },\n    // Health & Safety (C84-C93)\n    { code: \"C84\", question: \"Are health and safety policies established?\", remark: \"\", evidence: [] },\n    { code: \"C85\", question: \"Is safety training provided to all workers?\", remark: \"\", evidence: [] },\n    { code: \"C86\", question: \"Are personal protective equipment provided and used?\", remark: \"\", evidence: [] },\n    { code: \"C87\", question: \"Are workplace hazards identified and controlled?\", remark: \"\", evidence: [] },\n    { code: \"C88\", question: \"Is emergency response planning in place?\", remark: \"\", evidence: [] },\n    { code: \"C89\", question: \"Are accident/incident reports maintained?\", remark: \"\", evidence: [] },\n    { code: \"C90\", question: \"Is first aid equipment and training available?\", remark: \"\", evidence: [] },\n    { code: \"C91\", question: \"Are fire safety measures adequate and tested?\", remark: \"\", evidence: [] },\n    { code: \"C92\", question: \"Is workplace ergonomics considered and addressed?\", remark: \"\", evidence: [] },\n    { code: \"C93\", question: \"Are health monitoring programs in place?\", remark: \"\", evidence: [] }\n];\nexport default function ComplianceAuditFormClean({ company, onBack, existingAudit }) {\n    const { toast } = useToast();\n    // Clean state - single checklist array\n    const [auditData, setAuditData] = useState({\n        auditDate: new Date().toISOString().split('T')[0],\n        company,\n        auditorName: '',\n        location: '',\n        auditScope: '',\n        checklist: checklistTemplate,\n        status: 'draft'\n    });\n    const [currentPage, setCurrentPage] = useState(0);\n    const [isUploading, setIsUploading] = useState(false);\n    const [isSaving, setIsSaving] = useState(false);\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    const itemsPerPage = 10;\n    const totalPages = Math.ceil(auditData.checklist.length / itemsPerPage);\n    const currentItems = auditData.checklist.slice(currentPage * itemsPerPage, (currentPage + 1) * itemsPerPage);\n    // Load existing audit data\n    useEffect(() => {\n        if (existingAudit?.checklist) {\n            setAuditData(prev => ({\n                ...prev,\n                ...existingAudit,\n                checklist: existingAudit.checklist\n            }));\n        }\n    }, [existingAudit]);\n    // Update checklist item\n    const updateChecklistItem = (code, field, value) => {\n        setAuditData(prev => ({\n            ...prev,\n            checklist: prev.checklist.map(item => item.code === code\n                ? { ...item, [field]: value }\n                : item),\n            updatedAt: new Date().toISOString()\n        }));\n    };\n    // Handle image upload\n    const handleImageUpload = async (code, file) => {\n        if (!auditData.id) {\n            toast({\n                title: \"Save Required\",\n                description: \"Please save the audit as draft before uploading images.\",\n                variant: \"destructive\"\n            });\n            return;\n        }\n        setIsUploading(true);\n        try {\n            console.log(`🧹 CLEAN: Uploading image for ${code}`);\n            const imageUrl = await uploadEvidenceImage(file, auditData.id, code);\n            // Add image URL to checklist item's evidence array\n            updateChecklistItem(code, 'evidence', [\n                ...(auditData.checklist.find(item => item.code === code)?.evidence || []),\n                imageUrl\n            ]);\n            // Auto-save after image upload\n            await saveAudit();\n            toast({\n                title: \"Image Uploaded\",\n                description: \"Evidence image uploaded successfully\"\n            });\n        }\n        catch (error) {\n            console.error('Image upload failed:', error);\n            toast({\n                title: \"Upload Failed\",\n                description: \"Failed to upload image. Please try again.\",\n                variant: \"destructive\"\n            });\n        }\n        finally {\n            setIsUploading(false);\n        }\n    };\n    // Remove image from checklist item\n    const removeImage = (code, imageIndex) => {\n        const item = auditData.checklist.find(item => item.code === code);\n        if (item?.evidence) {\n            const updatedEvidence = item.evidence.filter((_, index) => index !== imageIndex);\n            updateChecklistItem(code, 'evidence', updatedEvidence);\n        }\n    };\n    // Save audit (draft or update)\n    const saveAudit = async () => {\n        setIsSaving(true);\n        try {\n            const method = auditData.id ? 'PUT' : 'POST';\n            const url = auditData.id\n                ? `/api/audits/compliance/${auditData.id}`\n                : '/api/audits/compliance';\n            console.log('🧹 CLEAN: Saving audit with checklist items:', auditData.checklist.length);\n            const response = await fetch(url, {\n                method,\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify(auditData)\n            });\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            const result = await response.json();\n            if (result.success) {\n                if (!auditData.id) {\n                    setAuditData(prev => ({ ...prev, id: result.id }));\n                }\n                toast({\n                    title: \"Draft Saved\",\n                    description: \"Audit saved successfully\"\n                });\n            }\n            else {\n                throw new Error(result.error || 'Save failed');\n            }\n        }\n        catch (error) {\n            console.error('Save failed:', error);\n            toast({\n                title: \"Save Failed\",\n                description: \"Failed to save audit. Please try again.\",\n                variant: \"destructive\"\n            });\n        }\n        finally {\n            setIsSaving(false);\n        }\n    };\n    // Submit audit\n    const submitAudit = async () => {\n        setIsSubmitting(true);\n        try {\n            const submitData = {\n                ...auditData,\n                status: 'submitted',\n                submittedAt: new Date().toISOString()\n            };\n            const method = auditData.id ? 'PUT' : 'POST';\n            const url = auditData.id\n                ? `/api/audits/compliance/${auditData.id}`\n                : '/api/audits/compliance';\n            const response = await fetch(url, {\n                method,\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify(submitData)\n            });\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            const result = await response.json();\n            if (result.success) {\n                toast({\n                    title: \"Audit Submitted\",\n                    description: \"Compliance audit submitted successfully\"\n                });\n                onBack();\n            }\n            else {\n                throw new Error(result.error || 'Submit failed');\n            }\n        }\n        catch (error) {\n            console.error('Submit failed:', error);\n            toast({\n                title: \"Submit Failed\",\n                description: \"Failed to submit audit. Please try again.\",\n                variant: \"destructive\"\n            });\n        }\n        finally {\n            setIsSubmitting(false);\n        }\n    };\n    return (_jsxs(\"div\", { className: \"max-w-4xl mx-auto p-6 space-y-6\", children: [_jsxs(\"div\", { className: \"flex items-center justify-between\", children: [_jsxs(\"div\", { className: \"flex items-center space-x-4\", children: [_jsxs(Button, { variant: \"outline\", onClick: onBack, children: [_jsx(ArrowLeft, { className: \"h-4 w-4 mr-2\" }), \"Back to Dashboard\"] }), _jsx(Badge, { variant: \"outline\", children: company })] }), _jsxs(\"div\", { className: \"flex items-center space-x-2\", children: [_jsxs(Badge, { variant: \"secondary\", children: [\"Page \", currentPage + 1, \" of \", totalPages] }), _jsxs(Badge, { variant: \"outline\", children: [auditData.checklist.filter(item => item.response).length, \" / \", auditData.checklist.length, \" Completed\"] })] })] }), _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, { children: \"Audit Information\" }) }), _jsxs(CardContent, { className: \"grid grid-cols-1 md:grid-cols-2 gap-4\", children: [_jsxs(\"div\", { children: [_jsx(\"label\", { className: \"block text-sm font-medium mb-2\", children: \"Auditor Name\" }), _jsx(Input, { value: auditData.auditorName, onChange: (e) => setAuditData(prev => ({ ...prev, auditorName: e.target.value })), placeholder: \"Enter auditor name\" })] }), _jsxs(\"div\", { children: [_jsx(\"label\", { className: \"block text-sm font-medium mb-2\", children: \"Audit Date\" }), _jsx(Input, { type: \"date\", value: auditData.auditDate, onChange: (e) => setAuditData(prev => ({ ...prev, auditDate: e.target.value })) })] }), _jsxs(\"div\", { children: [_jsx(\"label\", { className: \"block text-sm font-medium mb-2\", children: \"Location\" }), _jsx(Input, { value: auditData.location, onChange: (e) => setAuditData(prev => ({ ...prev, location: e.target.value })), placeholder: \"Enter audit location\" })] }), _jsxs(\"div\", { children: [_jsx(\"label\", { className: \"block text-sm font-medium mb-2\", children: \"Audit Scope\" }), _jsx(Input, { value: auditData.auditScope, onChange: (e) => setAuditData(prev => ({ ...prev, auditScope: e.target.value })), placeholder: \"Enter audit scope\" })] })] })] }), _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, { children: \"Compliance Checklist\" }) }), _jsx(CardContent, { className: \"space-y-6\", children: currentItems.map((item) => (_jsxs(\"div\", { className: \"border rounded-lg p-4 space-y-4\", children: [_jsx(\"div\", { className: \"flex items-start justify-between\", children: _jsxs(\"div\", { className: \"flex-1\", children: [_jsx(\"div\", { className: \"flex items-center space-x-2 mb-2\", children: _jsx(Badge, { variant: \"outline\", children: item.code }) }), _jsx(\"p\", { className: \"text-sm text-gray-700 mb-3\", children: item.question })] }) }), _jsx(\"div\", { className: \"flex space-x-2\", children: ['Yes', 'No', 'NA'].map((response) => (_jsxs(Button, { variant: item.response === response ? 'default' : 'outline', size: \"sm\", onClick: () => updateChecklistItem(item.code, 'response', response), className: item.response === response\n                                            ? response === 'Yes'\n                                                ? 'bg-green-600 hover:bg-green-700'\n                                                : response === 'No'\n                                                    ? 'bg-red-600 hover:bg-red-700'\n                                                    : 'bg-gray-600 hover:bg-gray-700'\n                                            : '', children: [response === 'Yes' && _jsx(Check, { className: \"h-4 w-4 mr-1\" }), response === 'No' && _jsx(X, { className: \"h-4 w-4 mr-1\" }), response === 'NA' && _jsx(AlertTriangle, { className: \"h-4 w-4 mr-1\" }), response] }, response))) }), _jsx(Textarea, { placeholder: \"Add remarks (optional)\", value: item.remark, onChange: (e) => updateChecklistItem(item.code, 'remark', e.target.value), className: \"min-h-[60px]\" }), _jsxs(\"div\", { className: \"space-y-2\", children: [_jsxs(\"div\", { className: \"flex items-center justify-between\", children: [_jsx(\"label\", { className: \"text-sm font-medium\", children: \"Evidence Images\" }), _jsxs(\"div\", { className: \"flex items-center space-x-2\", children: [_jsx(\"input\", { type: \"file\", accept: \"image/*\", onChange: (e) => {\n                                                                const file = e.target.files?.[0];\n                                                                if (file)\n                                                                    handleImageUpload(item.code, file);\n                                                            }, className: \"hidden\", id: `image-upload-${item.code}` }), _jsxs(Button, { variant: \"outline\", size: \"sm\", onClick: () => document.getElementById(`image-upload-${item.code}`)?.click(), disabled: isUploading || (item.evidence?.length || 0) >= 5, children: [_jsx(Camera, { className: \"h-4 w-4 mr-1\" }), \"Add Image\"] })] })] }), item.evidence && item.evidence.length > 0 && (_jsx(\"div\", { className: \"grid grid-cols-3 gap-2\", children: item.evidence.map((imageUrl, index) => (_jsxs(\"div\", { className: \"relative group\", children: [_jsx(\"img\", { src: imageUrl, alt: `Evidence ${index + 1}`, className: \"w-full h-20 object-cover rounded border\" }), _jsx(Button, { variant: \"destructive\", size: \"sm\", className: \"absolute top-1 right-1 h-6 w-6 p-0 opacity-0 group-hover:opacity-100 transition-opacity\", onClick: () => removeImage(item.code, index), children: _jsx(Trash2, { className: \"h-3 w-3\" }) })] }, index))) }))] })] }, item.code))) })] }), _jsxs(\"div\", { className: \"flex items-center justify-between\", children: [_jsxs(Button, { variant: \"outline\", onClick: () => setCurrentPage(Math.max(0, currentPage - 1)), disabled: currentPage === 0, children: [_jsx(ArrowLeft, { className: \"h-4 w-4 mr-2\" }), \"Previous\"] }), _jsxs(\"div\", { className: \"flex space-x-2\", children: [_jsxs(Button, { variant: \"outline\", onClick: saveAudit, disabled: isSaving, children: [_jsx(Save, { className: \"h-4 w-4 mr-2\" }), isSaving ? 'Saving...' : 'Save Draft'] }), currentPage === totalPages - 1 && (_jsxs(Button, { onClick: submitAudit, disabled: isSubmitting, className: \"bg-green-600 hover:bg-green-700\", children: [_jsx(Send, { className: \"h-4 w-4 mr-2\" }), isSubmitting ? 'Submitting...' : 'Submit Audit'] }))] }), _jsxs(Button, { variant: \"outline\", onClick: () => setCurrentPage(Math.min(totalPages - 1, currentPage + 1)), disabled: currentPage === totalPages - 1, children: [\"Next\", _jsx(ArrowRight, { className: \"h-4 w-4 ml-2\" })] })] })] }));\n}\n",
      "size": 23876
    },
    {
      "path": "client/src/components/ComplianceAudit.tsx",
      "content": "import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\nimport { Button } from './ui/button';\nimport { Input } from './ui/input';\nimport { Label } from './ui/label';\nimport { Textarea } from './ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';\nimport { useToast } from '../hooks/use-toast';\nimport { Camera, Upload, FileText, Download } from 'lucide-react';\nimport jsPDF from 'jspdf';\n// Logo will be loaded dynamically in PDF generation\n\ninterface AuditPoint {\n  id: string;\n  question: string;\n  response: 'Yes' | 'No' | 'NA' | '';\n  remark: string;\n  evidence: string | null;\n}\n\ninterface AuditPart {\n  id: string;\n  title: string;\n  points: AuditPoint[];\n}\n\nconst ComplianceAudit: React.FC = () => {\n  const { toast } = useToast();\n  \n  const [auditData, setAuditData] = useState<{\n    auditDate: string;\n    auditorName: string;\n    company: 'EHI' | 'EMPL';\n    parts: AuditPart[];\n  }>({\n    auditDate: new Date().toISOString().split('T')[0],\n    auditorName: '',\n    company: 'EHI',\n    parts: [\n      {\n        id: 'part1',\n        title: 'Design Control (C1–C7)',\n        points: [\n          { id: 'C1', question: 'Are design and development procedures established?', response: '', remark: '', evidence: null },\n          { id: 'C2', question: 'Are design input requirements identified and reviewed?', response: '', remark: '', evidence: null },\n          { id: 'C3', question: 'Are design reviews conducted at key stages?', response: '', remark: '', evidence: null },\n          { id: 'C4', question: 'Does design output include all necessary production info?', response: '', remark: '', evidence: null },\n          { id: 'C5', question: 'Are design changes verified and controlled?', response: '', remark: '', evidence: null },\n          { id: 'C6', question: 'Is prototype or pilot testing done before production?', response: '', remark: '', evidence: null },\n          { id: 'C7', question: 'Are design personnel competent and qualified?', response: '', remark: '', evidence: null }\n        ]\n      },\n      {\n        id: 'part2',\n        title: 'Purchasing Control (C8–C12)',\n        points: [\n          { id: 'C8', question: 'Are suppliers evaluated and approved before ordering?', response: '', remark: '', evidence: null },\n          { id: 'C9', question: 'Are materials purchased from approved sources?', response: '', remark: '', evidence: null },\n          { id: 'C10', question: 'Are product specs and requirements agreed with suppliers?', response: '', remark: '', evidence: null },\n          { id: 'C11', question: 'Is supplier performance monitored and recorded?', response: '', remark: '', evidence: null },\n          { id: 'C12', question: 'Is supplier risk assessed to avoid material shortages?', response: '', remark: '', evidence: null }\n        ]\n      },\n      {\n        id: 'part3',\n        title: 'Storage Management (C13–C17)',\n        points: [\n          { id: 'C13', question: 'Is inventory recorded for incoming and outgoing goods?', response: '', remark: '', evidence: null },\n          { id: 'C14', question: 'Is inventory stored in safe and suitable conditions?', response: '', remark: '', evidence: null },\n          { id: 'C15', question: 'Are materials clearly identified and segregated?', response: '', remark: '', evidence: null },\n          { id: 'C16', question: 'Is product condition checked regularly in storage?', response: '', remark: '', evidence: null },\n          { id: 'C17', question: 'Is inventory managed using FIFO or similar systems?', response: '', remark: '', evidence: null }\n        ]\n      },\n      {\n        id: 'part4',\n        title: 'Incoming Inspection (C18–C25)',\n        points: [\n          { id: 'C18', question: 'Is there a separate area for uninspected materials?', response: '', remark: '', evidence: null },\n          { id: 'C19', question: 'Are inspection criteria defined for incoming goods?', response: '', remark: '', evidence: null },\n          { id: 'C20', question: 'Are inspections conducted and results recorded?', response: '', remark: '', evidence: null },\n          { id: 'C21', question: 'Are unverified materials checked via alternate methods?', response: '', remark: '', evidence: null },\n          { id: 'C22', question: 'Are customer-designated sources properly controlled?', response: '', remark: '', evidence: null },\n          { id: 'C23', question: 'Is inspection status clearly marked on materials?', response: '', remark: '', evidence: null },\n          { id: 'C24', question: 'Are rejected materials properly handled and recorded?', response: '', remark: '', evidence: null },\n          { id: 'C25', question: 'Are inspection results analyzed for supplier evaluation?', response: '', remark: '', evidence: null }\n        ]\n      },\n      {\n        id: 'part5',\n        title: 'Production Control (C26–C45)',\n        points: [\n          { id: 'C26', question: 'Are manufacturing inputs reviewed and documented?', response: '', remark: '', evidence: null },\n          { id: 'C27', question: 'Are outputs expressed in specs and drawings?', response: '', remark: '', evidence: null },\n          { id: 'C28', question: 'Is there a control plan for production?', response: '', remark: '', evidence: null },\n          { id: 'C29', question: 'Are QC staff and work instructions in place?', response: '', remark: '', evidence: null },\n          { id: 'C30', question: 'Are materials defined via BOM or similar?', response: '', remark: '', evidence: null },\n          { id: 'C31', question: 'Is production scheduled based on capacity and orders?', response: '', remark: '', evidence: null },\n          { id: 'C32', question: 'Are products traceable and batch-controlled?', response: '', remark: '', evidence: null },\n          { id: 'C33', question: 'Are rejected items isolated and rechecked?', response: '', remark: '', evidence: null },\n          { id: 'C34', question: 'Are defects and trends analyzed?', response: '', remark: '', evidence: null },\n          { id: 'C35', question: 'Are new tools evaluated before use?', response: '', remark: '', evidence: null },\n          { id: 'C36', question: 'Are process parameters monitored and recorded?', response: '', remark: '', evidence: null },\n          { id: 'C37', question: 'Can QC stop production for quality issues?', response: '', remark: '', evidence: null },\n          { id: 'C38', question: 'Is equipment maintenance planned and recorded?', response: '', remark: '', evidence: null },\n          { id: 'C39', question: 'Are handling and transport methods suitable?', response: '', remark: '', evidence: null },\n          { id: 'C40', question: 'Are packing and packaging requirements defined?', response: '', remark: '', evidence: null },\n          { id: 'C41', question: 'Is the production flow chart available and clear?', response: '', remark: '', evidence: null },\n          { id: 'C42', question: 'Are outsourced processes identified?', response: '', remark: '', evidence: null },\n          { id: 'C43', question: 'Does the factory have relevant production experience?', response: '', remark: '', evidence: null },\n          { id: 'C44', question: 'Are workers skilled and observed during audit?', response: '', remark: '', evidence: null },\n          { id: 'C45', question: 'Are machines and facilities adequate for production?', response: '', remark: '', evidence: null }\n        ]\n      },\n      {\n        id: 'part6',\n        title: 'Final Product Inspection & Testing (C46–C53)',\n        points: [\n          { id: 'C46', question: 'Are customer specs available for QC?', response: '', remark: '', evidence: null },\n          { id: 'C47', question: 'Are final inspection criteria defined?', response: '', remark: '', evidence: null },\n          { id: 'C48', question: 'Are final inspections conducted and recorded?', response: '', remark: '', evidence: null },\n          { id: 'C49', question: 'Are appearance checks done with proper tools?', response: '', remark: '', evidence: null },\n          { id: 'C50', question: 'Are safety and functionality checks performed?', response: '', remark: '', evidence: null },\n          { id: 'C51', question: 'Are rejected lots isolated and handled properly?', response: '', remark: '', evidence: null },\n          { id: 'C52', question: 'Are causes of rejects investigated and improved?', response: '', remark: '', evidence: null },\n          { id: 'C53', question: 'Is ongoing reliability testing conducted?', response: '', remark: '', evidence: null }\n        ]\n      },\n      {\n        id: 'part7',\n        title: 'Measuring & Testing Equipment (C54–C58)',\n        points: [\n          { id: 'C54', question: 'Is life/reliability testing equipment available?', response: '', remark: '', evidence: null },\n          { id: 'C55', question: 'Are gauges and tools maintained and protected?', response: '', remark: '', evidence: null },\n          { id: 'C56', question: 'Is equipment calibrated regularly?', response: '', remark: '', evidence: null },\n          { id: 'C57', question: 'Are display devices checked frequently?', response: '', remark: '', evidence: null },\n          { id: 'C58', question: 'Is equipment condition verified with fault simulation?', response: '', remark: '', evidence: null }\n        ]\n      },\n      {\n        id: 'part8',\n        title: 'Resource Management (C59–C63)',\n        points: [\n          { id: 'C59', question: 'Is infrastructure adequate and layout optimized?', response: '', remark: '', evidence: null },\n          { id: 'C60', question: 'Is the factory clean and well-maintained?', response: '', remark: '', evidence: null },\n          { id: 'C61', question: 'Are training needs identified and addressed?', response: '', remark: '', evidence: null },\n          { id: 'C62', question: 'Are employees motivated for quality and innovation?', response: '', remark: '', evidence: null },\n          { id: 'C63', question: 'Are contingency plans in place', response: '', remark: '', evidence: null }\n        ]\n      },\n      {\n        id: 'part9',\n        title: 'Social & Environmental Responsibility (C74–C83)',\n        points: [\n          { id: 'C74', question: 'Are working conditions (air, light, cleanliness) acceptable?', response: '', remark: '', evidence: null },\n          { id: 'C75', question: 'Are all workers above the legal working age?', response: '', remark: '', evidence: null },\n          { id: 'C76', question: 'Do working hours comply with labor laws?', response: '', remark: '', evidence: null },\n          { id: 'C77', question: 'Do workers get at least one day off per week?', response: '', remark: '', evidence: null },\n          { id: 'C78', question: 'Are workers employed voluntarily?', response: '', remark: '', evidence: null },\n          { id: 'C79', question: 'Are wages equal to or above legal minimum?', response: '', remark: '', evidence: null },\n          { id: 'C80', question: 'Do women have equal rights and protections?', response: '', remark: '', evidence: null },\n          { id: 'C81', question: 'Are workers treated respectfully without abuse?', response: '', remark: '', evidence: null },\n          { id: 'C82', question: 'Is the fire protection system adequate and functional?', response: '', remark: '', evidence: null },\n          { id: 'C83', question: 'Are fire and evacuation drills conducted regularly?', response: '', remark: '', evidence: null }\n        ]\n      },\n      {\n        id: 'part10',\n        title: 'Health & Safety (C84–C93)',\n        points: [\n          { id: 'C84', question: 'Are buildings in good physical condition?', response: '', remark: '', evidence: null },\n          { id: 'C85', question: 'Are machine guards installed for safety?', response: '', remark: '', evidence: null },\n          { id: 'C86', question: 'Are special equipment registered and inspected?', response: '', remark: '', evidence: null },\n          { id: 'C87', question: 'Are safety instructions about clothing/jewelry followed?', response: '', remark: '', evidence: null },\n          { id: 'C88', question: 'Is PPE provided and in good condition?', response: '', remark: '', evidence: null },\n          { id: 'C89', question: 'Are PPE signs posted in required areas?', response: '', remark: '', evidence: null },\n          { id: 'C90', question: 'Do workers follow safety instructions and use PPE?', response: '', remark: '', evidence: null },\n          { id: 'C91', question: 'Is dormitory separate from production areas?', response: '', remark: '', evidence: null },\n          { id: 'C92', question: 'Is a valid restaurant license available if required?', response: '', remark: '', evidence: null },\n          { id: 'C93', question: 'Is medical service (e.g., first aid) available for workers?', response: '', remark: '', evidence: null }\n        ]\n      }\n    ]\n  });\n\n  const updatePointResponse = (partId: string, pointId: string, field: 'response' | 'remark', value: string) => {\n    setAuditData(prev => ({\n      ...prev,\n      parts: prev.parts.map(part =>\n        part.id === partId\n          ? {\n              ...part,\n              points: part.points.map(point =>\n                point.id === pointId ? { ...point, [field]: value } : point\n              )\n            }\n          : part\n      )\n    }));\n  };\n\n  const handleEvidenceUpload = (partId: string, pointId: string, file: File) => {\n    const reader = new FileReader();\n    reader.onload = () => {\n      const base64String = reader.result as string;\n      setAuditData(prev => ({\n        ...prev,\n        parts: prev.parts.map(part =>\n          part.id === partId\n            ? {\n                ...part,\n                points: part.points.map(point =>\n                  point.id === pointId ? { ...point, evidence: base64String } : point\n                )\n              }\n            : part\n        )\n      }));\n      \n      toast({\n        title: \"Evidence Uploaded\",\n        description: `Evidence uploaded for ${pointId}`,\n      });\n    };\n    reader.readAsDataURL(file);\n  };\n\n  const calculateComplianceScore = () => {\n    const allPoints = auditData.parts.flatMap(part => part.points);\n    const answeredPoints = allPoints.filter(point => point.response !== '');\n    const yesResponses = allPoints.filter(point => point.response === 'Yes');\n    \n    if (answeredPoints.length === 0) return 0;\n    return Math.round((yesResponses.length / answeredPoints.length) * 100);\n  };\n\n  const generateCompliancePDF = async () => {\n    const doc = new jsPDF('p', 'mm', 'a4');\n    const pageWidth = doc.internal.pageSize.getWidth();\n    let yPos = 40;\n\n    // Add Eastern logo at top left\n    try {\n      const logoImg = new Image();\n      logoImg.src = '/eastern-logo-main.png';\n      await new Promise((resolve, reject) => {\n        logoImg.onload = resolve;\n        logoImg.onerror = reject;\n      });\n      \n      // Add logo to PDF (positioned at top-left)\n      doc.addImage(logoImg, 'PNG', 10, 10, 40, 15);\n    } catch (error) {\n      console.warn('Could not load logo for PDF, using text fallback:', error);\n      // Fallback to text if image fails\n      doc.setFontSize(14);\n      doc.setFont('times', 'bold');\n      doc.text('EASTERN MILLS', 10, 20);\n    }\n\n    // Company name\n    const companyFullName = auditData.company === 'EHI' ? 'Eastern Home Industries' : 'Eastern Mills Pvt. Ltd.';\n    doc.setFontSize(16);\n    doc.setFont('times', 'bold');\n    doc.text(companyFullName, pageWidth / 2, yPos, { align: 'center' });\n    yPos += 8;\n\n    // Report title\n    doc.setFontSize(14);\n    doc.setFont('times', 'bold');\n    doc.text('Internal Technical Audit Report', pageWidth / 2, yPos, { align: 'center' });\n    yPos += 6;\n\n    // ISO standard\n    doc.setFontSize(12);\n    doc.setFont('times', 'normal');\n    doc.text('As per clause ISO9001:2015', pageWidth / 2, yPos, { align: 'center' });\n    yPos += 15;\n\n    // Audit information\n    doc.setFontSize(10);\n    doc.setFont('times', 'normal');\n    doc.text(`Audit Date: ${auditData.auditDate}`, 20, yPos);\n    doc.text(`Auditor: ${auditData.auditorName}`, 120, yPos);\n    yPos += 6;\n    \n    const complianceScore = calculateComplianceScore();\n    doc.text(`Compliance Score: ${complianceScore}%`, 20, yPos);\n    yPos += 15;\n\n    // Add audit results by part\n    auditData.parts.forEach(part => {\n      // Check if we need a new page\n      if (yPos > 250) {\n        doc.addPage();\n        yPos = 20;\n      }\n\n      // Part header\n      doc.setFontSize(11);\n      doc.setFont('times', 'bold');\n      doc.text(`${part.title}`, 20, yPos);\n      yPos += 8;\n\n      part.points.forEach(point => {\n        if (yPos > 270) {\n          doc.addPage();\n          yPos = 20;\n        }\n\n        doc.setFontSize(9);\n        doc.setFont('times', 'normal');\n        \n        // Question\n        const questionLines = doc.splitTextToSize(`${point.id}: ${point.question}`, 120);\n        doc.text(questionLines, 25, yPos);\n        \n        // Response\n        const responseColor = point.response === 'Yes' ? [0, 128, 0] : point.response === 'No' ? [255, 0, 0] : [128, 128, 128];\n        doc.setTextColor(...responseColor);\n        doc.text(`${point.response || 'Not Answered'}`, 150, yPos);\n        doc.setTextColor(0, 0, 0);\n        \n        yPos += questionLines.length * 4;\n        \n        // Remark if provided\n        if (point.remark) {\n          doc.setFontSize(8);\n          doc.setFont('times', 'italic');\n          const remarkLines = doc.splitTextToSize(`Remark: ${point.remark}`, 160);\n          doc.text(remarkLines, 30, yPos);\n          yPos += remarkLines.length * 3;\n        }\n        \n        // Add evidence image if available\n        if (point.evidence && point.evidence.startsWith('data:image/')) {\n          try {\n            // Check if we need a new page for the image\n            if (yPos > 220) {\n              doc.addPage();\n              yPos = 20;\n            }\n            \n            doc.setFontSize(8);\n            doc.setFont('times', 'normal');\n            doc.text('Evidence:', 30, yPos);\n            yPos += 5;\n            \n            // Add evidence image with good quality\n            const imgWidth = 60; // Good size for readability\n            const imgHeight = 45; // Maintain aspect ratio\n            \n            doc.addImage(point.evidence, 'JPEG', 30, yPos, imgWidth, imgHeight);\n            yPos += imgHeight + 5;\n          } catch (imgError) {\n            console.warn('Failed to add evidence image:', imgError);\n            doc.setFontSize(8);\n            doc.text('Evidence: [Image could not be displayed]', 30, yPos);\n            yPos += 4;\n          }\n        }\n        \n        yPos += 2;\n      });\n      \n      yPos += 5;\n    });\n\n    // Footer\n    const footerY = doc.internal.pageSize.getHeight() - 20;\n    doc.setFontSize(8);\n    doc.text(`Generated on: ${new Date().toLocaleDateString()}`, pageWidth / 2, footerY, { align: 'center' });\n\n    return doc;\n  };\n\n  const handleGenerateReport = async () => {\n    if (!auditData.auditorName.trim()) {\n      toast({\n        title: \"Missing Information\", \n        description: \"Please enter auditor name before generating report\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      const pdf = await generateCompliancePDF();\n      const filename = `ISO9001_Audit_${auditData.company}_${auditData.auditDate.replace(/-/g, '')}.pdf`;\n      pdf.save(filename);\n      \n      toast({\n        title: \"Audit Report Generated\",\n        description: \"ISO 9001:2015 compliance audit report with evidence images has been generated successfully\",\n      });\n    } catch (error) {\n      console.error('Error generating PDF:', error);\n      toast({\n        title: \"PDF Generation Error\",\n        description: \"Failed to generate audit report. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <FileText className=\"h-5 w-5\" />\n            ISO 9001:2015 Compliance Audit\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n            <div>\n              <Label htmlFor=\"auditDate\">Audit Date</Label>\n              <Input\n                id=\"auditDate\"\n                type=\"date\"\n                value={auditData.auditDate}\n                onChange={(e) => setAuditData(prev => ({ ...prev, auditDate: e.target.value }))}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"auditorName\">Auditor Name</Label>\n              <Input\n                id=\"auditorName\"\n                value={auditData.auditorName}\n                onChange={(e) => setAuditData(prev => ({ ...prev, auditorName: e.target.value }))}\n                placeholder=\"Enter auditor name\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"company\">Company</Label>\n              <Select\n                value={auditData.company}\n                onValueChange={(value: 'EHI' | 'EMPL') => setAuditData(prev => ({ ...prev, company: value }))}\n              >\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"EHI\">Eastern Home Industries (EHI)</SelectItem>\n                  <SelectItem value=\"EMPL\">Eastern Mills Pvt. Ltd. (EMPL)</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <div className=\"text-sm text-gray-600\">\n              Compliance Score: <span className=\"font-bold text-lg\">{calculateComplianceScore()}%</span>\n            </div>\n            <Button onClick={handleGenerateReport} className=\"flex items-center gap-2\">\n              <Download className=\"h-4 w-4\" />\n              Generate Audit Report\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Audit Checklist */}\n      <Tabs defaultValue=\"part1\" className=\"space-y-4\">\n        <TabsList className=\"grid grid-cols-5 lg:grid-cols-10 gap-1 h-auto p-1\">\n          {auditData.parts.map((part, index) => (\n            <TabsTrigger\n              key={part.id}\n              value={part.id}\n              className=\"text-xs px-2 py-1 min-h-[32px]\"\n            >\n              Part {index + 1}\n            </TabsTrigger>\n          ))}\n        </TabsList>\n\n        {auditData.parts.map((part) => (\n          <TabsContent key={part.id} value={part.id}>\n            <Card>\n              <CardHeader>\n                <CardTitle>{part.title}</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-6\">\n                  {part.points.map((point) => (\n                    <div key={point.id} className=\"border rounded-lg p-4 space-y-3\">\n                      <div className=\"flex items-start gap-4\">\n                        <div className=\"flex-1\">\n                          <Label className=\"text-sm font-medium\">{point.id}</Label>\n                          <p className=\"text-sm text-gray-700 mt-1\">{point.question}</p>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <div className=\"flex gap-1\">\n                            <Button\n                              type=\"button\"\n                              variant={point.response === 'Yes' ? 'default' : 'outline'}\n                              size=\"sm\"\n                              className={`px-3 h-7 text-xs ${point.response === 'Yes' ? 'bg-green-600 hover:bg-green-700' : 'hover:bg-green-50'}`}\n                              onClick={() => updatePointResponse(part.id, point.id, 'response', 'Yes')}\n                            >\n                              Yes\n                            </Button>\n                            <Button\n                              type=\"button\"\n                              variant={point.response === 'No' ? 'default' : 'outline'}\n                              size=\"sm\"\n                              className={`px-3 h-7 text-xs ${point.response === 'No' ? 'bg-red-600 hover:bg-red-700' : 'hover:bg-red-50'}`}\n                              onClick={() => updatePointResponse(part.id, point.id, 'response', 'No')}\n                            >\n                              No\n                            </Button>\n                            <Button\n                              type=\"button\"\n                              variant={point.response === 'NA' ? 'default' : 'outline'}\n                              size=\"sm\"\n                              className={`px-3 h-7 text-xs ${point.response === 'NA' ? 'bg-gray-600 hover:bg-gray-700' : 'hover:bg-gray-50'}`}\n                              onClick={() => updatePointResponse(part.id, point.id, 'response', 'NA')}\n                            >\n                              N/A\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <div>\n                          <Label htmlFor={`remark-${point.id}`} className=\"text-sm\">Remark</Label>\n                          <Textarea\n                            id={`remark-${point.id}`}\n                            value={point.remark}\n                            onChange={(e) => updatePointResponse(part.id, point.id, 'remark', e.target.value)}\n                            placeholder=\"Add remarks...\"\n                            className=\"h-20\"\n                          />\n                        </div>\n                        <div>\n                          <Label className=\"text-sm\">Evidence</Label>\n                          <div className=\"flex items-center gap-2 mt-1\">\n                            <Input\n                              type=\"file\"\n                              accept=\"image/*,.pdf,.doc,.docx\"\n                              onChange={(e) => {\n                                const file = e.target.files?.[0];\n                                if (file) {\n                                  handleEvidenceUpload(part.id, point.id, file);\n                                }\n                              }}\n                              className=\"hidden\"\n                              id={`evidence-${point.id}`}\n                            />\n                            <Button\n                              type=\"button\"\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => document.getElementById(`evidence-${point.id}`)?.click()}\n                              className=\"flex items-center gap-1\"\n                            >\n                              <Upload className=\"h-3 w-3\" />\n                              Upload\n                            </Button>\n                            {point.evidence && (\n                              <div className=\"flex items-center gap-2\">\n                                <span className=\"text-xs text-green-600\">✓ Evidence uploaded</span>\n                                <div className=\"w-12 h-12 border border-green-200 rounded overflow-hidden\">\n                                  <img \n                                    src={point.evidence} \n                                    alt=\"Evidence thumbnail\"\n                                    className=\"w-full h-full object-cover\"\n                                  />\n                                </div>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n                \n                {/* Save and Proceed Button */}\n                <div className=\"flex justify-center pt-6 border-t\">\n                  <Button\n                    onClick={() => {\n                      // Save current part's data\n                      const completedQuestions = part.points.filter(p => p.response !== '').length;\n                      toast({\n                        title: \"Progress Saved\",\n                        description: `${completedQuestions} of ${part.points.length} questions completed for ${part.title}`,\n                      });\n                      \n                      // Check if this is the last part (Part 10)\n                      const currentIndex = auditData.parts.findIndex(p => p.id === part.id);\n                      const isLastPart = currentIndex === auditData.parts.length - 1;\n                      \n                      if (isLastPart) {\n                        // This is the final part - submit the report\n                        handleGenerateReport();\n                      } else {\n                        // Auto-proceed to next part if available\n                        const nextPart = auditData.parts[currentIndex + 1];\n                        if (nextPart) {\n                          // Find the tabs trigger for the next part and click it\n                          const nextTab = document.querySelector(`[data-state=\"inactive\"][value=\"${nextPart.id}\"]`) as HTMLElement;\n                          if (nextTab) {\n                            nextTab.click();\n                          }\n                        }\n                      }\n                    }}\n                    className=\"bg-blue-600 hover:bg-blue-700 text-white px-6 py-2\"\n                  >\n                    {auditData.parts.findIndex(p => p.id === part.id) === auditData.parts.length - 1 \n                      ? \"Submit Report\" \n                      : \"Save & Proceed to Next Part\"}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        ))}\n      </Tabs>\n    </div>\n  );\n};\n\nexport default ComplianceAudit;",
      "size": 30138
    },
    {
      "path": "client/src/components/ComplianceAudit.js",
      "content": "import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\nimport { Button } from './ui/button';\nimport { Input } from './ui/input';\nimport { Label } from './ui/label';\nimport { Textarea } from './ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';\nimport { useToast } from '../hooks/use-toast';\nimport { Upload, FileText, Download } from 'lucide-react';\nimport jsPDF from 'jspdf';\nconst ComplianceAudit = () => {\n    const { toast } = useToast();\n    const [auditData, setAuditData] = useState({\n        auditDate: new Date().toISOString().split('T')[0],\n        auditorName: '',\n        company: 'EHI',\n        parts: [\n            {\n                id: 'part1',\n                title: 'Design Control (C1–C7)',\n                points: [\n                    { id: 'C1', question: 'Are design and development procedures established?', response: '', remark: '', evidence: null },\n                    { id: 'C2', question: 'Are design input requirements identified and reviewed?', response: '', remark: '', evidence: null },\n                    { id: 'C3', question: 'Are design reviews conducted at key stages?', response: '', remark: '', evidence: null },\n                    { id: 'C4', question: 'Does design output include all necessary production info?', response: '', remark: '', evidence: null },\n                    { id: 'C5', question: 'Are design changes verified and controlled?', response: '', remark: '', evidence: null },\n                    { id: 'C6', question: 'Is prototype or pilot testing done before production?', response: '', remark: '', evidence: null },\n                    { id: 'C7', question: 'Are design personnel competent and qualified?', response: '', remark: '', evidence: null }\n                ]\n            },\n            {\n                id: 'part2',\n                title: 'Purchasing Control (C8–C12)',\n                points: [\n                    { id: 'C8', question: 'Are suppliers evaluated and approved before ordering?', response: '', remark: '', evidence: null },\n                    { id: 'C9', question: 'Are materials purchased from approved sources?', response: '', remark: '', evidence: null },\n                    { id: 'C10', question: 'Are product specs and requirements agreed with suppliers?', response: '', remark: '', evidence: null },\n                    { id: 'C11', question: 'Is supplier performance monitored and recorded?', response: '', remark: '', evidence: null },\n                    { id: 'C12', question: 'Is supplier risk assessed to avoid material shortages?', response: '', remark: '', evidence: null }\n                ]\n            },\n            {\n                id: 'part3',\n                title: 'Storage Management (C13–C17)',\n                points: [\n                    { id: 'C13', question: 'Is inventory recorded for incoming and outgoing goods?', response: '', remark: '', evidence: null },\n                    { id: 'C14', question: 'Is inventory stored in safe and suitable conditions?', response: '', remark: '', evidence: null },\n                    { id: 'C15', question: 'Are materials clearly identified and segregated?', response: '', remark: '', evidence: null },\n                    { id: 'C16', question: 'Is product condition checked regularly in storage?', response: '', remark: '', evidence: null },\n                    { id: 'C17', question: 'Is inventory managed using FIFO or similar systems?', response: '', remark: '', evidence: null }\n                ]\n            },\n            {\n                id: 'part4',\n                title: 'Incoming Inspection (C18–C25)',\n                points: [\n                    { id: 'C18', question: 'Is there a separate area for uninspected materials?', response: '', remark: '', evidence: null },\n                    { id: 'C19', question: 'Are inspection criteria defined for incoming goods?', response: '', remark: '', evidence: null },\n                    { id: 'C20', question: 'Are inspections conducted and results recorded?', response: '', remark: '', evidence: null },\n                    { id: 'C21', question: 'Are unverified materials checked via alternate methods?', response: '', remark: '', evidence: null },\n                    { id: 'C22', question: 'Are customer-designated sources properly controlled?', response: '', remark: '', evidence: null },\n                    { id: 'C23', question: 'Is inspection status clearly marked on materials?', response: '', remark: '', evidence: null },\n                    { id: 'C24', question: 'Are rejected materials properly handled and recorded?', response: '', remark: '', evidence: null },\n                    { id: 'C25', question: 'Are inspection results analyzed for supplier evaluation?', response: '', remark: '', evidence: null }\n                ]\n            },\n            {\n                id: 'part5',\n                title: 'Production Control (C26–C45)',\n                points: [\n                    { id: 'C26', question: 'Are manufacturing inputs reviewed and documented?', response: '', remark: '', evidence: null },\n                    { id: 'C27', question: 'Are outputs expressed in specs and drawings?', response: '', remark: '', evidence: null },\n                    { id: 'C28', question: 'Is there a control plan for production?', response: '', remark: '', evidence: null },\n                    { id: 'C29', question: 'Are QC staff and work instructions in place?', response: '', remark: '', evidence: null },\n                    { id: 'C30', question: 'Are materials defined via BOM or similar?', response: '', remark: '', evidence: null },\n                    { id: 'C31', question: 'Is production scheduled based on capacity and orders?', response: '', remark: '', evidence: null },\n                    { id: 'C32', question: 'Are products traceable and batch-controlled?', response: '', remark: '', evidence: null },\n                    { id: 'C33', question: 'Are rejected items isolated and rechecked?', response: '', remark: '', evidence: null },\n                    { id: 'C34', question: 'Are defects and trends analyzed?', response: '', remark: '', evidence: null },\n                    { id: 'C35', question: 'Are new tools evaluated before use?', response: '', remark: '', evidence: null },\n                    { id: 'C36', question: 'Are process parameters monitored and recorded?', response: '', remark: '', evidence: null },\n                    { id: 'C37', question: 'Can QC stop production for quality issues?', response: '', remark: '', evidence: null },\n                    { id: 'C38', question: 'Is equipment maintenance planned and recorded?', response: '', remark: '', evidence: null },\n                    { id: 'C39', question: 'Are handling and transport methods suitable?', response: '', remark: '', evidence: null },\n                    { id: 'C40', question: 'Are packing and packaging requirements defined?', response: '', remark: '', evidence: null },\n                    { id: 'C41', question: 'Is the production flow chart available and clear?', response: '', remark: '', evidence: null },\n                    { id: 'C42', question: 'Are outsourced processes identified?', response: '', remark: '', evidence: null },\n                    { id: 'C43', question: 'Does the factory have relevant production experience?', response: '', remark: '', evidence: null },\n                    { id: 'C44', question: 'Are workers skilled and observed during audit?', response: '', remark: '', evidence: null },\n                    { id: 'C45', question: 'Are machines and facilities adequate for production?', response: '', remark: '', evidence: null }\n                ]\n            },\n            {\n                id: 'part6',\n                title: 'Final Product Inspection & Testing (C46–C53)',\n                points: [\n                    { id: 'C46', question: 'Are customer specs available for QC?', response: '', remark: '', evidence: null },\n                    { id: 'C47', question: 'Are final inspection criteria defined?', response: '', remark: '', evidence: null },\n                    { id: 'C48', question: 'Are final inspections conducted and recorded?', response: '', remark: '', evidence: null },\n                    { id: 'C49', question: 'Are appearance checks done with proper tools?', response: '', remark: '', evidence: null },\n                    { id: 'C50', question: 'Are safety and functionality checks performed?', response: '', remark: '', evidence: null },\n                    { id: 'C51', question: 'Are rejected lots isolated and handled properly?', response: '', remark: '', evidence: null },\n                    { id: 'C52', question: 'Are causes of rejects investigated and improved?', response: '', remark: '', evidence: null },\n                    { id: 'C53', question: 'Is ongoing reliability testing conducted?', response: '', remark: '', evidence: null }\n                ]\n            },\n            {\n                id: 'part7',\n                title: 'Measuring & Testing Equipment (C54–C58)',\n                points: [\n                    { id: 'C54', question: 'Is life/reliability testing equipment available?', response: '', remark: '', evidence: null },\n                    { id: 'C55', question: 'Are gauges and tools maintained and protected?', response: '', remark: '', evidence: null },\n                    { id: 'C56', question: 'Is equipment calibrated regularly?', response: '', remark: '', evidence: null },\n                    { id: 'C57', question: 'Are display devices checked frequently?', response: '', remark: '', evidence: null },\n                    { id: 'C58', question: 'Is equipment condition verified with fault simulation?', response: '', remark: '', evidence: null }\n                ]\n            },\n            {\n                id: 'part8',\n                title: 'Resource Management (C59–C63)',\n                points: [\n                    { id: 'C59', question: 'Is infrastructure adequate and layout optimized?', response: '', remark: '', evidence: null },\n                    { id: 'C60', question: 'Is the factory clean and well-maintained?', response: '', remark: '', evidence: null },\n                    { id: 'C61', question: 'Are training needs identified and addressed?', response: '', remark: '', evidence: null },\n                    { id: 'C62', question: 'Are employees motivated for quality and innovation?', response: '', remark: '', evidence: null },\n                    { id: 'C63', question: 'Are contingency plans in place', response: '', remark: '', evidence: null }\n                ]\n            },\n            {\n                id: 'part9',\n                title: 'Social & Environmental Responsibility (C74–C83)',\n                points: [\n                    { id: 'C74', question: 'Are working conditions (air, light, cleanliness) acceptable?', response: '', remark: '', evidence: null },\n                    { id: 'C75', question: 'Are all workers above the legal working age?', response: '', remark: '', evidence: null },\n                    { id: 'C76', question: 'Do working hours comply with labor laws?', response: '', remark: '', evidence: null },\n                    { id: 'C77', question: 'Do workers get at least one day off per week?', response: '', remark: '', evidence: null },\n                    { id: 'C78', question: 'Are workers employed voluntarily?', response: '', remark: '', evidence: null },\n                    { id: 'C79', question: 'Are wages equal to or above legal minimum?', response: '', remark: '', evidence: null },\n                    { id: 'C80', question: 'Do women have equal rights and protections?', response: '', remark: '', evidence: null },\n                    { id: 'C81', question: 'Are workers treated respectfully without abuse?', response: '', remark: '', evidence: null },\n                    { id: 'C82', question: 'Is the fire protection system adequate and functional?', response: '', remark: '', evidence: null },\n                    { id: 'C83', question: 'Are fire and evacuation drills conducted regularly?', response: '', remark: '', evidence: null }\n                ]\n            },\n            {\n                id: 'part10',\n                title: 'Health & Safety (C84–C93)',\n                points: [\n                    { id: 'C84', question: 'Are buildings in good physical condition?', response: '', remark: '', evidence: null },\n                    { id: 'C85', question: 'Are machine guards installed for safety?', response: '', remark: '', evidence: null },\n                    { id: 'C86', question: 'Are special equipment registered and inspected?', response: '', remark: '', evidence: null },\n                    { id: 'C87', question: 'Are safety instructions about clothing/jewelry followed?', response: '', remark: '', evidence: null },\n                    { id: 'C88', question: 'Is PPE provided and in good condition?', response: '', remark: '', evidence: null },\n                    { id: 'C89', question: 'Are PPE signs posted in required areas?', response: '', remark: '', evidence: null },\n                    { id: 'C90', question: 'Do workers follow safety instructions and use PPE?', response: '', remark: '', evidence: null },\n                    { id: 'C91', question: 'Is dormitory separate from production areas?', response: '', remark: '', evidence: null },\n                    { id: 'C92', question: 'Is a valid restaurant license available if required?', response: '', remark: '', evidence: null },\n                    { id: 'C93', question: 'Is medical service (e.g., first aid) available for workers?', response: '', remark: '', evidence: null }\n                ]\n            }\n        ]\n    });\n    const updatePointResponse = (partId, pointId, field, value) => {\n        setAuditData(prev => ({\n            ...prev,\n            parts: prev.parts.map(part => part.id === partId\n                ? {\n                    ...part,\n                    points: part.points.map(point => point.id === pointId ? { ...point, [field]: value } : point)\n                }\n                : part)\n        }));\n    };\n    const handleEvidenceUpload = (partId, pointId, file) => {\n        const reader = new FileReader();\n        reader.onload = () => {\n            const base64String = reader.result;\n            setAuditData(prev => ({\n                ...prev,\n                parts: prev.parts.map(part => part.id === partId\n                    ? {\n                        ...part,\n                        points: part.points.map(point => point.id === pointId ? { ...point, evidence: base64String } : point)\n                    }\n                    : part)\n            }));\n            toast({\n                title: \"Evidence Uploaded\",\n                description: `Evidence uploaded for ${pointId}`,\n            });\n        };\n        reader.readAsDataURL(file);\n    };\n    const calculateComplianceScore = () => {\n        const allPoints = auditData.parts.flatMap(part => part.points);\n        const answeredPoints = allPoints.filter(point => point.response !== '');\n        const yesResponses = allPoints.filter(point => point.response === 'Yes');\n        if (answeredPoints.length === 0)\n            return 0;\n        return Math.round((yesResponses.length / answeredPoints.length) * 100);\n    };\n    const generateCompliancePDF = async () => {\n        const doc = new jsPDF('p', 'mm', 'a4');\n        const pageWidth = doc.internal.pageSize.getWidth();\n        let yPos = 40;\n        // Add Eastern logo at top left\n        try {\n            const logoImg = new Image();\n            logoImg.src = '/eastern-logo-main.png';\n            await new Promise((resolve, reject) => {\n                logoImg.onload = resolve;\n                logoImg.onerror = reject;\n            });\n            // Add logo to PDF (positioned at top-left)\n            doc.addImage(logoImg, 'PNG', 10, 10, 40, 15);\n        }\n        catch (error) {\n            console.warn('Could not load logo for PDF, using text fallback:', error);\n            // Fallback to text if image fails\n            doc.setFontSize(14);\n            doc.setFont('times', 'bold');\n            doc.text('EASTERN MILLS', 10, 20);\n        }\n        // Company name\n        const companyFullName = auditData.company === 'EHI' ? 'Eastern Home Industries' : 'Eastern Mills Pvt. Ltd.';\n        doc.setFontSize(16);\n        doc.setFont('times', 'bold');\n        doc.text(companyFullName, pageWidth / 2, yPos, { align: 'center' });\n        yPos += 8;\n        // Report title\n        doc.setFontSize(14);\n        doc.setFont('times', 'bold');\n        doc.text('Internal Technical Audit Report', pageWidth / 2, yPos, { align: 'center' });\n        yPos += 6;\n        // ISO standard\n        doc.setFontSize(12);\n        doc.setFont('times', 'normal');\n        doc.text('As per clause ISO9001:2015', pageWidth / 2, yPos, { align: 'center' });\n        yPos += 15;\n        // Audit information\n        doc.setFontSize(10);\n        doc.setFont('times', 'normal');\n        doc.text(`Audit Date: ${auditData.auditDate}`, 20, yPos);\n        doc.text(`Auditor: ${auditData.auditorName}`, 120, yPos);\n        yPos += 6;\n        const complianceScore = calculateComplianceScore();\n        doc.text(`Compliance Score: ${complianceScore}%`, 20, yPos);\n        yPos += 15;\n        // Add audit results by part\n        auditData.parts.forEach(part => {\n            // Check if we need a new page\n            if (yPos > 250) {\n                doc.addPage();\n                yPos = 20;\n            }\n            // Part header\n            doc.setFontSize(11);\n            doc.setFont('times', 'bold');\n            doc.text(`${part.title}`, 20, yPos);\n            yPos += 8;\n            part.points.forEach(point => {\n                if (yPos > 270) {\n                    doc.addPage();\n                    yPos = 20;\n                }\n                doc.setFontSize(9);\n                doc.setFont('times', 'normal');\n                // Question\n                const questionLines = doc.splitTextToSize(`${point.id}: ${point.question}`, 120);\n                doc.text(questionLines, 25, yPos);\n                // Response\n                const responseColor = point.response === 'Yes' ? [0, 128, 0] : point.response === 'No' ? [255, 0, 0] : [128, 128, 128];\n                doc.setTextColor(...responseColor);\n                doc.text(`${point.response || 'Not Answered'}`, 150, yPos);\n                doc.setTextColor(0, 0, 0);\n                yPos += questionLines.length * 4;\n                // Remark if provided\n                if (point.remark) {\n                    doc.setFontSize(8);\n                    doc.setFont('times', 'italic');\n                    const remarkLines = doc.splitTextToSize(`Remark: ${point.remark}`, 160);\n                    doc.text(remarkLines, 30, yPos);\n                    yPos += remarkLines.length * 3;\n                }\n                // Add evidence image if available\n                if (point.evidence && point.evidence.startsWith('data:image/')) {\n                    try {\n                        // Check if we need a new page for the image\n                        if (yPos > 220) {\n                            doc.addPage();\n                            yPos = 20;\n                        }\n                        doc.setFontSize(8);\n                        doc.setFont('times', 'normal');\n                        doc.text('Evidence:', 30, yPos);\n                        yPos += 5;\n                        // Add evidence image with good quality\n                        const imgWidth = 60; // Good size for readability\n                        const imgHeight = 45; // Maintain aspect ratio\n                        doc.addImage(point.evidence, 'JPEG', 30, yPos, imgWidth, imgHeight);\n                        yPos += imgHeight + 5;\n                    }\n                    catch (imgError) {\n                        console.warn('Failed to add evidence image:', imgError);\n                        doc.setFontSize(8);\n                        doc.text('Evidence: [Image could not be displayed]', 30, yPos);\n                        yPos += 4;\n                    }\n                }\n                yPos += 2;\n            });\n            yPos += 5;\n        });\n        // Footer\n        const footerY = doc.internal.pageSize.getHeight() - 20;\n        doc.setFontSize(8);\n        doc.text(`Generated on: ${new Date().toLocaleDateString()}`, pageWidth / 2, footerY, { align: 'center' });\n        return doc;\n    };\n    const handleGenerateReport = async () => {\n        if (!auditData.auditorName.trim()) {\n            toast({\n                title: \"Missing Information\",\n                description: \"Please enter auditor name before generating report\",\n                variant: \"destructive\",\n            });\n            return;\n        }\n        try {\n            const pdf = await generateCompliancePDF();\n            const filename = `ISO9001_Audit_${auditData.company}_${auditData.auditDate.replace(/-/g, '')}.pdf`;\n            pdf.save(filename);\n            toast({\n                title: \"Audit Report Generated\",\n                description: \"ISO 9001:2015 compliance audit report with evidence images has been generated successfully\",\n            });\n        }\n        catch (error) {\n            console.error('Error generating PDF:', error);\n            toast({\n                title: \"PDF Generation Error\",\n                description: \"Failed to generate audit report. Please try again.\",\n                variant: \"destructive\",\n            });\n        }\n    };\n    return (_jsxs(\"div\", { className: \"space-y-6\", children: [_jsxs(Card, { children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: \"flex items-center gap-2\", children: [_jsx(FileText, { className: \"h-5 w-5\" }), \"ISO 9001:2015 Compliance Audit\"] }) }), _jsxs(CardContent, { children: [_jsxs(\"div\", { className: \"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\", children: [_jsxs(\"div\", { children: [_jsx(Label, { htmlFor: \"auditDate\", children: \"Audit Date\" }), _jsx(Input, { id: \"auditDate\", type: \"date\", value: auditData.auditDate, onChange: (e) => setAuditData(prev => ({ ...prev, auditDate: e.target.value })) })] }), _jsxs(\"div\", { children: [_jsx(Label, { htmlFor: \"auditorName\", children: \"Auditor Name\" }), _jsx(Input, { id: \"auditorName\", value: auditData.auditorName, onChange: (e) => setAuditData(prev => ({ ...prev, auditorName: e.target.value })), placeholder: \"Enter auditor name\" })] }), _jsxs(\"div\", { children: [_jsx(Label, { htmlFor: \"company\", children: \"Company\" }), _jsxs(Select, { value: auditData.company, onValueChange: (value) => setAuditData(prev => ({ ...prev, company: value })), children: [_jsx(SelectTrigger, { children: _jsx(SelectValue, {}) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: \"EHI\", children: \"Eastern Home Industries (EHI)\" }), _jsx(SelectItem, { value: \"EMPL\", children: \"Eastern Mills Pvt. Ltd. (EMPL)\" })] })] })] })] }), _jsxs(\"div\", { className: \"flex items-center justify-between\", children: [_jsxs(\"div\", { className: \"text-sm text-gray-600\", children: [\"Compliance Score: \", _jsxs(\"span\", { className: \"font-bold text-lg\", children: [calculateComplianceScore(), \"%\"] })] }), _jsxs(Button, { onClick: handleGenerateReport, className: \"flex items-center gap-2\", children: [_jsx(Download, { className: \"h-4 w-4\" }), \"Generate Audit Report\"] })] })] })] }), _jsxs(Tabs, { defaultValue: \"part1\", className: \"space-y-4\", children: [_jsx(TabsList, { className: \"grid grid-cols-5 lg:grid-cols-10 gap-1 h-auto p-1\", children: auditData.parts.map((part, index) => (_jsxs(TabsTrigger, { value: part.id, className: \"text-xs px-2 py-1 min-h-[32px]\", children: [\"Part \", index + 1] }, part.id))) }), auditData.parts.map((part) => (_jsx(TabsContent, { value: part.id, children: _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, { children: part.title }) }), _jsxs(CardContent, { children: [_jsx(\"div\", { className: \"space-y-6\", children: part.points.map((point) => (_jsxs(\"div\", { className: \"border rounded-lg p-4 space-y-3\", children: [_jsxs(\"div\", { className: \"flex items-start gap-4\", children: [_jsxs(\"div\", { className: \"flex-1\", children: [_jsx(Label, { className: \"text-sm font-medium\", children: point.id }), _jsx(\"p\", { className: \"text-sm text-gray-700 mt-1\", children: point.question })] }), _jsx(\"div\", { className: \"flex items-center gap-2\", children: _jsxs(\"div\", { className: \"flex gap-1\", children: [_jsx(Button, { type: \"button\", variant: point.response === 'Yes' ? 'default' : 'outline', size: \"sm\", className: `px-3 h-7 text-xs ${point.response === 'Yes' ? 'bg-green-600 hover:bg-green-700' : 'hover:bg-green-50'}`, onClick: () => updatePointResponse(part.id, point.id, 'response', 'Yes'), children: \"Yes\" }), _jsx(Button, { type: \"button\", variant: point.response === 'No' ? 'default' : 'outline', size: \"sm\", className: `px-3 h-7 text-xs ${point.response === 'No' ? 'bg-red-600 hover:bg-red-700' : 'hover:bg-red-50'}`, onClick: () => updatePointResponse(part.id, point.id, 'response', 'No'), children: \"No\" }), _jsx(Button, { type: \"button\", variant: point.response === 'NA' ? 'default' : 'outline', size: \"sm\", className: `px-3 h-7 text-xs ${point.response === 'NA' ? 'bg-gray-600 hover:bg-gray-700' : 'hover:bg-gray-50'}`, onClick: () => updatePointResponse(part.id, point.id, 'response', 'NA'), children: \"N/A\" })] }) })] }), _jsxs(\"div\", { className: \"grid grid-cols-1 md:grid-cols-2 gap-4\", children: [_jsxs(\"div\", { children: [_jsx(Label, { htmlFor: `remark-${point.id}`, className: \"text-sm\", children: \"Remark\" }), _jsx(Textarea, { id: `remark-${point.id}`, value: point.remark, onChange: (e) => updatePointResponse(part.id, point.id, 'remark', e.target.value), placeholder: \"Add remarks...\", className: \"h-20\" })] }), _jsxs(\"div\", { children: [_jsx(Label, { className: \"text-sm\", children: \"Evidence\" }), _jsxs(\"div\", { className: \"flex items-center gap-2 mt-1\", children: [_jsx(Input, { type: \"file\", accept: \"image/*,.pdf,.doc,.docx\", onChange: (e) => {\n                                                                                    const file = e.target.files?.[0];\n                                                                                    if (file) {\n                                                                                        handleEvidenceUpload(part.id, point.id, file);\n                                                                                    }\n                                                                                }, className: \"hidden\", id: `evidence-${point.id}` }), _jsxs(Button, { type: \"button\", variant: \"outline\", size: \"sm\", onClick: () => document.getElementById(`evidence-${point.id}`)?.click(), className: \"flex items-center gap-1\", children: [_jsx(Upload, { className: \"h-3 w-3\" }), \"Upload\"] }), point.evidence && (_jsxs(\"div\", { className: \"flex items-center gap-2\", children: [_jsx(\"span\", { className: \"text-xs text-green-600\", children: \"\\u2713 Evidence uploaded\" }), _jsx(\"div\", { className: \"w-12 h-12 border border-green-200 rounded overflow-hidden\", children: _jsx(\"img\", { src: point.evidence, alt: \"Evidence thumbnail\", className: \"w-full h-full object-cover\" }) })] }))] })] })] })] }, point.id))) }), _jsx(\"div\", { className: \"flex justify-center pt-6 border-t\", children: _jsx(Button, { onClick: () => {\n                                                    // Save current part's data\n                                                    const completedQuestions = part.points.filter(p => p.response !== '').length;\n                                                    toast({\n                                                        title: \"Progress Saved\",\n                                                        description: `${completedQuestions} of ${part.points.length} questions completed for ${part.title}`,\n                                                    });\n                                                    // Check if this is the last part (Part 10)\n                                                    const currentIndex = auditData.parts.findIndex(p => p.id === part.id);\n                                                    const isLastPart = currentIndex === auditData.parts.length - 1;\n                                                    if (isLastPart) {\n                                                        // This is the final part - submit the report\n                                                        handleGenerateReport();\n                                                    }\n                                                    else {\n                                                        // Auto-proceed to next part if available\n                                                        const nextPart = auditData.parts[currentIndex + 1];\n                                                        if (nextPart) {\n                                                            // Find the tabs trigger for the next part and click it\n                                                            const nextTab = document.querySelector(`[data-state=\"inactive\"][value=\"${nextPart.id}\"]`);\n                                                            if (nextTab) {\n                                                                nextTab.click();\n                                                            }\n                                                        }\n                                                    }\n                                                }, className: \"bg-blue-600 hover:bg-blue-700 text-white px-6 py-2\", children: auditData.parts.findIndex(p => p.id === part.id) === auditData.parts.length - 1\n                                                    ? \"Submit Report\"\n                                                    : \"Save & Proceed to Next Part\" }) })] })] }) }, part.id)))] })] }));\n};\nexport default ComplianceAudit;\n",
      "size": 30121
    },
    {
      "path": "client/src/components/EnhancedComplianceAudit.tsx",
      "content": "import React, { useState, useEffect, useCallback } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\nimport { Button } from './ui/button';\nimport { Input } from './ui/input';\nimport { Label } from './ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';\nimport { Textarea } from './ui/textarea';\nimport { Badge } from './ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';\nimport { \n  FileText, \n  Save, \n  Send, \n  CheckCircle, \n  XCircle, \n  AlertCircle,\n  Clock,\n  Lock,\n  ArrowLeft,\n  Download\n} from 'lucide-react';\nimport { useToast } from '../hooks/use-toast';\nimport { useComplianceAudit } from '../hooks/useComplianceAudit';\nimport { ComplianceAudit, ComplianceAuditItem, ComplianceAuditPart } from '../../../shared/schema';\nimport { MultiImageUpload } from './MultiImageUpload';\n\ninterface EnhancedComplianceAuditProps {\n  auditId?: string;\n  onClose?: () => void;\n}\n\n// ISO 9001:2015 Compliance Checklist Data\nconst compliancePartsData: ComplianceAuditPart[] = [\n  {\n    id: 'part1',\n    title: 'Design Control (C1-C7)',\n    weight: 10,\n    maxPoints: 7,\n    items: [\n      { id: 'C1', question: 'Are design and development procedures established?', response: '', remark: '', evidenceImages: [] },\n      { id: 'C2', question: 'Are design and development inputs defined and recorded?', response: '', remark: '', evidenceImages: [] },\n      { id: 'C3', question: 'Are design and development outputs documented?', response: '', remark: '', evidenceImages: [] },\n      { id: 'C4', question: 'Is design and development review conducted at suitable stages?', response: '', remark: '', evidenceImages: [] },\n      { id: 'C5', question: 'Is design and development verification performed?', response: '', remark: '', evidenceImages: [] },\n      { id: 'C6', question: 'Is design and development validation performed?', response: '', remark: '', evidenceImages: [] },\n      { id: 'C7', question: 'Are design and development changes controlled?', response: '', remark: '', evidenceImages: [] },\n    ]\n  },\n  {\n    id: 'part2',\n    title: 'Purchasing Control (C8-C15)',\n    weight: 12,\n    maxPoints: 8,\n    items: [\n      { id: 'C8', question: 'Are purchasing procedures established?', response: '', remark: '', evidenceImages: [] },\n      { id: 'C9', question: 'Are suppliers evaluated and selected based on defined criteria?', response: '', remark: '', evidenceImages: [] },\n      { id: 'C10', question: 'Are supplier evaluation records maintained?', response: '', remark: '', evidenceImages: [] },\n      { id: 'C11', question: 'Are purchasing documents reviewed and approved?', response: '', remark: '', evidenceImages: [] },\n      { id: 'C12', question: 'Do purchasing documents contain clear product specifications?', response: '', remark: '', evidenceImages: [] },\n      { id: 'C13', question: 'Are purchased products verified upon receipt?', response: '', remark: '', evidenceImages: [] },\n      { id: 'C14', question: 'Are non-conforming purchased products identified and controlled?', response: '', remark: '', evidenceImages: [] },\n      { id: 'C15', question: 'Is supplier performance monitored and reviewed?', response: '', remark: '', evidenceImages: [] },\n    ]\n  },\n  {\n    id: 'part3',\n    title: 'Storage Management (C16-C22)',\n    weight: 10,\n    maxPoints: 7,\n    items: [\n      { id: 'C16', question: 'Are storage areas properly identified and organized?', response: '', remark: '', evidenceImages: [] },\n      { id: 'C17', question: 'Are storage conditions appropriate for materials?', response: '', remark: '', evidenceImages: [] },\n      { id: 'C18', question: 'Is FIFO (First In, First Out) system implemented?', response: '', remark: '', evidenceImages: [] },\n      { id: 'C19', question: 'Are materials properly protected during storage?', response: '', remark: '', evidenceImages: [] },\n      { id: 'C20', question: 'Are inventory records maintained and accurate?', response: '', remark: '', evidenceImages: [] },\n      { id: 'C21', question: 'Are damaged or deteriorated materials identified?', response: '', remark: '', evidenceImages: [] },\n      { id: 'C22', question: 'Is access to storage areas controlled?', response: '', remark: '', evidenceImages: [] },\n    ]\n  },\n  // Continue with remaining parts...\n  {\n    id: 'part4',\n    title: 'Incoming Inspection (C23-C30)',\n    weight: 12,\n    maxPoints: 8,\n    items: [\n      { id: 'C23', question: 'Are incoming inspection procedures documented?', response: '', remark: '', evidenceImages: [] },\n      { id: 'C24', question: 'Are inspection criteria and methods defined?', response: '', remark: '', evidenceImages: [] },\n      { id: 'C25', question: 'Are inspection records maintained?', response: '', remark: '', evidenceImages: [] },\n      { id: 'C26', question: 'Are sampling plans appropriate and documented?', response: '', remark: '', evidenceImages: [] },\n      { id: 'C27', question: 'Are measuring equipment calibrated and controlled?', response: '', remark: '', evidenceImages: [] },\n      { id: 'C28', question: 'Are non-conforming materials identified and segregated?', response: '', remark: '', evidenceImages: [] },\n      { id: 'C29', question: 'Are inspection results communicated to relevant parties?', response: '', remark: '', evidenceImages: [] },\n      { id: 'C30', question: 'Are corrective actions taken for recurring issues?', response: '', remark: '', evidenceImages: [] },\n    ]\n  }\n  // Add remaining parts 5-10 as needed...\n];\n\nexport function EnhancedComplianceAudit({ auditId, onClose }: EnhancedComplianceAuditProps) {\n  const { toast } = useToast();\n  const { \n    createAudit, \n    updateAudit, \n    submitAudit, \n    getAudit,\n    autoSave,\n    isCreating,\n    isUpdating,\n    isSubmitting \n  } = useComplianceAudit();\n\n  const [audit, setAudit] = useState<Partial<ComplianceAudit>>({\n    auditDate: new Date().toISOString().split('T')[0],\n    auditorName: '',\n    company: 'EHI',\n    location: '',\n    auditScope: 'ISO 9001:2015 Compliance Verification',\n    parts: compliancePartsData,\n    status: 'draft',\n  });\n\n  const [currentPartIndex, setCurrentPartIndex] = useState(0);\n  const [lastSaved, setLastSaved] = useState<Date | null>(null);\n  const [autoSaveTimer, setAutoSaveTimer] = useState<NodeJS.Timeout | null>(null);\n\n  // Load existing audit if auditId provided\n  useEffect(() => {\n    if (auditId) {\n      loadAudit(auditId);\n    }\n  }, [auditId]);\n\n  const loadAudit = async (id: string) => {\n    try {\n      const existingAudit = await getAudit(id);\n      if (existingAudit) {\n        console.log('📥 Loading existing audit:', existingAudit);\n        \n        // Debug loading audit images\n        const loadedImageCount = existingAudit.parts?.reduce((total: number, part: any) => {\n          return total + (part.items?.reduce((subtotal: number, item: any) => {\n            if (item.evidenceImages && item.evidenceImages.length > 0) {\n              console.log(`🔄 LOADING: Item ${item.id} has ${item.evidenceImages.length} images`);\n            }\n            return subtotal + (item.evidenceImages?.length || 0);\n          }, 0) || 0);\n        }, 0) || 0;\n        console.log(`🔄 LOADING: Total images loaded from server: ${loadedImageCount}`);\n        \n        // Preserve ALL user data including responses, remarks, and images\n        setAudit({\n          ...existingAudit,\n          // Ensure parts data is properly loaded with all user answers preserved\n          parts: existingAudit.parts || compliancePartsData\n        });\n        console.log('✅ Audit loaded with', existingAudit.parts?.length || 0, 'parts');\n      }\n    } catch (error) {\n      console.error('Failed to load audit:', error);\n      toast({\n        title: \"Failed to load audit\",\n        description: \"Could not load existing audit data.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Auto-save functionality - DISABLED to prevent double saves\n  const triggerAutoSave = useCallback(() => {\n    // Auto-save disabled - only manual saves allowed to prevent conflicts\n    console.log('Auto-save disabled to prevent double saves');\n  }, []);\n\n  // Auto-save trigger disabled\n  useEffect(() => {\n    // Auto-save effect disabled to prevent double save bug\n    return () => {\n      if (autoSaveTimer) {\n        clearTimeout(autoSaveTimer);\n      }\n    };\n  }, [autoSaveTimer]);\n\n  const handleBasicInfoChange = (field: string, value: string) => {\n    setAudit(prev => ({\n      ...prev,\n      [field]: value,\n    }));\n  };\n\n  const handleItemResponse = (partId: string, itemId: string, response: 'Yes' | 'No' | 'NA') => {\n    setAudit(prev => ({\n      ...prev,\n      parts: prev.parts?.map(part =>\n        part.id === partId\n          ? {\n              ...part,\n              items: part.items.map(item =>\n                item.id === itemId ? { ...item, response } : item\n              )\n            }\n          : part\n      ) || [],\n    }));\n  };\n\n  const handleItemRemark = (partId: string, itemId: string, remark: string) => {\n    setAudit(prev => ({\n      ...prev,\n      parts: prev.parts?.map(part =>\n        part.id === partId\n          ? {\n              ...part,\n              items: part.items.map(item =>\n                item.id === itemId ? { ...item, remark } : item\n              )\n            }\n          : part\n      ) || [],\n    }));\n  };\n\n  const handleItemImages = (partId: string, itemId: string, images: string[]) => {\n    console.log(`🖼️ FRONTEND IMAGE UPDATE: Part ${partId}, Item ${itemId}, Images: ${images.length}`);\n    \n    setAudit(prev => ({\n      ...prev,\n      parts: prev.parts?.map(part =>\n        part.id === partId\n          ? {\n              ...part,\n              items: part.items.map(item =>\n                item.id === itemId ? { ...item, evidenceImages: images } : item\n              )\n            }\n          : part\n      ) || [],\n    }));\n    \n    console.log('🖼️ FRONTEND STATE UPDATED: Images updated for item', itemId);\n  };\n\n  const calculateScore = () => {\n    if (!audit.parts) return { totalItems: 0, yesCount: 0, noCount: 0, naCount: 0, applicableItems: 0, score: 0 };\n\n    let totalItems = 0;\n    let yesCount = 0;\n    let noCount = 0;\n    let naCount = 0;\n\n    audit.parts.forEach(part => {\n      part.items.forEach(item => {\n        totalItems++;\n        if (item.response === 'Yes') yesCount++;\n        else if (item.response === 'No') noCount++;\n        else if (item.response === 'NA') naCount++;\n      });\n    });\n\n    const applicableItems = totalItems - naCount;\n    const score = applicableItems > 0 ? Math.round((yesCount / applicableItems) * 100) : 0;\n\n    return { totalItems, yesCount, noCount, naCount, applicableItems, score };\n  };\n\n  const handleSaveDraft = async () => {\n    // Prevent multiple simultaneous saves\n    if (isUpdating || isCreating) {\n      console.log('Save already in progress, skipping...');\n      return;\n    }\n\n    try {\n      const scoreData = calculateScore();\n      const auditData = { ...audit, scoreData };\n\n      console.log(`💾 SAVE DRAFT: Saving audit with ${auditData.parts?.length || 0} parts`);\n\n      if (audit.id) {\n        console.log('💾 UPDATING existing audit:', audit.id);\n        await updateAudit({ id: audit.id, data: auditData });\n      } else {\n        console.log('💾 CREATING new audit');\n        const newId = await createAudit(auditData);\n        setAudit(prev => ({ ...prev, id: newId }));\n      }\n      \n      setLastSaved(new Date());\n      toast({\n        title: \"Draft saved\",\n        description: \"Audit draft saved successfully.\",\n      });\n    } catch (error) {\n      console.error('Save failed:', error);\n      toast({\n        title: \"Save failed\",\n        description: \"Failed to save audit. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleSubmitAudit = async () => {\n    try {\n      let auditIdToSubmit = audit.id;\n      \n      // If audit hasn't been saved yet, save it first\n      if (!auditIdToSubmit) {\n        const scoreData = calculateScore();\n        const auditData = { ...audit, scoreData };\n        console.log('🔧 Creating new audit before submission...');\n        auditIdToSubmit = await createAudit(auditData);\n        setAudit(prev => ({ ...prev, id: auditIdToSubmit }));\n      }\n\n      // Submit the audit (no field validation required)\n      console.log('🚀 Submitting audit:', auditIdToSubmit);\n      if (!auditIdToSubmit) {\n        throw new Error('Failed to get audit ID for submission');\n      }\n      await submitAudit(auditIdToSubmit);\n      \n      // Update local state optimistically after successful submission\n      const submittedAt = new Date();\n      setAudit(prev => ({ \n        ...prev, \n        status: 'submitted', \n        submittedAt: submittedAt\n      }));\n      \n      console.log('✅ Audit submitted successfully, updating local state');\n      \n      toast({\n        title: \"Audit submitted\",\n        description: \"Compliance audit submitted successfully.\",\n      });\n      \n      // Close the form after successful submission\n      if (onClose) {\n        setTimeout(() => onClose(), 500); // Small delay to show success state\n      }\n    } catch (error) {\n      console.error('❌ Submit failed:', error);\n      toast({\n        title: \"Submission failed\",\n        description: \"Failed to submit audit. Images may be too large. Try reducing image count or quality.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const generatePDF = async () => {\n    if (!audit.id) {\n      toast({\n        title: \"Save required\",\n        description: \"Please save the audit first to generate PDF.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      // Use the audit-specific PDF generation endpoint\n      const response = await fetch(`/api/audits/${audit.id}/generate-pdf`, {\n        method: 'POST',\n      });\n      \n      if (!response.ok) {\n        throw new Error('PDF generation failed');\n      }\n      \n      const result = await response.json();\n      \n      if (result.success) {\n        // Download the PDF\n        const link = document.createElement('a');\n        link.href = result.downloadUrl || result.pdfUrl;\n        link.download = result.fileName || `audit-${audit.id}.pdf`;\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        \n        toast({\n          title: \"PDF generated\",\n          description: \"Audit report downloaded successfully with Eastern Mills branding.\",\n        });\n      }\n    } catch (error) {\n      console.error('PDF generation failed:', error);\n      toast({\n        title: \"PDF generation failed\",\n        description: \"Failed to generate PDF report. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const scoreData = calculateScore();\n  const currentPart = audit.parts?.[currentPartIndex];\n  const isReadOnly = audit.status === 'submitted';\n\n  return (\n    <div className=\"space-y-6 relative\">\n      {/* Loading Overlay */}\n      {isSubmitting && (\n        <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center\">\n          <div className=\"bg-white p-6 rounded-lg shadow-lg flex flex-col items-center gap-4\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-green-600\"></div>\n            <p className=\"text-lg font-medium\">Submitting compliance audit...</p>\n            <p className=\"text-sm text-gray-600\">Please wait while we process your submission</p>\n          </div>\n        </div>\n      )}\n      \n      {/* Header */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              {onClose && (\n                <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n                  <ArrowLeft className=\"h-4 w-4\" />\n                </Button>\n              )}\n              <CardTitle className=\"flex items-center gap-2\">\n                <FileText className=\"h-5 w-5\" />\n                ISO 9001:2015 Compliance Audit\n                {isReadOnly && <Lock className=\"h-4 w-4 text-muted-foreground\" />}\n              </CardTitle>\n            </div>\n            \n            <div className=\"flex items-center gap-2\">\n              {lastSaved && (\n                <span className=\"text-xs text-muted-foreground flex items-center gap-1\">\n                  <Clock className=\"h-3 w-3\" />\n                  Saved {lastSaved.toLocaleTimeString()}\n                </span>\n              )}\n              \n              <Badge variant={audit.status === 'submitted' ? 'default' : 'secondary'}>\n                {audit.status === 'submitted' ? 'Submitted' : 'Draft'}\n              </Badge>\n            </div>\n          </div>\n        </CardHeader>\n        \n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n            <div>\n              <Label htmlFor=\"auditDate\">Audit Date</Label>\n              <Input\n                id=\"auditDate\"\n                type=\"date\"\n                value={audit.auditDate}\n                onChange={(e) => handleBasicInfoChange('auditDate', e.target.value)}\n                disabled={isReadOnly}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"auditorName\">Auditor Name</Label>\n              <Input\n                id=\"auditorName\"\n                value={audit.auditorName}\n                onChange={(e) => handleBasicInfoChange('auditorName', e.target.value)}\n                placeholder=\"Enter auditor name\"\n                disabled={isReadOnly}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"company\">Company</Label>\n              <Select\n                value={audit.company}\n                onValueChange={(value: 'EHI' | 'EMPL') => handleBasicInfoChange('company', value)}\n                disabled={isReadOnly}\n              >\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"EHI\">Eastern Home Industries (EHI)</SelectItem>\n                  <SelectItem value=\"EMPL\">Eastern Mills Pvt. Ltd. (EMPL)</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {/* Score Display */}\n          {scoreData.totalItems > 0 && (\n            <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4 mb-4\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-green-600\">{scoreData.yesCount}</div>\n                <div className=\"text-xs text-muted-foreground\">Yes</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-red-600\">{scoreData.noCount}</div>\n                <div className=\"text-xs text-muted-foreground\">No</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-gray-600\">{scoreData.naCount}</div>\n                <div className=\"text-xs text-muted-foreground\">N/A</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold\">{scoreData.applicableItems}</div>\n                <div className=\"text-xs text-muted-foreground\">Applicable</div>\n              </div>\n              <div className=\"text-center\">\n                <div className={`text-2xl font-bold ${\n                  scoreData.score >= 90 ? 'text-green-600' : \n                  scoreData.score >= 70 ? 'text-yellow-600' : 'text-red-600'\n                }`}>\n                  {scoreData.score}%\n                </div>\n                <div className=\"text-xs text-muted-foreground\">Score</div>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Audit Parts */}\n      {currentPart && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span>{currentPart.title}</span>\n              <span className=\"text-sm text-muted-foreground\">\n                Part {currentPartIndex + 1} of {audit.parts?.length || 0}\n              </span>\n            </CardTitle>\n          </CardHeader>\n          \n          <CardContent className=\"space-y-6\">\n            {currentPart.items.map((item, itemIndex) => (\n              <div key={item.id} className=\"border rounded-lg p-4 space-y-4\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-medium mb-2\">{item.id}: {item.question}</h4>\n                    \n                    {/* Response Buttons */}\n                    <div className=\"flex gap-2 mb-3\">\n                      {(['Yes', 'No', 'NA'] as const).map((response) => (\n                        <Button\n                          key={response}\n                          size=\"sm\"\n                          variant={item.response === response ? 'default' : 'outline'}\n                          className={\n                            item.response === response\n                              ? response === 'Yes' ? 'bg-green-600 hover:bg-green-700' :\n                                response === 'No' ? 'bg-red-600 hover:bg-red-700' :\n                                'bg-gray-600 hover:bg-gray-700'\n                              : ''\n                          }\n                          onClick={() => !isReadOnly && handleItemResponse(currentPart.id, item.id, response)}\n                          disabled={isReadOnly}\n                        >\n                          {response === 'Yes' && <CheckCircle className=\"h-3 w-3 mr-1\" />}\n                          {response === 'No' && <XCircle className=\"h-3 w-3 mr-1\" />}\n                          {response === 'NA' && <AlertCircle className=\"h-3 w-3 mr-1\" />}\n                          {response}\n                        </Button>\n                      ))}\n                    </div>\n\n                    {/* Remarks */}\n                    <div className=\"mb-3\">\n                      <Label htmlFor={`remark-${item.id}`} className=\"text-xs\">Remarks</Label>\n                      <Textarea\n                        id={`remark-${item.id}`}\n                        value={item.remark}\n                        onChange={(e) => !isReadOnly && handleItemRemark(currentPart.id, item.id, e.target.value)}\n                        placeholder=\"Add any remarks or observations...\"\n                        rows={2}\n                        disabled={isReadOnly}\n                      />\n                    </div>\n\n                    {/* Multi-Image Upload */}\n                    <MultiImageUpload\n                      images={item.evidenceImages}\n                      onImagesChange={(images) => !isReadOnly && handleItemImages(currentPart.id, item.id, images)}\n                      maxImages={5}\n                      title={`Evidence for ${item.id}`}\n                      className={isReadOnly ? 'opacity-60 pointer-events-none' : ''}\n                      auditId={audit.id}\n                      questionCode={item.id}\n                    />\n                  </div>\n                </div>\n              </div>\n            ))}\n\n            {/* Navigation */}\n            <div className=\"flex items-center justify-between pt-4\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setCurrentPartIndex(Math.max(0, currentPartIndex - 1))}\n                disabled={currentPartIndex === 0}\n              >\n                Previous Part\n              </Button>\n\n              <div className=\"flex gap-2\">\n                {!isReadOnly && (\n                  <Button\n                    onClick={handleSaveDraft}\n                    disabled={isUpdating || isCreating}\n                    variant=\"outline\"\n                  >\n                    {isUpdating || isCreating ? (\n                      <>\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-gray-900 mr-2\"></div>\n                        Saving...\n                      </>\n                    ) : (\n                      <>\n                        <Save className=\"h-4 w-4 mr-2\" />\n                        Save Draft\n                      </>\n                    )}\n                  </Button>\n                )}\n\n\n\n                {currentPartIndex === (audit.parts?.length || 1) - 1 ? (\n                  isReadOnly ? (\n                    <Button onClick={generatePDF} variant=\"outline\">\n                      <Download className=\"h-4 w-4 mr-2\" />\n                      Download PDF\n                    </Button>\n                  ) : (\n                    <Button\n                      onClick={handleSubmitAudit}\n                      disabled={isSubmitting}\n                      className=\"bg-green-600 hover:bg-green-700\"\n                    >\n                      {isSubmitting ? (\n                        <>\n                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                          Submitting...\n                        </>\n                      ) : (\n                        <>\n                          <Send className=\"h-4 w-4 mr-2\" />\n                          Submit Report\n                        </>\n                      )}\n                    </Button>\n                  )\n                ) : (\n                  <Button\n                    onClick={() => setCurrentPartIndex(currentPartIndex + 1)}\n                    disabled={currentPartIndex >= (audit.parts?.length || 1) - 1}\n                  >\n                    Next Part\n                  </Button>\n                )}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}",
      "size": 25878
    },
    {
      "path": "client/src/components/EnhancedComplianceAudit.js",
      "content": "import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useState, useEffect, useCallback } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\nimport { Button } from './ui/button';\nimport { Input } from './ui/input';\nimport { Label } from './ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';\nimport { Textarea } from './ui/textarea';\nimport { Badge } from './ui/badge';\nimport { FileText, Save, Send, CheckCircle, XCircle, AlertCircle, Clock, Lock, ArrowLeft, Download } from 'lucide-react';\nimport { useToast } from '../hooks/use-toast';\nimport { useComplianceAudit } from '../hooks/useComplianceAudit';\nimport { MultiImageUpload } from './MultiImageUpload';\n// ISO 9001:2015 Compliance Checklist Data\nconst compliancePartsData = [\n    {\n        id: 'part1',\n        title: 'Design Control (C1-C7)',\n        weight: 10,\n        maxPoints: 7,\n        items: [\n            { id: 'C1', question: 'Are design and development procedures established?', response: '', remark: '', evidenceImages: [] },\n            { id: 'C2', question: 'Are design and development inputs defined and recorded?', response: '', remark: '', evidenceImages: [] },\n            { id: 'C3', question: 'Are design and development outputs documented?', response: '', remark: '', evidenceImages: [] },\n            { id: 'C4', question: 'Is design and development review conducted at suitable stages?', response: '', remark: '', evidenceImages: [] },\n            { id: 'C5', question: 'Is design and development verification performed?', response: '', remark: '', evidenceImages: [] },\n            { id: 'C6', question: 'Is design and development validation performed?', response: '', remark: '', evidenceImages: [] },\n            { id: 'C7', question: 'Are design and development changes controlled?', response: '', remark: '', evidenceImages: [] },\n        ]\n    },\n    {\n        id: 'part2',\n        title: 'Purchasing Control (C8-C15)',\n        weight: 12,\n        maxPoints: 8,\n        items: [\n            { id: 'C8', question: 'Are purchasing procedures established?', response: '', remark: '', evidenceImages: [] },\n            { id: 'C9', question: 'Are suppliers evaluated and selected based on defined criteria?', response: '', remark: '', evidenceImages: [] },\n            { id: 'C10', question: 'Are supplier evaluation records maintained?', response: '', remark: '', evidenceImages: [] },\n            { id: 'C11', question: 'Are purchasing documents reviewed and approved?', response: '', remark: '', evidenceImages: [] },\n            { id: 'C12', question: 'Do purchasing documents contain clear product specifications?', response: '', remark: '', evidenceImages: [] },\n            { id: 'C13', question: 'Are purchased products verified upon receipt?', response: '', remark: '', evidenceImages: [] },\n            { id: 'C14', question: 'Are non-conforming purchased products identified and controlled?', response: '', remark: '', evidenceImages: [] },\n            { id: 'C15', question: 'Is supplier performance monitored and reviewed?', response: '', remark: '', evidenceImages: [] },\n        ]\n    },\n    {\n        id: 'part3',\n        title: 'Storage Management (C16-C22)',\n        weight: 10,\n        maxPoints: 7,\n        items: [\n            { id: 'C16', question: 'Are storage areas properly identified and organized?', response: '', remark: '', evidenceImages: [] },\n            { id: 'C17', question: 'Are storage conditions appropriate for materials?', response: '', remark: '', evidenceImages: [] },\n            { id: 'C18', question: 'Is FIFO (First In, First Out) system implemented?', response: '', remark: '', evidenceImages: [] },\n            { id: 'C19', question: 'Are materials properly protected during storage?', response: '', remark: '', evidenceImages: [] },\n            { id: 'C20', question: 'Are inventory records maintained and accurate?', response: '', remark: '', evidenceImages: [] },\n            { id: 'C21', question: 'Are damaged or deteriorated materials identified?', response: '', remark: '', evidenceImages: [] },\n            { id: 'C22', question: 'Is access to storage areas controlled?', response: '', remark: '', evidenceImages: [] },\n        ]\n    },\n    // Continue with remaining parts...\n    {\n        id: 'part4',\n        title: 'Incoming Inspection (C23-C30)',\n        weight: 12,\n        maxPoints: 8,\n        items: [\n            { id: 'C23', question: 'Are incoming inspection procedures documented?', response: '', remark: '', evidenceImages: [] },\n            { id: 'C24', question: 'Are inspection criteria and methods defined?', response: '', remark: '', evidenceImages: [] },\n            { id: 'C25', question: 'Are inspection records maintained?', response: '', remark: '', evidenceImages: [] },\n            { id: 'C26', question: 'Are sampling plans appropriate and documented?', response: '', remark: '', evidenceImages: [] },\n            { id: 'C27', question: 'Are measuring equipment calibrated and controlled?', response: '', remark: '', evidenceImages: [] },\n            { id: 'C28', question: 'Are non-conforming materials identified and segregated?', response: '', remark: '', evidenceImages: [] },\n            { id: 'C29', question: 'Are inspection results communicated to relevant parties?', response: '', remark: '', evidenceImages: [] },\n            { id: 'C30', question: 'Are corrective actions taken for recurring issues?', response: '', remark: '', evidenceImages: [] },\n        ]\n    }\n    // Add remaining parts 5-10 as needed...\n];\nexport function EnhancedComplianceAudit({ auditId, onClose }) {\n    const { toast } = useToast();\n    const { createAudit, updateAudit, submitAudit, getAudit, autoSave, isCreating, isUpdating, isSubmitting } = useComplianceAudit();\n    const [audit, setAudit] = useState({\n        auditDate: new Date().toISOString().split('T')[0],\n        auditorName: '',\n        company: 'EHI',\n        location: '',\n        auditScope: 'ISO 9001:2015 Compliance Verification',\n        parts: compliancePartsData,\n        status: 'draft',\n    });\n    const [currentPartIndex, setCurrentPartIndex] = useState(0);\n    const [lastSaved, setLastSaved] = useState(null);\n    const [autoSaveTimer, setAutoSaveTimer] = useState(null);\n    // Load existing audit if auditId provided\n    useEffect(() => {\n        if (auditId) {\n            loadAudit(auditId);\n        }\n    }, [auditId]);\n    const loadAudit = async (id) => {\n        try {\n            const existingAudit = await getAudit(id);\n            if (existingAudit) {\n                console.log('📥 Loading existing audit:', existingAudit);\n                // Debug loading audit images\n                const loadedImageCount = existingAudit.parts?.reduce((total, part) => {\n                    return total + (part.items?.reduce((subtotal, item) => {\n                        if (item.evidenceImages && item.evidenceImages.length > 0) {\n                            console.log(`🔄 LOADING: Item ${item.id} has ${item.evidenceImages.length} images`);\n                        }\n                        return subtotal + (item.evidenceImages?.length || 0);\n                    }, 0) || 0);\n                }, 0) || 0;\n                console.log(`🔄 LOADING: Total images loaded from server: ${loadedImageCount}`);\n                // Preserve ALL user data including responses, remarks, and images\n                setAudit({\n                    ...existingAudit,\n                    // Ensure parts data is properly loaded with all user answers preserved\n                    parts: existingAudit.parts || compliancePartsData\n                });\n                console.log('✅ Audit loaded with', existingAudit.parts?.length || 0, 'parts');\n            }\n        }\n        catch (error) {\n            console.error('Failed to load audit:', error);\n            toast({\n                title: \"Failed to load audit\",\n                description: \"Could not load existing audit data.\",\n                variant: \"destructive\",\n            });\n        }\n    };\n    // Auto-save functionality - DISABLED to prevent double saves\n    const triggerAutoSave = useCallback(() => {\n        // Auto-save disabled - only manual saves allowed to prevent conflicts\n        console.log('Auto-save disabled to prevent double saves');\n    }, []);\n    // Auto-save trigger disabled\n    useEffect(() => {\n        // Auto-save effect disabled to prevent double save bug\n        return () => {\n            if (autoSaveTimer) {\n                clearTimeout(autoSaveTimer);\n            }\n        };\n    }, [autoSaveTimer]);\n    const handleBasicInfoChange = (field, value) => {\n        setAudit(prev => ({\n            ...prev,\n            [field]: value,\n        }));\n    };\n    const handleItemResponse = (partId, itemId, response) => {\n        setAudit(prev => ({\n            ...prev,\n            parts: prev.parts?.map(part => part.id === partId\n                ? {\n                    ...part,\n                    items: part.items.map(item => item.id === itemId ? { ...item, response } : item)\n                }\n                : part) || [],\n        }));\n    };\n    const handleItemRemark = (partId, itemId, remark) => {\n        setAudit(prev => ({\n            ...prev,\n            parts: prev.parts?.map(part => part.id === partId\n                ? {\n                    ...part,\n                    items: part.items.map(item => item.id === itemId ? { ...item, remark } : item)\n                }\n                : part) || [],\n        }));\n    };\n    const handleItemImages = (partId, itemId, images) => {\n        console.log(`🖼️ FRONTEND IMAGE UPDATE: Part ${partId}, Item ${itemId}, Images: ${images.length}`);\n        setAudit(prev => ({\n            ...prev,\n            parts: prev.parts?.map(part => part.id === partId\n                ? {\n                    ...part,\n                    items: part.items.map(item => item.id === itemId ? { ...item, evidenceImages: images } : item)\n                }\n                : part) || [],\n        }));\n        console.log('🖼️ FRONTEND STATE UPDATED: Images updated for item', itemId);\n    };\n    const calculateScore = () => {\n        if (!audit.parts)\n            return { totalItems: 0, yesCount: 0, noCount: 0, naCount: 0, applicableItems: 0, score: 0 };\n        let totalItems = 0;\n        let yesCount = 0;\n        let noCount = 0;\n        let naCount = 0;\n        audit.parts.forEach(part => {\n            part.items.forEach(item => {\n                totalItems++;\n                if (item.response === 'Yes')\n                    yesCount++;\n                else if (item.response === 'No')\n                    noCount++;\n                else if (item.response === 'NA')\n                    naCount++;\n            });\n        });\n        const applicableItems = totalItems - naCount;\n        const score = applicableItems > 0 ? Math.round((yesCount / applicableItems) * 100) : 0;\n        return { totalItems, yesCount, noCount, naCount, applicableItems, score };\n    };\n    const handleSaveDraft = async () => {\n        // Prevent multiple simultaneous saves\n        if (isUpdating || isCreating) {\n            console.log('Save already in progress, skipping...');\n            return;\n        }\n        try {\n            const scoreData = calculateScore();\n            const auditData = { ...audit, scoreData };\n            console.log(`💾 SAVE DRAFT: Saving audit with ${auditData.parts?.length || 0} parts`);\n            if (audit.id) {\n                console.log('💾 UPDATING existing audit:', audit.id);\n                await updateAudit({ id: audit.id, data: auditData });\n            }\n            else {\n                console.log('💾 CREATING new audit');\n                const newId = await createAudit(auditData);\n                setAudit(prev => ({ ...prev, id: newId }));\n            }\n            setLastSaved(new Date());\n            toast({\n                title: \"Draft saved\",\n                description: \"Audit draft saved successfully.\",\n            });\n        }\n        catch (error) {\n            console.error('Save failed:', error);\n            toast({\n                title: \"Save failed\",\n                description: \"Failed to save audit. Please try again.\",\n                variant: \"destructive\",\n            });\n        }\n    };\n    const handleSubmitAudit = async () => {\n        try {\n            let auditIdToSubmit = audit.id;\n            // If audit hasn't been saved yet, save it first\n            if (!auditIdToSubmit) {\n                const scoreData = calculateScore();\n                const auditData = { ...audit, scoreData };\n                console.log('🔧 Creating new audit before submission...');\n                auditIdToSubmit = await createAudit(auditData);\n                setAudit(prev => ({ ...prev, id: auditIdToSubmit }));\n            }\n            // Submit the audit (no field validation required)\n            console.log('🚀 Submitting audit:', auditIdToSubmit);\n            if (!auditIdToSubmit) {\n                throw new Error('Failed to get audit ID for submission');\n            }\n            await submitAudit(auditIdToSubmit);\n            // Update local state optimistically after successful submission\n            const submittedAt = new Date();\n            setAudit(prev => ({\n                ...prev,\n                status: 'submitted',\n                submittedAt: submittedAt\n            }));\n            console.log('✅ Audit submitted successfully, updating local state');\n            toast({\n                title: \"Audit submitted\",\n                description: \"Compliance audit submitted successfully.\",\n            });\n            // Close the form after successful submission\n            if (onClose) {\n                setTimeout(() => onClose(), 500); // Small delay to show success state\n            }\n        }\n        catch (error) {\n            console.error('❌ Submit failed:', error);\n            toast({\n                title: \"Submission failed\",\n                description: \"Failed to submit audit. Images may be too large. Try reducing image count or quality.\",\n                variant: \"destructive\",\n            });\n        }\n    };\n    const generatePDF = async () => {\n        if (!audit.id) {\n            toast({\n                title: \"Save required\",\n                description: \"Please save the audit first to generate PDF.\",\n                variant: \"destructive\",\n            });\n            return;\n        }\n        try {\n            // Use the audit-specific PDF generation endpoint\n            const response = await fetch(`/api/audits/${audit.id}/generate-pdf`, {\n                method: 'POST',\n            });\n            if (!response.ok) {\n                throw new Error('PDF generation failed');\n            }\n            const result = await response.json();\n            if (result.success) {\n                // Download the PDF\n                const link = document.createElement('a');\n                link.href = result.downloadUrl || result.pdfUrl;\n                link.download = result.fileName || `audit-${audit.id}.pdf`;\n                document.body.appendChild(link);\n                link.click();\n                document.body.removeChild(link);\n                toast({\n                    title: \"PDF generated\",\n                    description: \"Audit report downloaded successfully with Eastern Mills branding.\",\n                });\n            }\n        }\n        catch (error) {\n            console.error('PDF generation failed:', error);\n            toast({\n                title: \"PDF generation failed\",\n                description: \"Failed to generate PDF report. Please try again.\",\n                variant: \"destructive\",\n            });\n        }\n    };\n    const scoreData = calculateScore();\n    const currentPart = audit.parts?.[currentPartIndex];\n    const isReadOnly = audit.status === 'submitted';\n    return (_jsxs(\"div\", { className: \"space-y-6 relative\", children: [isSubmitting && (_jsx(\"div\", { className: \"fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center\", children: _jsxs(\"div\", { className: \"bg-white p-6 rounded-lg shadow-lg flex flex-col items-center gap-4\", children: [_jsx(\"div\", { className: \"animate-spin rounded-full h-8 w-8 border-b-2 border-green-600\" }), _jsx(\"p\", { className: \"text-lg font-medium\", children: \"Submitting compliance audit...\" }), _jsx(\"p\", { className: \"text-sm text-gray-600\", children: \"Please wait while we process your submission\" })] }) })), _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsxs(\"div\", { className: \"flex items-center justify-between\", children: [_jsxs(\"div\", { className: \"flex items-center gap-2\", children: [onClose && (_jsx(Button, { variant: \"ghost\", size: \"sm\", onClick: onClose, children: _jsx(ArrowLeft, { className: \"h-4 w-4\" }) })), _jsxs(CardTitle, { className: \"flex items-center gap-2\", children: [_jsx(FileText, { className: \"h-5 w-5\" }), \"ISO 9001:2015 Compliance Audit\", isReadOnly && _jsx(Lock, { className: \"h-4 w-4 text-muted-foreground\" })] })] }), _jsxs(\"div\", { className: \"flex items-center gap-2\", children: [lastSaved && (_jsxs(\"span\", { className: \"text-xs text-muted-foreground flex items-center gap-1\", children: [_jsx(Clock, { className: \"h-3 w-3\" }), \"Saved \", lastSaved.toLocaleTimeString()] })), _jsx(Badge, { variant: audit.status === 'submitted' ? 'default' : 'secondary', children: audit.status === 'submitted' ? 'Submitted' : 'Draft' })] })] }) }), _jsxs(CardContent, { children: [_jsxs(\"div\", { className: \"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\", children: [_jsxs(\"div\", { children: [_jsx(Label, { htmlFor: \"auditDate\", children: \"Audit Date\" }), _jsx(Input, { id: \"auditDate\", type: \"date\", value: audit.auditDate, onChange: (e) => handleBasicInfoChange('auditDate', e.target.value), disabled: isReadOnly })] }), _jsxs(\"div\", { children: [_jsx(Label, { htmlFor: \"auditorName\", children: \"Auditor Name\" }), _jsx(Input, { id: \"auditorName\", value: audit.auditorName, onChange: (e) => handleBasicInfoChange('auditorName', e.target.value), placeholder: \"Enter auditor name\", disabled: isReadOnly })] }), _jsxs(\"div\", { children: [_jsx(Label, { htmlFor: \"company\", children: \"Company\" }), _jsxs(Select, { value: audit.company, onValueChange: (value) => handleBasicInfoChange('company', value), disabled: isReadOnly, children: [_jsx(SelectTrigger, { children: _jsx(SelectValue, {}) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: \"EHI\", children: \"Eastern Home Industries (EHI)\" }), _jsx(SelectItem, { value: \"EMPL\", children: \"Eastern Mills Pvt. Ltd. (EMPL)\" })] })] })] })] }), scoreData.totalItems > 0 && (_jsxs(\"div\", { className: \"grid grid-cols-2 md:grid-cols-5 gap-4 mb-4\", children: [_jsxs(\"div\", { className: \"text-center\", children: [_jsx(\"div\", { className: \"text-2xl font-bold text-green-600\", children: scoreData.yesCount }), _jsx(\"div\", { className: \"text-xs text-muted-foreground\", children: \"Yes\" })] }), _jsxs(\"div\", { className: \"text-center\", children: [_jsx(\"div\", { className: \"text-2xl font-bold text-red-600\", children: scoreData.noCount }), _jsx(\"div\", { className: \"text-xs text-muted-foreground\", children: \"No\" })] }), _jsxs(\"div\", { className: \"text-center\", children: [_jsx(\"div\", { className: \"text-2xl font-bold text-gray-600\", children: scoreData.naCount }), _jsx(\"div\", { className: \"text-xs text-muted-foreground\", children: \"N/A\" })] }), _jsxs(\"div\", { className: \"text-center\", children: [_jsx(\"div\", { className: \"text-2xl font-bold\", children: scoreData.applicableItems }), _jsx(\"div\", { className: \"text-xs text-muted-foreground\", children: \"Applicable\" })] }), _jsxs(\"div\", { className: \"text-center\", children: [_jsxs(\"div\", { className: `text-2xl font-bold ${scoreData.score >= 90 ? 'text-green-600' :\n                                                    scoreData.score >= 70 ? 'text-yellow-600' : 'text-red-600'}`, children: [scoreData.score, \"%\"] }), _jsx(\"div\", { className: \"text-xs text-muted-foreground\", children: \"Score\" })] })] }))] })] }), currentPart && (_jsxs(Card, { children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: \"flex items-center justify-between\", children: [_jsx(\"span\", { children: currentPart.title }), _jsxs(\"span\", { className: \"text-sm text-muted-foreground\", children: [\"Part \", currentPartIndex + 1, \" of \", audit.parts?.length || 0] })] }) }), _jsxs(CardContent, { className: \"space-y-6\", children: [currentPart.items.map((item, itemIndex) => (_jsx(\"div\", { className: \"border rounded-lg p-4 space-y-4\", children: _jsx(\"div\", { className: \"flex items-start justify-between\", children: _jsxs(\"div\", { className: \"flex-1\", children: [_jsxs(\"h4\", { className: \"font-medium mb-2\", children: [item.id, \": \", item.question] }), _jsx(\"div\", { className: \"flex gap-2 mb-3\", children: ['Yes', 'No', 'NA'].map((response) => (_jsxs(Button, { size: \"sm\", variant: item.response === response ? 'default' : 'outline', className: item.response === response\n                                                        ? response === 'Yes' ? 'bg-green-600 hover:bg-green-700' :\n                                                            response === 'No' ? 'bg-red-600 hover:bg-red-700' :\n                                                                'bg-gray-600 hover:bg-gray-700'\n                                                        : '', onClick: () => !isReadOnly && handleItemResponse(currentPart.id, item.id, response), disabled: isReadOnly, children: [response === 'Yes' && _jsx(CheckCircle, { className: \"h-3 w-3 mr-1\" }), response === 'No' && _jsx(XCircle, { className: \"h-3 w-3 mr-1\" }), response === 'NA' && _jsx(AlertCircle, { className: \"h-3 w-3 mr-1\" }), response] }, response))) }), _jsxs(\"div\", { className: \"mb-3\", children: [_jsx(Label, { htmlFor: `remark-${item.id}`, className: \"text-xs\", children: \"Remarks\" }), _jsx(Textarea, { id: `remark-${item.id}`, value: item.remark, onChange: (e) => !isReadOnly && handleItemRemark(currentPart.id, item.id, e.target.value), placeholder: \"Add any remarks or observations...\", rows: 2, disabled: isReadOnly })] }), _jsx(MultiImageUpload, { images: item.evidenceImages, onImagesChange: (images) => !isReadOnly && handleItemImages(currentPart.id, item.id, images), maxImages: 5, title: `Evidence for ${item.id}`, className: isReadOnly ? 'opacity-60 pointer-events-none' : '', auditId: audit.id, questionCode: item.id })] }) }) }, item.id))), _jsxs(\"div\", { className: \"flex items-center justify-between pt-4\", children: [_jsx(Button, { variant: \"outline\", onClick: () => setCurrentPartIndex(Math.max(0, currentPartIndex - 1)), disabled: currentPartIndex === 0, children: \"Previous Part\" }), _jsxs(\"div\", { className: \"flex gap-2\", children: [!isReadOnly && (_jsx(Button, { onClick: handleSaveDraft, disabled: isUpdating || isCreating, variant: \"outline\", children: isUpdating || isCreating ? (_jsxs(_Fragment, { children: [_jsx(\"div\", { className: \"animate-spin rounded-full h-4 w-4 border-b-2 border-gray-900 mr-2\" }), \"Saving...\"] })) : (_jsxs(_Fragment, { children: [_jsx(Save, { className: \"h-4 w-4 mr-2\" }), \"Save Draft\"] })) })), currentPartIndex === (audit.parts?.length || 1) - 1 ? (isReadOnly ? (_jsxs(Button, { onClick: generatePDF, variant: \"outline\", children: [_jsx(Download, { className: \"h-4 w-4 mr-2\" }), \"Download PDF\"] })) : (_jsx(Button, { onClick: handleSubmitAudit, disabled: isSubmitting, className: \"bg-green-600 hover:bg-green-700\", children: isSubmitting ? (_jsxs(_Fragment, { children: [_jsx(\"div\", { className: \"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\" }), \"Submitting...\"] })) : (_jsxs(_Fragment, { children: [_jsx(Send, { className: \"h-4 w-4 mr-2\" }), \"Submit Report\"] })) }))) : (_jsx(Button, { onClick: () => setCurrentPartIndex(currentPartIndex + 1), disabled: currentPartIndex >= (audit.parts?.length || 1) - 1, children: \"Next Part\" }))] })] })] })] }))] }));\n}\n",
      "size": 23969
    },
    {
      "path": "client/src/components/AuditFormV2.tsx",
      "content": "import React, { useState } from 'react';\nimport { Button } from './ui/button';\nimport { Input } from './ui/input';\nimport { Label } from './ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';\nimport { Textarea } from './ui/textarea';\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\nimport { Badge } from './ui/badge';\nimport { Upload, X, Save, Send } from 'lucide-react';\nimport { useToast } from '../hooks/use-toast';\nimport { db } from '../lib/firebase';\nimport { collection, addDoc, serverTimestamp } from 'firebase/firestore';\n\ninterface ChecklistItem {\n  code: string;\n  question: string;\n  response?: 'Yes' | 'No' | 'NA';\n  remark?: string;\n  evidence: string[];\n}\n\ninterface AuditData {\n  auditDate: string;\n  company: 'EHI' | 'EMPL';\n  auditor: string;\n  status: 'draft' | 'submitted';\n  checklist: ChecklistItem[];\n  createdAt: string;\n  submittedAt?: string;\n}\n\nconst CHECKLIST_TEMPLATE: ChecklistItem[] = [\n  // Design Control (C1-C7)\n  { code: 'C1', question: 'Are design and development procedures established?', evidence: [] },\n  { code: 'C2', question: 'Are design input requirements identified and reviewed?', evidence: [] },\n  { code: 'C3', question: 'Are design reviews conducted at key stages?', evidence: [] },\n  { code: 'C4', question: 'Does design output include all necessary production info?', evidence: [] },\n  { code: 'C5', question: 'Are design changes verified and controlled?', evidence: [] },\n  { code: 'C6', question: 'Is prototype or pilot testing done before production?', evidence: [] },\n  { code: 'C7', question: 'Are design personnel competent and qualified?', evidence: [] },\n  \n  // Purchasing Control (C8-C12)\n  { code: 'C8', question: 'Are suppliers evaluated and approved before ordering?', evidence: [] },\n  { code: 'C9', question: 'Are materials purchased from approved sources?', evidence: [] },\n  { code: 'C10', question: 'Are product specs and requirements agreed with suppliers?', evidence: [] },\n  { code: 'C11', question: 'Is supplier performance monitored regularly?', evidence: [] },\n  { code: 'C12', question: 'Are purchase orders clear and complete?', evidence: [] },\n  \n  // Storage Management (C13-C17)\n  { code: 'C13', question: 'Are materials stored in appropriate conditions?', evidence: [] },\n  { code: 'C14', question: 'Is inventory management system in place?', evidence: [] },\n  { code: 'C15', question: 'Are materials protected from damage/deterioration?', evidence: [] },\n  { code: 'C16', question: 'Is FIFO (First In, First Out) system implemented?', evidence: [] },\n  { code: 'C17', question: 'Are storage areas clean and organized?', evidence: [] },\n  \n  // Incoming Inspection (C18-C25)\n  { code: 'C18', question: 'Are all incoming materials inspected?', evidence: [] },\n  { code: 'C19', question: 'Are inspection criteria clearly defined?', evidence: [] },\n  { code: 'C20', question: 'Is inspection equipment calibrated?', evidence: [] },\n  { code: 'C21', question: 'Are inspection records maintained?', evidence: [] },\n  { code: 'C22', question: 'Is non-conforming material identified and segregated?', evidence: [] },\n  { code: 'C23', question: 'Are suppliers notified of quality issues?', evidence: [] },\n  { code: 'C24', question: 'Is incoming material traceability maintained?', evidence: [] },\n  { code: 'C25', question: 'Are inspection personnel trained and competent?', evidence: [] },\n];\n\nexport default function AuditFormV2() {\n  const { toast } = useToast();\n  const [loading, setLoading] = useState(false);\n\n  // Hardcoded test button function\n  const handleQuickSave = async () => {\n    try {\n      const checklist = [\n        {\n          code: \"C1\",\n          question: \"Are design and development procedures established?\",\n          response: \"Yes\",\n          remark: \"Manually inserted test\",\n          evidence: [\"https://example.com/test.jpg\"]\n        },\n        {\n          code: \"C2\", \n          question: \"Are design inputs properly documented?\",\n          response: \"No\",\n          remark: \"Nothing here\",\n          evidence: []\n        }\n      ];\n\n      const docRef = await addDoc(collection(db, \"audit\"), {\n        auditDate: \"2025-07-28\",\n        auditor: \"Abdul (test)\",\n        company: \"EHI\",\n        status: \"draft\",\n        checklist,\n        createdAt: serverTimestamp()\n      });\n\n      console.log('✅ Hardcoded audit saved with ID:', docRef.id);\n      \n      // Emit custom event to update dashboard\n      window.dispatchEvent(new CustomEvent('auditSaved'));\n      \n      alert(\"✅ Manual audit saved\");\n      toast({\n        title: \"Test Audit Saved\",\n        description: \"Hardcoded audit successfully saved to Firebase\",\n      });\n    } catch (error) {\n      console.error('❌ Error saving test audit:', error);\n      alert(\"❌ Error saving test audit: \" + (error instanceof Error ? error.message : 'Unknown error'));\n    }\n  };\n  const [auditData, setAuditData] = useState<AuditData>({\n    auditDate: new Date().toISOString().split('T')[0],\n    company: 'EHI',\n    auditor: '',\n    status: 'draft',\n    checklist: CHECKLIST_TEMPLATE,\n    createdAt: new Date().toISOString()\n  });\n\n  const updateChecklistItem = (code: string, field: keyof ChecklistItem, value: any) => {\n    setAuditData(prev => ({\n      ...prev,\n      checklist: prev.checklist.map(item =>\n        item.code === code ? { ...item, [field]: value } : item\n      )\n    }));\n  };\n\n  const handleImageUpload = async (code: string, file: File) => {\n    try {\n      console.log('📸 Starting image upload for code:', code);\n      \n      // Check file size (limit to 2MB)\n      if (file.size > 2 * 1024 * 1024) {\n        toast({\n          title: \"File Too Large\",\n          description: \"Please select an image smaller than 2MB\",\n          variant: \"destructive\"\n        });\n        return;\n      }\n\n      // Convert to base64 with compression\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        const base64 = e.target?.result as string;\n        \n        // Create a compressed version\n        const img = new Image();\n        img.onload = () => {\n          const canvas = document.createElement('canvas');\n          const ctx = canvas.getContext('2d')!;\n          \n          // Set max dimensions\n          const maxWidth = 400;\n          const maxHeight = 300;\n          let { width, height } = img;\n          \n          // Calculate new dimensions\n          if (width > height) {\n            if (width > maxWidth) {\n              height = (height * maxWidth) / width;\n              width = maxWidth;\n            }\n          } else {\n            if (height > maxHeight) {\n              width = (width * maxHeight) / height;\n              height = maxHeight;\n            }\n          }\n          \n          canvas.width = width;\n          canvas.height = height;\n          ctx.drawImage(img, 0, 0, width, height);\n          \n          // Convert to base64 with compression\n          const compressedBase64 = canvas.toDataURL('image/jpeg', 0.7);\n          \n          console.log('📸 Image compressed and ready for upload');\n          updateChecklistItem(code, 'evidence', [...(auditData.checklist.find(item => item.code === code)?.evidence || []), compressedBase64]);\n          \n          toast({\n            title: \"Image Uploaded\",\n            description: \"Evidence image added successfully\",\n            variant: \"default\"\n          });\n        };\n        img.src = base64;\n      };\n      reader.readAsDataURL(file);\n    } catch (error) {\n      console.error('❌ Image upload error:', error);\n      toast({\n        title: \"Upload Error\",\n        description: \"Failed to upload image\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const removeEvidence = (code: string, index: number) => {\n    const item = auditData.checklist.find(item => item.code === code);\n    if (item) {\n      const newEvidence = item.evidence.filter((_, i) => i !== index);\n      updateChecklistItem(code, 'evidence', newEvidence);\n    }\n  };\n\n  const saveAudit = async (status: 'draft' | 'submitted') => {\n    if (!auditData.auditor.trim()) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Auditor name is required\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const dataToSave = {\n        ...auditData,\n        status,\n        submittedAt: status === 'submitted' ? new Date().toISOString() : undefined\n      };\n\n      console.log('📋 Flattened checklist before saving:', dataToSave.checklist);\n      console.log('📊 Checklist items with evidence:', dataToSave.checklist.filter(item => item.evidence.length > 0));\n\n      const response = await fetch('/api/audit', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(dataToSave)\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to save audit');\n      }\n\n      const result = await response.json();\n      console.log('✅ Audit save result:', result);\n      \n      toast({\n        title: \"Success\",\n        description: status === 'draft' ? `Draft saved successfully (ID: ${result.id})` : \"Audit submitted successfully\",\n        variant: \"default\"\n      });\n\n      // Emit custom event to notify parent components\n      window.dispatchEvent(new CustomEvent('auditSaved', { \n        detail: { id: result.id, status, auditData: dataToSave } \n      }));\n\n      if (status === 'submitted') {\n        // Reset form after submission\n        setAuditData({\n          auditDate: new Date().toISOString().split('T')[0],\n          company: 'EHI',\n          auditor: '',\n          status: 'draft',\n          checklist: CHECKLIST_TEMPLATE,\n          createdAt: new Date().toISOString()\n        });\n      }\n\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save audit\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getResponseColor = (response?: string) => {\n    switch (response) {\n      case 'Yes': return 'bg-green-100 text-green-800';\n      case 'No': return 'bg-red-100 text-red-800';\n      case 'NA': return 'bg-gray-100 text-gray-800';\n      default: return 'bg-gray-50 text-gray-500';\n    }\n  };\n\n  const completedItems = auditData.checklist.filter(item => item.response).length;\n  const progressPercentage = Math.round((completedItems / auditData.checklist.length) * 100);\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-6 space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <span>ISO 9001:2015 Compliance Audit Form V2</span>\n            <Badge variant=\"outline\">\n              {completedItems}/{auditData.checklist.length} Complete ({progressPercentage}%)\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {/* Basic Information */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"auditDate\">Audit Date</Label>\n              <Input\n                id=\"auditDate\"\n                type=\"date\"\n                value={auditData.auditDate}\n                onChange={(e) => setAuditData(prev => ({ ...prev, auditDate: e.target.value }))}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"company\">Company</Label>\n              <Select value={auditData.company} onValueChange={(value: 'EHI' | 'EMPL') => setAuditData(prev => ({ ...prev, company: value }))}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"EHI\">Eastern Home Industries</SelectItem>\n                  <SelectItem value=\"EMPL\">Eastern Mills Pvt. Ltd.</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"auditor\">Auditor Name</Label>\n              <Input\n                id=\"auditor\"\n                value={auditData.auditor}\n                onChange={(e) => setAuditData(prev => ({ ...prev, auditor: e.target.value }))}\n                placeholder=\"Enter auditor name\"\n              />\n            </div>\n          </div>\n\n          {/* Progress Bar */}\n          <div className=\"w-full bg-gray-200 rounded-full h-2\">\n            <div \n              className=\"bg-blue-600 h-2 rounded-full transition-all\" \n              style={{ width: `${progressPercentage}%` }}\n            />\n          </div>\n\n          {/* Checklist Items */}\n          <div className=\"space-y-4\">\n            {auditData.checklist.map((item, index) => (\n              <Card key={item.code} className=\"border-l-4 border-l-blue-500\">\n                <CardContent className=\"pt-4\">\n                  <div className=\"flex items-start justify-between mb-3\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <Badge variant=\"outline\">{item.code}</Badge>\n                        {item.response && (\n                          <Badge className={getResponseColor(item.response)}>\n                            {item.response}\n                          </Badge>\n                        )}\n                      </div>\n                      <p className=\"text-sm font-medium text-gray-900\">{item.question}</p>\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    {/* Response Selection */}\n                    <div className=\"space-y-2\">\n                      <Label>Response</Label>\n                      <Select \n                        value={item.response || ''} \n                        onValueChange={(value: 'Yes' | 'No' | 'NA') => updateChecklistItem(item.code, 'response', value)}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select response\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"Yes\">Yes</SelectItem>\n                          <SelectItem value=\"No\">No</SelectItem>\n                          <SelectItem value=\"NA\">N/A</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    {/* Evidence Upload */}\n                    <div className=\"space-y-2\">\n                      <Label>Evidence Images</Label>\n                      <div className=\"flex items-center gap-2\">\n                        <label className=\"flex items-center gap-2 px-3 py-2 border border-gray-300 rounded-md cursor-pointer hover:bg-gray-50\">\n                          <Upload className=\"h-4 w-4\" />\n                          <span className=\"text-sm\">Upload</span>\n                          <input\n                            type=\"file\"\n                            accept=\"image/*\"\n                            multiple\n                            className=\"hidden\"\n                            onChange={(e) => {\n                              const files = Array.from(e.target.files || []);\n                              files.forEach(file => handleImageUpload(item.code, file));\n                            }}\n                          />\n                        </label>\n                        <span className=\"text-sm text-gray-500\">\n                          {item.evidence.length} image(s)\n                        </span>\n                      </div>\n                      \n                      {/* Evidence Preview */}\n                      {item.evidence.length > 0 && (\n                        <div className=\"flex flex-wrap gap-2\">\n                          {item.evidence.map((evidence, evidenceIndex) => (\n                            <div key={evidenceIndex} className=\"relative\">\n                              <img \n                                src={evidence} \n                                alt={`Evidence ${evidenceIndex + 1}`}\n                                className=\"w-16 h-16 object-cover rounded border\"\n                              />\n                              <button\n                                onClick={() => removeEvidence(item.code, evidenceIndex)}\n                                className=\"absolute -top-1 -right-1 bg-red-500 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs hover:bg-red-600\"\n                              >\n                                <X className=\"h-3 w-3\" />\n                              </button>\n                            </div>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Remarks */}\n                  <div className=\"mt-4 space-y-2\">\n                    <Label>Remarks (Optional)</Label>\n                    <Textarea\n                      value={item.remark || ''}\n                      onChange={(e) => updateChecklistItem(item.code, 'remark', e.target.value)}\n                      placeholder=\"Add any remarks or observations...\"\n                      className=\"resize-none\"\n                      rows={2}\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex gap-4 pt-6 border-t\">\n            <Button\n              onClick={handleQuickSave}\n              className=\"bg-blue-600 text-white hover:bg-blue-700\"\n            >\n              Test Manual Save\n            </Button>\n            <Button\n              onClick={() => saveAudit('draft')}\n              disabled={loading}\n              variant=\"outline\"\n              className=\"flex items-center gap-2\"\n            >\n              <Save className=\"h-4 w-4\" />\n              Save Draft\n            </Button>\n            <Button\n              onClick={() => saveAudit('submitted')}\n              disabled={loading || !auditData.auditor.trim()}\n              className=\"flex items-center gap-2\"\n            >\n              <Send className=\"h-4 w-4\" />\n              Submit Audit\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}",
      "size": 18397
    },
    {
      "path": "client/src/components/AuditFormV2.js",
      "content": "import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { Button } from './ui/button';\nimport { Input } from './ui/input';\nimport { Label } from './ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';\nimport { Textarea } from './ui/textarea';\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\nimport { Badge } from './ui/badge';\nimport { Upload, X, Save, Send } from 'lucide-react';\nimport { useToast } from '../hooks/use-toast';\nimport { db } from '../lib/firebase';\nimport { collection, addDoc, serverTimestamp } from 'firebase/firestore';\nconst CHECKLIST_TEMPLATE = [\n    // Design Control (C1-C7)\n    { code: 'C1', question: 'Are design and development procedures established?', evidence: [] },\n    { code: 'C2', question: 'Are design input requirements identified and reviewed?', evidence: [] },\n    { code: 'C3', question: 'Are design reviews conducted at key stages?', evidence: [] },\n    { code: 'C4', question: 'Does design output include all necessary production info?', evidence: [] },\n    { code: 'C5', question: 'Are design changes verified and controlled?', evidence: [] },\n    { code: 'C6', question: 'Is prototype or pilot testing done before production?', evidence: [] },\n    { code: 'C7', question: 'Are design personnel competent and qualified?', evidence: [] },\n    // Purchasing Control (C8-C12)\n    { code: 'C8', question: 'Are suppliers evaluated and approved before ordering?', evidence: [] },\n    { code: 'C9', question: 'Are materials purchased from approved sources?', evidence: [] },\n    { code: 'C10', question: 'Are product specs and requirements agreed with suppliers?', evidence: [] },\n    { code: 'C11', question: 'Is supplier performance monitored regularly?', evidence: [] },\n    { code: 'C12', question: 'Are purchase orders clear and complete?', evidence: [] },\n    // Storage Management (C13-C17)\n    { code: 'C13', question: 'Are materials stored in appropriate conditions?', evidence: [] },\n    { code: 'C14', question: 'Is inventory management system in place?', evidence: [] },\n    { code: 'C15', question: 'Are materials protected from damage/deterioration?', evidence: [] },\n    { code: 'C16', question: 'Is FIFO (First In, First Out) system implemented?', evidence: [] },\n    { code: 'C17', question: 'Are storage areas clean and organized?', evidence: [] },\n    // Incoming Inspection (C18-C25)\n    { code: 'C18', question: 'Are all incoming materials inspected?', evidence: [] },\n    { code: 'C19', question: 'Are inspection criteria clearly defined?', evidence: [] },\n    { code: 'C20', question: 'Is inspection equipment calibrated?', evidence: [] },\n    { code: 'C21', question: 'Are inspection records maintained?', evidence: [] },\n    { code: 'C22', question: 'Is non-conforming material identified and segregated?', evidence: [] },\n    { code: 'C23', question: 'Are suppliers notified of quality issues?', evidence: [] },\n    { code: 'C24', question: 'Is incoming material traceability maintained?', evidence: [] },\n    { code: 'C25', question: 'Are inspection personnel trained and competent?', evidence: [] },\n];\nexport default function AuditFormV2() {\n    const { toast } = useToast();\n    const [loading, setLoading] = useState(false);\n    // Hardcoded test button function\n    const handleQuickSave = async () => {\n        try {\n            const checklist = [\n                {\n                    code: \"C1\",\n                    question: \"Are design and development procedures established?\",\n                    response: \"Yes\",\n                    remark: \"Manually inserted test\",\n                    evidence: [\"https://example.com/test.jpg\"]\n                },\n                {\n                    code: \"C2\",\n                    question: \"Are design inputs properly documented?\",\n                    response: \"No\",\n                    remark: \"Nothing here\",\n                    evidence: []\n                }\n            ];\n            const docRef = await addDoc(collection(db, \"audit\"), {\n                auditDate: \"2025-07-28\",\n                auditor: \"Abdul (test)\",\n                company: \"EHI\",\n                status: \"draft\",\n                checklist,\n                createdAt: serverTimestamp()\n            });\n            console.log('✅ Hardcoded audit saved with ID:', docRef.id);\n            // Emit custom event to update dashboard\n            window.dispatchEvent(new CustomEvent('auditSaved'));\n            alert(\"✅ Manual audit saved\");\n            toast({\n                title: \"Test Audit Saved\",\n                description: \"Hardcoded audit successfully saved to Firebase\",\n            });\n        }\n        catch (error) {\n            console.error('❌ Error saving test audit:', error);\n            alert(\"❌ Error saving test audit: \" + (error instanceof Error ? error.message : 'Unknown error'));\n        }\n    };\n    const [auditData, setAuditData] = useState({\n        auditDate: new Date().toISOString().split('T')[0],\n        company: 'EHI',\n        auditor: '',\n        status: 'draft',\n        checklist: CHECKLIST_TEMPLATE,\n        createdAt: new Date().toISOString()\n    });\n    const updateChecklistItem = (code, field, value) => {\n        setAuditData(prev => ({\n            ...prev,\n            checklist: prev.checklist.map(item => item.code === code ? { ...item, [field]: value } : item)\n        }));\n    };\n    const handleImageUpload = async (code, file) => {\n        try {\n            console.log('📸 Starting image upload for code:', code);\n            // Check file size (limit to 2MB)\n            if (file.size > 2 * 1024 * 1024) {\n                toast({\n                    title: \"File Too Large\",\n                    description: \"Please select an image smaller than 2MB\",\n                    variant: \"destructive\"\n                });\n                return;\n            }\n            // Convert to base64 with compression\n            const reader = new FileReader();\n            reader.onload = (e) => {\n                const base64 = e.target?.result;\n                // Create a compressed version\n                const img = new Image();\n                img.onload = () => {\n                    const canvas = document.createElement('canvas');\n                    const ctx = canvas.getContext('2d');\n                    // Set max dimensions\n                    const maxWidth = 400;\n                    const maxHeight = 300;\n                    let { width, height } = img;\n                    // Calculate new dimensions\n                    if (width > height) {\n                        if (width > maxWidth) {\n                            height = (height * maxWidth) / width;\n                            width = maxWidth;\n                        }\n                    }\n                    else {\n                        if (height > maxHeight) {\n                            width = (width * maxHeight) / height;\n                            height = maxHeight;\n                        }\n                    }\n                    canvas.width = width;\n                    canvas.height = height;\n                    ctx.drawImage(img, 0, 0, width, height);\n                    // Convert to base64 with compression\n                    const compressedBase64 = canvas.toDataURL('image/jpeg', 0.7);\n                    console.log('📸 Image compressed and ready for upload');\n                    updateChecklistItem(code, 'evidence', [...(auditData.checklist.find(item => item.code === code)?.evidence || []), compressedBase64]);\n                    toast({\n                        title: \"Image Uploaded\",\n                        description: \"Evidence image added successfully\",\n                        variant: \"default\"\n                    });\n                };\n                img.src = base64;\n            };\n            reader.readAsDataURL(file);\n        }\n        catch (error) {\n            console.error('❌ Image upload error:', error);\n            toast({\n                title: \"Upload Error\",\n                description: \"Failed to upload image\",\n                variant: \"destructive\"\n            });\n        }\n    };\n    const removeEvidence = (code, index) => {\n        const item = auditData.checklist.find(item => item.code === code);\n        if (item) {\n            const newEvidence = item.evidence.filter((_, i) => i !== index);\n            updateChecklistItem(code, 'evidence', newEvidence);\n        }\n    };\n    const saveAudit = async (status) => {\n        if (!auditData.auditor.trim()) {\n            toast({\n                title: \"Validation Error\",\n                description: \"Auditor name is required\",\n                variant: \"destructive\"\n            });\n            return;\n        }\n        setLoading(true);\n        try {\n            const dataToSave = {\n                ...auditData,\n                status,\n                submittedAt: status === 'submitted' ? new Date().toISOString() : undefined\n            };\n            console.log('📋 Flattened checklist before saving:', dataToSave.checklist);\n            console.log('📊 Checklist items with evidence:', dataToSave.checklist.filter(item => item.evidence.length > 0));\n            const response = await fetch('/api/audit', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify(dataToSave)\n            });\n            if (!response.ok) {\n                throw new Error('Failed to save audit');\n            }\n            const result = await response.json();\n            console.log('✅ Audit save result:', result);\n            toast({\n                title: \"Success\",\n                description: status === 'draft' ? `Draft saved successfully (ID: ${result.id})` : \"Audit submitted successfully\",\n                variant: \"default\"\n            });\n            // Emit custom event to notify parent components\n            window.dispatchEvent(new CustomEvent('auditSaved', {\n                detail: { id: result.id, status, auditData: dataToSave }\n            }));\n            if (status === 'submitted') {\n                // Reset form after submission\n                setAuditData({\n                    auditDate: new Date().toISOString().split('T')[0],\n                    company: 'EHI',\n                    auditor: '',\n                    status: 'draft',\n                    checklist: CHECKLIST_TEMPLATE,\n                    createdAt: new Date().toISOString()\n                });\n            }\n        }\n        catch (error) {\n            toast({\n                title: \"Error\",\n                description: \"Failed to save audit\",\n                variant: \"destructive\"\n            });\n        }\n        finally {\n            setLoading(false);\n        }\n    };\n    const getResponseColor = (response) => {\n        switch (response) {\n            case 'Yes': return 'bg-green-100 text-green-800';\n            case 'No': return 'bg-red-100 text-red-800';\n            case 'NA': return 'bg-gray-100 text-gray-800';\n            default: return 'bg-gray-50 text-gray-500';\n        }\n    };\n    const completedItems = auditData.checklist.filter(item => item.response).length;\n    const progressPercentage = Math.round((completedItems / auditData.checklist.length) * 100);\n    return (_jsx(\"div\", { className: \"max-w-4xl mx-auto p-6 space-y-6\", children: _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: \"flex items-center justify-between\", children: [_jsx(\"span\", { children: \"ISO 9001:2015 Compliance Audit Form V2\" }), _jsxs(Badge, { variant: \"outline\", children: [completedItems, \"/\", auditData.checklist.length, \" Complete (\", progressPercentage, \"%)\"] })] }) }), _jsxs(CardContent, { className: \"space-y-6\", children: [_jsxs(\"div\", { className: \"grid grid-cols-1 md:grid-cols-3 gap-4\", children: [_jsxs(\"div\", { className: \"space-y-2\", children: [_jsx(Label, { htmlFor: \"auditDate\", children: \"Audit Date\" }), _jsx(Input, { id: \"auditDate\", type: \"date\", value: auditData.auditDate, onChange: (e) => setAuditData(prev => ({ ...prev, auditDate: e.target.value })) })] }), _jsxs(\"div\", { className: \"space-y-2\", children: [_jsx(Label, { htmlFor: \"company\", children: \"Company\" }), _jsxs(Select, { value: auditData.company, onValueChange: (value) => setAuditData(prev => ({ ...prev, company: value })), children: [_jsx(SelectTrigger, { children: _jsx(SelectValue, {}) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: \"EHI\", children: \"Eastern Home Industries\" }), _jsx(SelectItem, { value: \"EMPL\", children: \"Eastern Mills Pvt. Ltd.\" })] })] })] }), _jsxs(\"div\", { className: \"space-y-2\", children: [_jsx(Label, { htmlFor: \"auditor\", children: \"Auditor Name\" }), _jsx(Input, { id: \"auditor\", value: auditData.auditor, onChange: (e) => setAuditData(prev => ({ ...prev, auditor: e.target.value })), placeholder: \"Enter auditor name\" })] })] }), _jsx(\"div\", { className: \"w-full bg-gray-200 rounded-full h-2\", children: _jsx(\"div\", { className: \"bg-blue-600 h-2 rounded-full transition-all\", style: { width: `${progressPercentage}%` } }) }), _jsx(\"div\", { className: \"space-y-4\", children: auditData.checklist.map((item, index) => (_jsx(Card, { className: \"border-l-4 border-l-blue-500\", children: _jsxs(CardContent, { className: \"pt-4\", children: [_jsx(\"div\", { className: \"flex items-start justify-between mb-3\", children: _jsxs(\"div\", { className: \"flex-1\", children: [_jsxs(\"div\", { className: \"flex items-center gap-2 mb-2\", children: [_jsx(Badge, { variant: \"outline\", children: item.code }), item.response && (_jsx(Badge, { className: getResponseColor(item.response), children: item.response }))] }), _jsx(\"p\", { className: \"text-sm font-medium text-gray-900\", children: item.question })] }) }), _jsxs(\"div\", { className: \"grid grid-cols-1 md:grid-cols-2 gap-4\", children: [_jsxs(\"div\", { className: \"space-y-2\", children: [_jsx(Label, { children: \"Response\" }), _jsxs(Select, { value: item.response || '', onValueChange: (value) => updateChecklistItem(item.code, 'response', value), children: [_jsx(SelectTrigger, { children: _jsx(SelectValue, { placeholder: \"Select response\" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: \"Yes\", children: \"Yes\" }), _jsx(SelectItem, { value: \"No\", children: \"No\" }), _jsx(SelectItem, { value: \"NA\", children: \"N/A\" })] })] })] }), _jsxs(\"div\", { className: \"space-y-2\", children: [_jsx(Label, { children: \"Evidence Images\" }), _jsxs(\"div\", { className: \"flex items-center gap-2\", children: [_jsxs(\"label\", { className: \"flex items-center gap-2 px-3 py-2 border border-gray-300 rounded-md cursor-pointer hover:bg-gray-50\", children: [_jsx(Upload, { className: \"h-4 w-4\" }), _jsx(\"span\", { className: \"text-sm\", children: \"Upload\" }), _jsx(\"input\", { type: \"file\", accept: \"image/*\", multiple: true, className: \"hidden\", onChange: (e) => {\n                                                                                const files = Array.from(e.target.files || []);\n                                                                                files.forEach(file => handleImageUpload(item.code, file));\n                                                                            } })] }), _jsxs(\"span\", { className: \"text-sm text-gray-500\", children: [item.evidence.length, \" image(s)\"] })] }), item.evidence.length > 0 && (_jsx(\"div\", { className: \"flex flex-wrap gap-2\", children: item.evidence.map((evidence, evidenceIndex) => (_jsxs(\"div\", { className: \"relative\", children: [_jsx(\"img\", { src: evidence, alt: `Evidence ${evidenceIndex + 1}`, className: \"w-16 h-16 object-cover rounded border\" }), _jsx(\"button\", { onClick: () => removeEvidence(item.code, evidenceIndex), className: \"absolute -top-1 -right-1 bg-red-500 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs hover:bg-red-600\", children: _jsx(X, { className: \"h-3 w-3\" }) })] }, evidenceIndex))) }))] })] }), _jsxs(\"div\", { className: \"mt-4 space-y-2\", children: [_jsx(Label, { children: \"Remarks (Optional)\" }), _jsx(Textarea, { value: item.remark || '', onChange: (e) => updateChecklistItem(item.code, 'remark', e.target.value), placeholder: \"Add any remarks or observations...\", className: \"resize-none\", rows: 2 })] })] }) }, item.code))) }), _jsxs(\"div\", { className: \"flex gap-4 pt-6 border-t\", children: [_jsx(Button, { onClick: handleQuickSave, className: \"bg-blue-600 text-white hover:bg-blue-700\", children: \"Test Manual Save\" }), _jsxs(Button, { onClick: () => saveAudit('draft'), disabled: loading, variant: \"outline\", className: \"flex items-center gap-2\", children: [_jsx(Save, { className: \"h-4 w-4\" }), \"Save Draft\"] }), _jsxs(Button, { onClick: () => saveAudit('submitted'), disabled: loading || !auditData.auditor.trim(), className: \"flex items-center gap-2\", children: [_jsx(Send, { className: \"h-4 w-4\" }), \"Submit Audit\"] })] })] })] }) }));\n}\n",
      "size": 16924
    },
    {
      "path": "client/src/components/AuditSaveTest.tsx",
      "content": "import React from 'react';\nimport { firestore as db } from '../lib/firebase';\nimport { collection, addDoc, serverTimestamp } from 'firebase/firestore';\n\nexport default function AuditSaveTest() {\n  const handleSave = async () => {\n    console.log(\"🚀 Starting manual save...\");\n\n    try {\n      const checklist = [\n        {\n          code: \"C1\",\n          question: \"Manual test question\",\n          response: \"Yes\",\n          remark: \"Testing from direct code\",\n          evidence: [\"https://example.com/test.jpg\"]\n        }\n      ];\n\n      console.log('📦 Saving object with checklist:', checklist);\n      console.log('🔥 Firebase db object:', db);\n      console.log('📋 Collection reference:', collection(db, \"audit\"));\n\n      const docRef = await addDoc(collection(db, \"audit\"), {\n        auditDate: \"2025-07-28\",\n        auditor: \"Abdul\",\n        company: \"EHI\",\n        status: \"draft\",\n        checklist,\n        createdAt: serverTimestamp()\n      });\n\n      console.log(\"✅ Successfully saved! Doc ID:\", docRef.id);\n      alert(\"✅ Saved\");\n    } catch (err: any) {\n      console.error(\"❌ SAVE FAILED:\", err);\n      console.error(\"❌ Error name:\", err?.name);\n      console.error(\"❌ Error message:\", err?.message);\n      console.error(\"❌ Error code:\", err?.code);\n      console.error(\"❌ Full error object:\", JSON.stringify(err, null, 2));\n      alert(\"❌ Save failed. See console.\");\n    }\n  };\n\n  return (\n    <div className=\"p-4\">\n      <h2 className=\"text-2xl font-bold mb-4\">Firestore Save Test</h2>\n      <button \n        onClick={handleSave} \n        className=\"bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700\"\n      >\n        Test Manual Save\n      </button>\n    </div>\n  );\n}",
      "size": 1720
    },
    {
      "path": "client/src/components/AuditSaveTest.js",
      "content": "import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { firestore as db } from '../lib/firebase';\nimport { collection, addDoc, serverTimestamp } from 'firebase/firestore';\nexport default function AuditSaveTest() {\n    const handleSave = async () => {\n        console.log(\"🚀 Starting manual save...\");\n        try {\n            const checklist = [\n                {\n                    code: \"C1\",\n                    question: \"Manual test question\",\n                    response: \"Yes\",\n                    remark: \"Testing from direct code\",\n                    evidence: [\"https://example.com/test.jpg\"]\n                }\n            ];\n            console.log('📦 Saving object with checklist:', checklist);\n            console.log('🔥 Firebase db object:', db);\n            console.log('📋 Collection reference:', collection(db, \"audit\"));\n            const docRef = await addDoc(collection(db, \"audit\"), {\n                auditDate: \"2025-07-28\",\n                auditor: \"Abdul\",\n                company: \"EHI\",\n                status: \"draft\",\n                checklist,\n                createdAt: serverTimestamp()\n            });\n            console.log(\"✅ Successfully saved! Doc ID:\", docRef.id);\n            alert(\"✅ Saved\");\n        }\n        catch (err) {\n            console.error(\"❌ SAVE FAILED:\", err);\n            console.error(\"❌ Error name:\", err?.name);\n            console.error(\"❌ Error message:\", err?.message);\n            console.error(\"❌ Error code:\", err?.code);\n            console.error(\"❌ Full error object:\", JSON.stringify(err, null, 2));\n            alert(\"❌ Save failed. See console.\");\n        }\n    };\n    return (_jsxs(\"div\", { className: \"p-4\", children: [_jsx(\"h2\", { className: \"text-2xl font-bold mb-4\", children: \"Firestore Save Test\" }), _jsx(\"button\", { onClick: handleSave, className: \"bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700\", children: \"Test Manual Save\" })] }));\n}\n",
      "size": 1974
    },
    {
      "path": "client/src/pages/AuditTestPage.tsx",
      "content": "import React from 'react';\nimport AuditFormV2 from '@/components/AuditFormV2';\n\nexport default function AuditTestPage() {\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"container mx-auto py-8\">\n        <div className=\"mb-6 text-center\">\n          <h1 className=\"text-3xl font-bold text-gray-900\">\n            Audit Form V2 Test Page\n          </h1>\n          <p className=\"mt-2 text-gray-600\">\n            Testing the new clean checklist[] structure\n          </p>\n        </div>\n        <AuditFormV2 />\n      </div>\n    </div>\n  );\n}",
      "size": 566
    },
    {
      "path": "client/src/pages/AuditTestPage.js",
      "content": "import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport AuditFormV2 from '@/components/AuditFormV2';\nexport default function AuditTestPage() {\n    return (_jsx(\"div\", { className: \"min-h-screen bg-gray-50\", children: _jsxs(\"div\", { className: \"container mx-auto py-8\", children: [_jsxs(\"div\", { className: \"mb-6 text-center\", children: [_jsx(\"h1\", { className: \"text-3xl font-bold text-gray-900\", children: \"Audit Form V2 Test Page\" }), _jsx(\"p\", { className: \"mt-2 text-gray-600\", children: \"Testing the new clean checklist[] structure\" })] }), _jsx(AuditFormV2, {})] }) }));\n}\n",
      "size": 594
    },
    {
      "path": "client/src/hooks/useComplianceAudit.js",
      "content": "import { useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useToast } from './use-toast';\nimport { apiRequest } from '../lib/queryClient';\nexport function useComplianceAudit() {\n    const queryClient = useQueryClient();\n    const { toast } = useToast();\n    // Fetch compliance audits from new clean API\n    const { data: audits = [], isLoading } = useQuery({\n        queryKey: ['/api/audit'],\n        queryFn: async () => {\n            try {\n                console.log('🔄 Fetching audits from new clean API...');\n                const response = await apiRequest('/api/audit');\n                console.log('✅ Clean audit API response:', response);\n                return response.audits || [];\n            }\n            catch (error) {\n                console.error('❌ Error fetching clean audits:', error);\n                return [];\n            }\n        },\n    });\n    // Get draft audits\n    const draftAudits = audits.filter((audit) => audit.status === 'draft');\n    // Get submitted audits - with debugging\n    const submittedAudits = audits.filter((audit) => audit.status === 'submitted');\n    // Debug logging for status tracking\n    useEffect(() => {\n        console.log(`📊 Audit Status Debug:\n    - Total audits: ${audits.length}\n    - Draft audits: ${draftAudits.length}\n    - Submitted audits: ${submittedAudits.length}\n    - Status breakdown:`, audits.map((a) => ({ id: a.id, status: a.status, company: a.company })));\n    }, [audits.length, draftAudits.length, submittedAudits.length]);\n    // Create audit mutation using new clean API\n    const createAuditMutation = useMutation({\n        mutationFn: async (auditData) => {\n            console.log('🆕 Creating audit via clean API:', auditData);\n            const response = await apiRequest('/api/audit', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify(auditData),\n            });\n            return response.id;\n        },\n        onSuccess: () => {\n            queryClient.invalidateQueries({ queryKey: ['/api/audit'] });\n            toast({\n                title: \"Audit created\",\n                description: \"Compliance audit draft created successfully.\",\n            });\n        },\n        onError: (error) => {\n            console.error('❌ Error creating audit:', error);\n            toast({\n                title: \"Error creating audit\",\n                description: \"Failed to create compliance audit. Please try again.\",\n                variant: \"destructive\",\n            });\n        },\n    });\n    // Update audit mutation using new clean API\n    const updateAuditMutation = useMutation({\n        mutationFn: async ({ id, data }) => {\n            console.log('💾 HOOK: Updating audit via clean API', id, 'with data:', data);\n            const response = await apiRequest(`/api/audit/${id}`, {\n                method: 'PUT',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify(data),\n            });\n            console.log('✅ HOOK: Clean audit update successful');\n            return id;\n        },\n        onSuccess: () => {\n            console.log('✅ HOOK: Invalidating cache after successful update');\n            queryClient.invalidateQueries({ queryKey: ['/api/audit'] });\n        },\n        onError: (error) => {\n            console.error('❌ HOOK: Error updating audit:', error);\n            toast({\n                title: \"Error saving audit\",\n                description: \"Failed to save audit changes. Please try again.\",\n                variant: \"destructive\",\n            });\n        },\n    });\n    // Submit audit mutation using new clean API\n    const submitAuditMutation = useMutation({\n        mutationFn: async (id) => {\n            const submittedAt = new Date().toISOString();\n            console.log('🚀 Frontend: Submitting audit via clean API with data:', { status: 'submitted', submittedAt });\n            const response = await apiRequest(`/api/audit/${id}`, {\n                method: 'PUT',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({\n                    status: 'submitted',\n                    submittedAt: submittedAt,\n                }),\n            });\n            return { id, response, submittedAt };\n        },\n        onSuccess: async (result) => {\n            // Force immediate cache refresh using new API key\n            await queryClient.invalidateQueries({ queryKey: ['/api/audit'] });\n            await queryClient.refetchQueries({ queryKey: ['/api/audit'] });\n            // Also update the cache optimistically\n            queryClient.setQueryData(['/api/audit'], (oldData) => {\n                if (!oldData?.audits)\n                    return oldData;\n                return {\n                    ...oldData,\n                    audits: oldData.audits.map((audit) => audit.id === result.id\n                        ? { ...audit, status: 'submitted', submittedAt: result.submittedAt }\n                        : audit)\n                };\n            });\n            console.log('✅ Audit submitted successfully, cache updated');\n            toast({\n                title: \"Audit submitted\",\n                description: \"Compliance audit submitted successfully.\",\n            });\n        },\n        onError: (error) => {\n            console.error('Error submitting audit:', error);\n            toast({\n                title: \"Error submitting audit\",\n                description: \"Failed to submit audit. Please try again.\",\n                variant: \"destructive\",\n            });\n        },\n    });\n    // Get single audit with full data preservation\n    const getAudit = async (id) => {\n        try {\n            // First try to find in current audits list\n            let audit = audits.find((a) => a.id === id);\n            if (!audit) {\n                // If not found locally, fetch directly from server\n                console.log('🔍 Fetching audit from new clean API server:', id);\n                const response = await apiRequest(`/api/audit/${id}`);\n                audit = response.audit;\n            }\n            if (audit) {\n                console.log('📋 Retrieved audit with parts:', audit.parts?.length || 0);\n                // Log sample data to verify preservation\n                if (audit.parts?.[0]?.items?.[0]) {\n                    console.log('📝 Sample item data:', {\n                        response: audit.parts[0].items[0].response,\n                        remark: audit.parts[0].items[0].remark,\n                        images: audit.parts[0].items[0].evidenceImages?.length || 0\n                    });\n                }\n            }\n            return audit || null;\n        }\n        catch (error) {\n            console.error('Error fetching audit:', error);\n            return null;\n        }\n    };\n    // Delete audit mutation using new clean API\n    const deleteAuditMutation = useMutation({\n        mutationFn: async (id) => {\n            const response = await apiRequest(`/api/audit/${id}`, {\n                method: 'DELETE',\n            });\n            return id;\n        },\n        onSuccess: () => {\n            queryClient.invalidateQueries({ queryKey: ['/api/audit'] });\n            toast({\n                title: \"Audit deleted\",\n                description: \"Compliance audit deleted successfully.\",\n            });\n        },\n        onError: (error) => {\n            console.error('Error deleting audit:', error);\n            toast({\n                title: \"Error deleting audit\",\n                description: \"Failed to delete audit. Please try again.\",\n                variant: \"destructive\",\n            });\n        },\n    });\n    // Auto-save function DISABLED to prevent double saves\n    const autoSave = async (id, data) => {\n        console.log('🚫 AUTO-SAVE DISABLED: Preventing double save conflicts');\n        // Auto-save disabled to prevent double save bug\n        // Only manual saves are allowed\n    };\n    return {\n        audits,\n        draftAudits,\n        submittedAudits,\n        isLoading,\n        createAudit: createAuditMutation.mutateAsync,\n        updateAudit: updateAuditMutation.mutateAsync,\n        submitAudit: submitAuditMutation.mutateAsync,\n        deleteAuditMutation,\n        getAudit,\n        autoSave,\n        isCreating: createAuditMutation.isPending,\n        isUpdating: updateAuditMutation.isPending,\n        isSubmitting: submitAuditMutation.isPending,\n    };\n}\n",
      "size": 8571
    },
    {
      "path": "client/src/hooks/useAuditForms.js",
      "content": "import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nconst BASE_URL = import.meta.env.DEV ? 'http://localhost:5000' : '';\nexport function useAuditForms(company, status, auditType) {\n    const queryClient = useQueryClient();\n    const queryParams = new URLSearchParams();\n    if (company)\n        queryParams.append('company', company);\n    if (status)\n        queryParams.append('status', status);\n    if (auditType)\n        queryParams.append('auditType', auditType);\n    const { data: auditForms = [], isLoading, error } = useQuery({\n        queryKey: ['/api/audit-forms', company, status, auditType],\n        queryFn: async () => {\n            const response = await fetch(`${BASE_URL}/api/audit-forms?${queryParams}`);\n            if (!response.ok)\n                throw new Error('Failed to fetch audit forms');\n            return response.json();\n        }\n    });\n    const createMutation = useMutation({\n        mutationFn: async (auditForm) => {\n            const response = await fetch(`${BASE_URL}/api/audit-forms`, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify(auditForm)\n            });\n            if (!response.ok)\n                throw new Error('Failed to create audit form');\n            return response.json();\n        },\n        onSuccess: () => {\n            queryClient.invalidateQueries({ queryKey: ['/api/audit-forms'] });\n        }\n    });\n    const updateMutation = useMutation({\n        mutationFn: async ({ id, ...auditForm }) => {\n            const response = await fetch(`${BASE_URL}/api/audit-forms/${id}`, {\n                method: 'PUT',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify(auditForm)\n            });\n            if (!response.ok)\n                throw new Error('Failed to update audit form');\n            return response.json();\n        },\n        onSuccess: () => {\n            queryClient.invalidateQueries({ queryKey: ['/api/audit-forms'] });\n        }\n    });\n    const deleteMutation = useMutation({\n        mutationFn: async (id) => {\n            const response = await fetch(`${BASE_URL}/api/audit-forms/${id}`, {\n                method: 'DELETE'\n            });\n            if (!response.ok)\n                throw new Error('Failed to delete audit form');\n            return response.json();\n        },\n        onSuccess: () => {\n            queryClient.invalidateQueries({ queryKey: ['/api/audit-forms'] });\n        }\n    });\n    return {\n        auditForms,\n        isLoading,\n        error,\n        createAuditForm: createMutation.mutate,\n        updateAuditForm: updateMutation.mutate,\n        deleteAuditForm: deleteMutation.mutate,\n        isCreating: createMutation.isPending,\n        isUpdating: updateMutation.isPending,\n        isDeleting: deleteMutation.isPending\n    };\n}\nexport function useAuditForm(id) {\n    const { data: auditForm, isLoading, error } = useQuery({\n        queryKey: ['/api/audit-forms', id],\n        queryFn: async () => {\n            const response = await fetch(`${BASE_URL}/api/audit-forms/${id}`);\n            if (!response.ok)\n                throw new Error('Failed to fetch audit form');\n            return response.json();\n        },\n        enabled: !!id\n    });\n    return { auditForm, isLoading, error };\n}\n",
      "size": 3375
    },
    {
      "path": "server/routes/audits.ts",
      "content": "import { Router } from 'express';\nimport { generateAuditPDF, auditPDFGenerator } from '../auditPdfGenerator';\nimport { generateComplianceAuditPDF } from '../pdfMaster';\n\nimport fs from 'fs/promises';\nimport path from 'path';\n\nconst router = Router();\n\n// Import Firebase admin\nimport { adminDb } from '../firestoreHelpers.js';\n\n// Helper function to convert Firestore timestamp to ISO string\nfunction convertFirestoreDate(timestamp: any): string | undefined {\n  if (!timestamp) return undefined;\n  if (typeof timestamp === 'string') return timestamp;\n  if (timestamp.toDate) return timestamp.toDate().toISOString();\n  if (timestamp._seconds) return new Date(timestamp._seconds * 1000).toISOString();\n  return undefined;\n}\n\n/**\n * Generate PDF for compliance audit\n * GET /api/audits/compliance/:id/pdf\n */\nrouter.get('/compliance/:id/pdf', async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    if (!id) {\n      return res.status(400).json({\n        success: false,\n        error: 'Audit ID is required'\n      });\n    }\n\n    console.log(`📄 Generating PDF for compliance audit ID: ${id}`);\n\n    // Fetch audit data from Firebase\n    const auditDoc = await adminDb.collection('complianceAudits').doc(id).get();\n    \n    if (!auditDoc.exists) {\n      return res.status(404).json({\n        success: false,\n        error: 'Audit not found'\n      });\n    }\n\n    const auditData = auditDoc.data();\n    \n    if (!auditData) {\n      return res.status(404).json({\n        success: false,\n        error: 'Audit data not found'\n      });\n    }\n    \n    // Use fallback PDF generator for reliable generation\n    const { generateComplianceAuditPDFFallback } = await import('../pdfFallback');\n    const pdfBuffer = await generateComplianceAuditPDFFallback(auditData);\n    \n    // Create filename with audit details\n    const fileName = `compliance-audit-${auditData.company}-${id}-${Date.now()}.pdf`;\n    const uploadsDir = path.join(process.cwd(), 'uploads');\n    \n    // Ensure uploads directory exists\n    try {\n      await fs.access(uploadsDir);\n    } catch {\n      await fs.mkdir(uploadsDir, { recursive: true });\n    }\n    \n    // Save PDF to file\n    const filePath = path.join(uploadsDir, fileName);\n    await fs.writeFile(filePath, pdfBuffer);\n    \n    console.log(`✅ PDF generated successfully: ${fileName} (${Math.round(pdfBuffer.length / 1024)}KB)`);\n    \n    // Set headers for PDF download\n    res.setHeader('Content-Type', 'application/pdf');\n    res.setHeader('Content-Disposition', `attachment; filename=\"${fileName}\"`);\n    res.setHeader('Content-Length', pdfBuffer.length.toString());\n    \n    // Send the PDF buffer directly\n    res.send(pdfBuffer);\n  } catch (error) {\n    console.error('❌ Error generating compliance audit PDF:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'PDF generation failed'\n    });\n  }\n});\n\n/**\n * Generate PDF for specific audit\n * POST /api/audits/:id/generate-pdf\n */\nrouter.post('/:id/generate-pdf', async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    if (!id) {\n      return res.status(400).json({\n        success: false,\n        error: 'Audit ID is required'\n      });\n    }\n\n    console.log(`Generating PDF for audit ID: ${id}`);\n\n    const result = await generateAuditPDF(id);\n\n    if (result.success) {\n      res.json({\n        success: true,\n        message: 'PDF generated successfully',\n        pdfUrl: result.pdfUrl,\n        downloadUrl: result.downloadUrl\n      });\n    } else {\n      res.status(500).json({\n        success: false,\n        error: result.error || 'Failed to generate PDF'\n      });\n    }\n  } catch (error) {\n    console.error('Error in PDF generation route:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Internal server error'\n    });\n  }\n});\n\n/**\n * Get previous audit reports for a company\n * GET /api/audits/previous/:company\n */\nrouter.get('/previous/:company', async (req, res) => {\n  try {\n    const { company } = req.params;\n    const limit = parseInt(req.query.limit as string) || 10;\n\n    if (!company) {\n      return res.status(400).json({\n        success: false,\n        error: 'Company parameter is required'\n      });\n    }\n\n    const previousAudits = await auditPDFGenerator.getPreviousAudits(company, limit);\n\n    res.json({\n      success: true,\n      audits: previousAudits\n    });\n  } catch (error) {\n    console.error('Error fetching previous audits:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Internal server error'\n    });\n  }\n});\n\n/**\n * View audit report as HTML\n * GET /api/audits/compliance/:id/view\n */\nrouter.get('/compliance/:id/view', async (req, res) => {\n  try {\n    if (!adminDb) {\n      return res.status(500).json({\n        success: false,\n        error: 'Firebase admin not available'\n      });\n    }\n\n    const { id } = req.params;\n    \n    const auditDoc = await adminDb.collection('complianceAudits').doc(id).get();\n    \n    if (!auditDoc.exists) {\n      return res.status(404).json({\n        success: false,\n        error: 'Audit not found'\n      });\n    }\n    \n    const auditData = auditDoc.data();\n    \n    // Generate HTML report\n    const htmlReport = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Compliance Audit Report - ${auditData?.company === 'EHI' ? 'Eastern Home Industries' : 'Eastern Mills Pvt. Ltd.'}</title>\n    <style>\n        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }\n        .container { max-width: 1000px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }\n        .header { text-align: center; border-bottom: 3px solid #003366; padding-bottom: 20px; margin-bottom: 30px; }\n        .company-name { font-size: 24px; font-weight: bold; color: #003366; margin-bottom: 5px; }\n        .report-title { font-size: 20px; color: #666; margin-bottom: 10px; }\n        .audit-info { display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 30px; }\n        .info-card { background: #f8f9fa; padding: 15px; border-radius: 6px; border-left: 4px solid #007bff; }\n        .info-label { font-weight: bold; color: #333; }\n        .info-value { color: #666; margin-top: 5px; }\n        .score-section { text-align: center; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; border-radius: 8px; margin-bottom: 30px; }\n        .score-value { font-size: 48px; font-weight: bold; }\n        .score-label { font-size: 18px; margin-top: 10px; }\n        .parts-section { margin-top: 30px; }\n        .part { margin-bottom: 25px; border: 1px solid #e0e0e0; border-radius: 8px; overflow: hidden; }\n        .part-header { background: #003366; color: white; padding: 15px; font-weight: bold; font-size: 16px; }\n        .part-content { padding: 20px; }\n        .checklist-item { margin-bottom: 15px; padding: 15px; border-left: 4px solid #e0e0e0; background: #f9f9f9; }\n        .question { font-weight: bold; color: #333; margin-bottom: 8px; }\n        .response { display: inline-block; padding: 4px 12px; border-radius: 20px; font-size: 12px; font-weight: bold; }\n        .response.yes { background: #d4edda; color: #155724; }\n        .response.no { background: #f8d7da; color: #721c24; }\n        .response.na { background: #e2e3e5; color: #383d41; }\n        .remark { margin-top: 8px; font-style: italic; color: #666; }\n        .evidence { margin-top: 10px; }\n        .evidence-image { max-width: 150px; max-height: 150px; margin: 5px; border-radius: 4px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }\n        .summary-stats { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-bottom: 30px; }\n        .stat-card { text-align: center; padding: 15px; background: #f8f9fa; border-radius: 6px; border-top: 3px solid #007bff; }\n        .stat-number { font-size: 24px; font-weight: bold; color: #007bff; }\n        .stat-label { color: #666; margin-top: 5px; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <div class=\"company-name\">${auditData?.company === 'EHI' ? 'Eastern Home Industries' : 'Eastern Mills Pvt. Ltd.'}</div>\n            <div class=\"report-title\">ISO 9001:2015 Compliance Audit Report</div>\n        </div>\n        \n        <div class=\"audit-info\">\n            <div class=\"info-card\">\n                <div class=\"info-label\">Auditor</div>\n                <div class=\"info-value\">${auditData?.auditorName || 'Quality Auditor'}</div>\n            </div>\n            <div class=\"info-card\">\n                <div class=\"info-label\">Date</div>\n                <div class=\"info-value\">${auditData?.auditDate || new Date().toLocaleDateString()}</div>\n            </div>\n            <div class=\"info-card\">\n                <div class=\"info-label\">Location</div>\n                <div class=\"info-value\">${auditData?.location || 'Main Factory'}</div>\n            </div>\n            <div class=\"info-card\">\n                <div class=\"info-label\">Scope</div>\n                <div class=\"info-value\">${auditData?.auditScope || 'ISO 9001:2015 Compliance'}</div>\n            </div>\n        </div>\n        \n        ${auditData?.scoreData ? `\n        <div class=\"score-section\">\n            <div class=\"score-value\">${auditData.scoreData.score}%</div>\n            <div class=\"score-label\">Overall Compliance Score</div>\n        </div>\n        \n        <div class=\"summary-stats\">\n            <div class=\"stat-card\">\n                <div class=\"stat-number\">${auditData.scoreData.totalItems}</div>\n                <div class=\"stat-label\">Total Items</div>\n            </div>\n            <div class=\"stat-card\">\n                <div class=\"stat-number\">${auditData.scoreData.yesCount}</div>\n                <div class=\"stat-label\">Compliant</div>\n            </div>\n            <div class=\"stat-card\">\n                <div class=\"stat-number\">${auditData.scoreData.noCount}</div>\n                <div class=\"stat-label\">Non-Compliant</div>\n            </div>\n            <div class=\"stat-card\">\n                <div class=\"stat-number\">${auditData.scoreData.naCount}</div>\n                <div class=\"stat-label\">Not Applicable</div>\n            </div>\n        </div>\n        ` : ''}\n        \n        <div class=\"parts-section\">\n            ${(auditData?.parts || []).map((part: any, partIndex: number) => `\n                <div class=\"part\">\n                    <div class=\"part-header\">Part ${partIndex + 1}: ${part.title || 'Checklist Section'}</div>\n                    <div class=\"part-content\">\n                        ${(part.items || []).map((item: any) => `\n                            <div class=\"checklist-item\">\n                                <div class=\"question\">${item.code || item.id}: ${item.question}</div>\n                                <span class=\"response ${(item.response || '').toLowerCase()}\">${item.response || 'Not Answered'}</span>\n                                ${item.remark ? `<div class=\"remark\">Remarks: ${item.remark}</div>` : ''}\n                                ${item.evidenceImages && item.evidenceImages.length > 0 ? `\n                                    <div class=\"evidence\">\n                                        <strong>Evidence Images:</strong><br>\n                                        ${item.evidenceImages.map((img: string) => `<img src=\"${img}\" class=\"evidence-image\" alt=\"Evidence\">`).join('')}\n                                    </div>\n                                ` : ''}\n                            </div>\n                        `).join('')}\n                    </div>\n                </div>\n            `).join('')}\n        </div>\n    </div>\n</body>\n</html>\n    `;\n    \n    res.setHeader('Content-Type', 'text/html');\n    res.send(htmlReport);\n  } catch (error) {\n    console.error('❌ Error generating audit view:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to generate audit view'\n    });\n  }\n});\n\n/**\n * Download endpoint for generated PDF files\n * GET /api/audits/download/:filename\n */\nrouter.get('/download/:filename', async (req, res) => {\n  try {\n    const { filename } = req.params;\n    const filePath = path.join(process.cwd(), 'uploads', filename);\n    \n    // Check if file exists\n    try {\n      await fs.access(filePath);\n    } catch {\n      return res.status(404).json({ error: 'File not found' });\n    }\n    \n    // Set headers for PDF download\n    res.setHeader('Content-Type', 'application/pdf');\n    res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n    \n    // Stream the file\n    const fileBuffer = await fs.readFile(filePath);\n    res.send(fileBuffer);\n  } catch (error) {\n    res.status(500).json({ \n      error: error instanceof Error ? error.message : 'Download failed' \n    });\n  }\n});\n\n/**\n * Test fallback PDF generation directly\n * GET /api/audits/test-fallback-pdf\n */\nrouter.get('/test-fallback-pdf', async (req, res) => {\n  try {\n    // Create sample audit data for testing\n    const sampleAuditData = {\n      id: 'test-audit-' + Date.now(),\n      auditorName: 'Quality Auditor',\n      auditDate: new Date().toISOString().split('T')[0],\n      company: 'EHI',\n      location: 'Main Factory - Karachi',\n      auditScope: 'Complete ISO 9001:2015 compliance verification',\n      \n      scoreData: {\n        totalItems: 4,\n        yesCount: 3,\n        noCount: 1,\n        naCount: 0,\n        applicableItems: 4,\n        score: 75\n      }\n    };\n\n    // Use fallback jsPDF generator directly\n    const { generateComplianceAuditPDFFallback } = await import('../pdfFallback');\n    const pdfBuffer = await generateComplianceAuditPDFFallback(sampleAuditData);\n    \n    // Create filename with timestamp\n    const fileName = `audit-fallback-test-${Date.now()}.pdf`;\n    const uploadsDir = path.join(process.cwd(), 'uploads');\n    \n    // Ensure uploads directory exists\n    try {\n      await fs.access(uploadsDir);\n    } catch {\n      await fs.mkdir(uploadsDir, { recursive: true });\n    }\n    \n    // Save PDF to file\n    const filePath = path.join(uploadsDir, fileName);\n    await fs.writeFile(filePath, pdfBuffer);\n    \n    // Return download URL\n    const downloadUrl = `/uploads/${fileName}`;\n    \n    res.json({\n      success: true,\n      message: 'Fallback PDF generated successfully using jsPDF',\n      pdfSize: `${Math.round(pdfBuffer.length / 1024)}KB`,\n      downloadUrl,\n      fileName,\n      features: [\n        'jsPDF-based fallback system (no Puppeteer dependencies)',\n        'Professional layout structure',\n        'Eastern Mills logo placeholder',\n        'Clean structured headers with document references',\n        'Proper form layouts for audit data',\n        'Professional footer with signature fields',\n        'Reliable generation without system browser dependencies'\n      ]\n    });\n  } catch (error) {\n    console.error('Error testing fallback PDF generation:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Fallback PDF generation failed'\n    });\n  }\n});\n\n/**\n * Test PDF generation with LATO font\n * GET /api/audits/test-pdf\n */\nrouter.get('/test-pdf', async (req, res) => {\n  try {\n    // Create sample audit data for testing\n    const sampleAuditData = {\n      id: 'test-audit-' + Date.now(),\n      auditorInfo: {\n        auditorName: 'Test Auditor',\n        auditDate: new Date().toISOString().split('T')[0],\n        company: 'EHI',\n        location: 'Main Factory',\n        auditScope: 'Complete compliance audit'\n      },\n      checklist: [\n        {\n          id: 'part1',\n          title: 'Design Control (C1-C7)',\n          items: [\n            {\n              id: 'C1',\n              question: 'Are design and development procedures established?',\n              response: 'Yes',\n              remark: 'Comprehensive design control procedures in place',\n              evidenceUrl: ''\n            },\n            {\n              id: 'C2',\n              question: 'Are design inputs properly documented?',\n              response: 'Yes',\n              remark: 'All design inputs documented and reviewed',\n              evidenceUrl: ''\n            }\n          ]\n        }\n      ],\n      scoreData: {\n        totalItems: 2,\n        yesCount: 2,\n        noCount: 0,\n        naCount: 0,\n        applicableItems: 2,\n        score: 100\n      }\n    };\n\n    // Generate PDF and save to uploads directory\n    try {\n      const pdfBuffer = await generateTestPDF();\n      \n      // Create filename with timestamp\n      const fileName = `audit-test-${Date.now()}.pdf`;\n      const uploadsDir = path.join(process.cwd(), 'uploads');\n      \n      // Ensure uploads directory exists\n      try {\n        await fs.access(uploadsDir);\n      } catch {\n        await fs.mkdir(uploadsDir, { recursive: true });\n      }\n      \n      // Save PDF to file\n      const filePath = path.join(uploadsDir, fileName);\n      await fs.writeFile(filePath, pdfBuffer);\n      \n      // Return download URL\n      const downloadUrl = `/uploads/${fileName}`;\n      \n      res.json({\n        success: true,\n        message: 'Test PDF generated and saved successfully with LATO font',\n        pdfSize: `${Math.round(pdfBuffer.length / 1024)}KB`,\n        downloadUrl,\n        fileName,\n        features: [\n          'LATO font throughout the document',\n          'Professional layout structure',\n          'Eastern Mills logo at top-left corner',\n          'Clean structured headers with document references',\n          'Proper table layouts for test results',\n          'Professional footer with signature fields',\n          'Reusable structure for all audit types'\n        ]\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        error: error instanceof Error ? error.message : 'PDF generation failed'\n      });\n    }\n  } catch (error) {\n    console.error('Error testing PDF generation:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Internal server error'\n    });\n  }\n});\n\n/**\n * Get compliance audits\n * GET /api/audits/compliance\n */\nrouter.get('/compliance', async (req, res) => {\n  try {\n    if (!adminDb) {\n      return res.status(500).json({\n        success: false,\n        error: 'Firebase admin not available'\n      });\n    }\n\n    const snapshot = await adminDb.collection('complianceAudits')\n      .orderBy('updatedAt', 'desc')\n      .get();\n    \n    const audits = snapshot.docs.map((doc: any) => {\n      const data = doc.data();\n      const convertFirestoreDate = (dateField: any) => {\n        if (!dateField) return null;\n        if (dateField instanceof Date) return dateField;\n        if (typeof dateField === 'string') return new Date(dateField);\n        if (dateField && typeof dateField.toDate === 'function') {\n          return dateField.toDate();\n        }\n        if (dateField && dateField._seconds) {\n          return new Date(dateField._seconds * 1000);\n        }\n        return new Date();\n      };\n\n      return {\n        id: doc.id,\n        ...data,\n        createdAt: convertFirestoreDate(data.createdAt),\n        updatedAt: convertFirestoreDate(data.updatedAt),\n        submittedAt: convertFirestoreDate(data.submittedAt),\n      };\n    });\n\n    // Debug logging for status tracking\n    const statusCounts = audits.reduce((counts: any, audit: any) => {\n      counts[audit.status] = (counts[audit.status] || 0) + 1;\n      return counts;\n    }, {});\n    \n    console.log('📊 Server Status Counts:', statusCounts);\n    console.log('📋 Recent Audits:', audits.slice(0, 3).map(a => ({ id: a.id, status: a.status, company: a.company })));\n\n    res.json({\n      success: true,\n      audits\n    });\n  } catch (error) {\n    console.error('Error fetching compliance audits:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to fetch audits'\n    });\n  }\n});\n\n/**\n * CLEAN REBUILD: Create compliance audit with single checklist[] structure\n * POST /api/audits/compliance\n */\nrouter.post('/compliance', async (req, res) => {\n  try {\n    if (!adminDb) {\n      console.warn('⚠️ Firebase admin not available, using local fallback storage');\n      \n      // Fallback: Create a local file-based storage for development\n      const auditId = `audit_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      const auditData = {\n        id: auditId,\n        auditDate: String(req.body.auditDate || new Date().toISOString().split('T')[0]),\n        company: String(req.body.company || 'EHI'),\n        auditorName: String(req.body.auditorName || ''),\n        location: String(req.body.location || ''),\n        auditScope: String(req.body.auditScope || ''),\n        checklist: (req.body.checklist || []).map((item: any) => ({\n          code: String(item.code || ''),\n          question: String(item.question || ''),\n          response: item.response === undefined ? '' : item.response,\n          remark: String(item.remark || ''),\n          evidenceImages: Array.isArray(item.evidenceImages) ? item.evidenceImages : []\n        })),\n        status: String(req.body.status || 'draft'),\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n        createdBy: String(req.body.createdBy || '')\n      };\n      \n      // Store in local file for development\n      const fs = await import('fs/promises');\n      const path = await import('path');\n      const storageDir = path.join(process.cwd(), 'temp-audits');\n      \n      try {\n        await fs.mkdir(storageDir, { recursive: true });\n        await fs.writeFile(\n          path.join(storageDir, `${auditId}.json`),\n          JSON.stringify(auditData, null, 2)\n        );\n        \n        console.log('✅ Local fallback: Audit saved to file:', auditId);\n        return res.status(201).json({\n          success: true,\n          id: auditId,\n          message: 'Audit saved (local fallback mode)'\n        });\n      } catch (fileError) {\n        console.error('❌ Local fallback failed:', fileError);\n        return res.status(500).json({\n          success: false,\n          error: 'Unable to save audit (Firebase unavailable and local fallback failed)'\n        });\n      }\n    }\n\n    // 🧹 CLEAN REBUILD: Single checklist[] structure only\n    const auditData = {\n      auditDate: String(req.body.auditDate || new Date().toISOString().split('T')[0]),\n      company: String(req.body.company || 'EHI'),\n      auditorName: String(req.body.auditorName || ''),\n      location: String(req.body.location || ''),\n      auditScope: String(req.body.auditScope || ''),\n      checklist: (req.body.checklist || []).map((item: any) => ({\n        code: String(item.code || ''),\n        question: String(item.question || ''),\n        response: item.response === undefined ? '' : item.response,\n        remark: String(item.remark || ''),\n        evidence: Array.isArray(item.evidence) ? item.evidence.filter((url: string) => \n          typeof url === 'string' && (\n            url.startsWith('https://firebasestorage.googleapis.com/') ||\n            url.startsWith('data:image/')\n          )\n        ).slice(0, 5) : []\n      })),\n      status: String(req.body.status || 'draft'),\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n      createdBy: String(req.body.createdBy || '')\n    };\n\n    // Add submittedAt if status is submitted\n    if (auditData.status === 'submitted') {\n      (auditData as any).submittedAt = new Date().toISOString();\n    }\n\n    console.log('🧹 CLEAN: Creating audit with checklist items:', auditData.checklist.length);\n    console.log('🧹 CLEAN: Evidence items count:', auditData.checklist.filter(item => item.evidence.length > 0).length);\n    console.log('🧹 CLEAN: Sample checklist item:', auditData.checklist[0] ? {\n      code: auditData.checklist[0].code,\n      response: auditData.checklist[0].response,\n      evidenceCount: auditData.checklist[0].evidence.length\n    } : 'No items');\n\n    const docRef = await adminDb.collection('complianceAudits').add(auditData);\n    \n    res.json({\n      success: true,\n      id: docRef.id,\n      message: 'Compliance audit created successfully'\n    });\n  } catch (error) {\n    console.error('Error creating compliance audit:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to create audit'\n    });\n  }\n});\n\n/**\n * CLEAN REBUILD: Update compliance audit with single checklist[] structure\n * PUT /api/audits/compliance/:id\n */\nrouter.put('/compliance/:id', async (req, res) => {\n  try {\n    if (!adminDb) {\n      return res.status(500).json({\n        success: false,\n        error: 'Firebase admin not available'\n      });\n    }\n\n    const auditId = req.params.id;\n    console.log('🔄 SERVER: Updating compliance audit:', auditId);\n    \n    // DEBUG: Log the structure being saved to Firestore\n    if (req.body.parts) {\n      console.log('📊 SERVER: Audit parts structure being saved:');\n      req.body.parts.forEach((part: any, index: number) => {\n        const itemsWithData = part.items?.filter((item: any) => \n          item.response || item.remark || (item.evidenceImages && item.evidenceImages.length > 0)\n        ) || [];\n        \n        if (itemsWithData.length > 0) {\n          console.log(`  Part ${index + 1} (${part.id}) - ${itemsWithData.length} items with data:`);\n          itemsWithData.forEach((item: any) => {\n            console.log(`    ${item.id}: response=\"${item.response}\", remark=\"${item.remark?.substring(0, 30)}...\", evidence=${item.evidenceImages?.length || 0} images`);\n            if (item.evidenceImages && item.evidenceImages.length > 0) {\n              item.evidenceImages.forEach((url: string, idx: number) => {\n                console.log(`      Evidence ${idx + 1}: ${url.substring(0, 80)}...`);\n              });\n            }\n          });\n        }\n      });\n    }\n\n    const { id } = req.params;\n    \n    // 🧹 CLEAN REBUILD: Single checklist[] structure only\n    const updateData = {\n      auditDate: String(req.body.auditDate || new Date().toISOString().split('T')[0]),\n      company: String(req.body.company || 'EHI'),\n      auditorName: String(req.body.auditorName || ''),\n      location: String(req.body.location || ''),\n      auditScope: String(req.body.auditScope || ''),\n      checklist: (req.body.checklist || []).map((item: any) => ({\n        code: String(item.code || ''),\n        question: String(item.question || ''),\n        response: item.response === undefined ? '' : item.response,\n        remark: String(item.remark || ''),\n        evidence: Array.isArray(item.evidence) ? item.evidence.filter((url: string) => \n          typeof url === 'string' && (\n            url.startsWith('https://firebasestorage.googleapis.com/') ||\n            url.startsWith('data:image/')\n          )\n        ).slice(0, 5) : []\n      })),\n      status: String(req.body.status || 'draft'),\n      updatedAt: new Date().toISOString()\n    };\n\n    // Add submittedAt if status is submitted\n    if (updateData.status === 'submitted') {\n      (updateData as any).submittedAt = new Date().toISOString();\n    }\n\n    console.log('🧹 CLEAN: Updating with checklist items:', updateData.checklist.length);\n    console.log('🧹 CLEAN: Evidence items count:', updateData.checklist.filter(item => item.evidence.length > 0).length);\n\n    // 🧹 CLEAN: Removed legacy parts[] image counting\n    \n    console.log('🔄 Updating audit with data size:', (JSON.stringify(updateData).length / 1024).toFixed(2), 'KB');\n    \n    // Verify document exists before updating\n    const docRef = adminDb.collection('complianceAudits').doc(id);\n    const docSnapshot = await docRef.get();\n    \n    if (!docSnapshot.exists) {\n      console.error('❌ Document not found:', id);\n      return res.status(404).json({\n        success: false,\n        error: 'Audit not found'\n      });\n    }\n    \n    const beforeUpdate = docSnapshot.data();\n    console.log('📋 Before update - Status:', beforeUpdate?.status, 'SubmittedAt:', beforeUpdate?.submittedAt);\n    \n    await docRef.update(updateData);\n    \n    // Verify the update worked\n    const afterSnapshot = await docRef.get();\n    const afterUpdate = afterSnapshot.data();\n    console.log('✅ After update - Status:', afterUpdate?.status, 'SubmittedAt:', afterUpdate?.submittedAt);\n    \n    // If this was a submit operation, log success\n    if (updateData.status === 'submitted') {\n      console.log('🎯 AUDIT SUBMITTED SUCCESSFULLY - ID:', id, 'New Status:', afterUpdate?.status);\n    }\n    \n    res.json({\n      success: true,\n      message: 'Compliance audit updated successfully'\n    });\n  } catch (error) {\n    console.error('Error updating compliance audit:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to update audit'\n    });\n  }\n});\n\n/**\n * Get compliance audit details by ID\n * GET /api/audits/compliance/:id\n */\nrouter.get('/compliance/:id', async (req, res) => {\n  try {\n    if (!adminDb) {\n      return res.status(500).json({\n        success: false,\n        error: 'Firebase admin not available'\n      });\n    }\n\n    const { id } = req.params;\n\n    if (!id) {\n      return res.status(400).json({\n        success: false,\n        error: 'Audit ID is required'\n      });\n    }\n\n    console.log('📋 Fetching compliance audit:', id);\n    const doc = await adminDb.collection('complianceAudits').doc(id).get();\n    \n    if (!doc.exists) {\n      return res.status(404).json({\n        success: false,\n        error: 'Audit not found'\n      });\n    }\n\n    const data = doc.data();\n    const audit = {\n      id: doc.id,\n      auditDate: data?.auditDate || '',\n      auditorName: data?.auditorName || '',\n      company: data?.company || 'EHI',\n      location: data?.location || '',\n      auditScope: data?.auditScope || '',\n      checklist: data?.checklist || [], // 🧹 CLEAN: Only checklist[] field used\n      status: data?.status || 'draft',\n      scoreData: data?.scoreData || null,\n      createdAt: convertFirestoreDate(data?.createdAt),\n      updatedAt: convertFirestoreDate(data?.updatedAt),\n      submittedAt: convertFirestoreDate(data?.submittedAt),\n    };\n\n    console.log('🧹 CLEAN: Retrieved audit with checklist items:', audit.checklist?.length || 0);\n    if (audit.checklist && audit.checklist.length > 0) {\n      console.log('📋 Sample checklist item:', {\n        code: audit.checklist[0].code,\n        question: audit.checklist[0].question?.substring(0, 30) + '...',\n        response: audit.checklist[0].response,\n        evidenceCount: audit.checklist[0].evidence?.length || 0\n      });\n    }\n    \n    // 🧹 CLEAN: Debug evidence count in checklist[]\n    const evidenceCount = audit.checklist?.filter((item: any) => item.evidence?.length > 0).length || 0;\n    console.log(`🧹 CLEAN: Evidence items in checklist: ${evidenceCount}`);\n\n    res.json({\n      success: true,\n      audit\n    });\n  } catch (error) {\n    console.error('Error fetching compliance audit:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to fetch audit'\n    });\n  }\n});\n\n// Modern PDF generation using LATO font and professional layout\nasync function generateTestPDF(): Promise<Buffer> {\n  const sampleData = {\n    id: 'test-audit-' + Date.now(),\n    auditorName: 'Quality Auditor',\n    auditDate: new Date().toISOString().split('T')[0],\n    company: 'EHI',\n    location: 'Main Factory - Karachi',\n    auditScope: 'Complete ISO 9001:2015 compliance verification',\n    \n    scoreData: {\n      totalItems: 4,\n      yesCount: 3,\n      noCount: 1,\n      naCount: 0,\n      applicableItems: 4,\n      score: 75\n    }\n  };\n\n  try {\n    // Try LATO-based PDF generator first, fallback if it fails\n    try {\n      const pdfBuffer = await generateComplianceAuditPDF(sampleData);\n      return pdfBuffer;\n    } catch (primaryError) {\n      console.log('Primary LATO PDF generation failed, trying fallback system...');\n      console.log('Primary error:', primaryError instanceof Error ? primaryError.message : primaryError);\n      \n      // Use fallback jsPDF generator\n      const { generateComplianceAuditPDFFallback } = await import('../pdfFallback');\n      const fallbackBuffer = await generateComplianceAuditPDFFallback(sampleData);\n      console.log('✅ Fallback PDF generation successful');\n      return fallbackBuffer;\n    }\n  } catch (error) {\n    console.error('Both PDF generation systems failed:', error);\n    throw new Error('Failed to generate PDF with both LATO and fallback systems');\n  }\n}\n\n// Test endpoint for improved lab inspection PDF layout\nrouter.post('/test/lab-inspection-improved', async (req, res) => {\n  try {\n    console.log('🧪 Testing improved lab inspection PDF generation...');\n    \n    const testLabData = {\n      company: 'EHI',\n      labReportNumber: 'EHI-LAB-1001',\n      materialType: 'Dyed', \n      incomingDate: '2025-07-26',\n      challanNumber: '12312',\n      supplierName: 'Test Supplier Ltd',\n      purchaseOrder: 'PO-2025-001',\n      quantity: '500 KG',\n      transportCondition: 'OK',\n      testingParameters: [\n        { parameter: 'Color Fastness to rubbing (Dry)', standard: 'Wool - ≥ 4, Cotton - ≥ 3-4', result: 'OK' },\n        { parameter: 'Color Fastness to rubbing (Wet)', standard: 'Wool - ≥ 3-4, Cotton - ≥ 3', result: 'OK' },\n        { parameter: 'Moisture content', standard: 'Max - 12%', result: 'FAIL' },\n        { parameter: 'Shade matching', standard: 'As per approved sample', result: 'FAIL' },\n        { parameter: 'Hank variations', standard: 'As per approved sample', result: 'OK' },\n        { parameter: 'Cleanliness of hanks', standard: 'Proper neat & Clean', result: 'OK' },\n        { parameter: 'Smell', standard: 'Natural fiber smell only', result: 'FAIL' },\n        { parameter: 'Strength', standard: 'Ok', result: 'FAIL' },\n        { parameter: 'Stain/Dust', standard: 'NO', result: 'OK' }\n      ],\n      overallStatus: 'PENDING',\n      remarks: 'Material requires re-testing for moisture content and shade matching. Several parameters failed initial inspection.',\n      inspectorName: 'Lab Technician',\n      inspectionDate: '2025-07-26'\n    };\n    \n    const { generateLabInspectionPDFFallback } = await import('../pdfFallback');\n    const pdfBuffer = await generateLabInspectionPDFFallback(testLabData);\n    const filename = `lab-inspection-improved-${Date.now()}.pdf`;\n    const filePath = path.join(process.cwd(), 'uploads', filename);\n    \n    await fs.writeFile(filePath, pdfBuffer);\n    console.log(`✅ Improved lab inspection PDF saved: ${filename}`);\n    \n    res.setHeader('Content-Type', 'application/pdf');\n    res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n    res.send(pdfBuffer);\n  } catch (error) {\n    console.error('❌ Lab inspection PDF test failed:', error);\n    res.status(500).json({ error: 'Failed to generate lab inspection PDF' });\n  }\n});\n\nexport default router;",
      "size": 35302
    },
    {
      "path": "server/routes/audits.js",
      "content": "import { Router } from 'express';\nimport { generateAuditPDF, auditPDFGenerator } from '../auditPdfGenerator';\nimport { generateComplianceAuditPDF } from '../pdfMaster';\nimport fs from 'fs/promises';\nimport path from 'path';\nconst router = Router();\n// Import Firebase admin\nimport { adminDb } from '../firestoreHelpers.js';\n// Helper function to convert Firestore timestamp to ISO string\nfunction convertFirestoreDate(timestamp) {\n    if (!timestamp)\n        return undefined;\n    if (typeof timestamp === 'string')\n        return timestamp;\n    if (timestamp.toDate)\n        return timestamp.toDate().toISOString();\n    if (timestamp._seconds)\n        return new Date(timestamp._seconds * 1000).toISOString();\n    return undefined;\n}\n/**\n * Generate PDF for compliance audit\n * GET /api/audits/compliance/:id/pdf\n */\nrouter.get('/compliance/:id/pdf', async (req, res) => {\n    try {\n        const { id } = req.params;\n        if (!id) {\n            return res.status(400).json({\n                success: false,\n                error: 'Audit ID is required'\n            });\n        }\n        console.log(`📄 Generating PDF for compliance audit ID: ${id}`);\n        // Fetch audit data from Firebase\n        const auditDoc = await adminDb.collection('complianceAudits').doc(id).get();\n        if (!auditDoc.exists) {\n            return res.status(404).json({\n                success: false,\n                error: 'Audit not found'\n            });\n        }\n        const auditData = auditDoc.data();\n        if (!auditData) {\n            return res.status(404).json({\n                success: false,\n                error: 'Audit data not found'\n            });\n        }\n        // Use fallback PDF generator for reliable generation\n        const { generateComplianceAuditPDFFallback } = await import('../pdfFallback');\n        const pdfBuffer = await generateComplianceAuditPDFFallback(auditData);\n        // Create filename with audit details\n        const fileName = `compliance-audit-${auditData.company}-${id}-${Date.now()}.pdf`;\n        const uploadsDir = path.join(process.cwd(), 'uploads');\n        // Ensure uploads directory exists\n        try {\n            await fs.access(uploadsDir);\n        }\n        catch {\n            await fs.mkdir(uploadsDir, { recursive: true });\n        }\n        // Save PDF to file\n        const filePath = path.join(uploadsDir, fileName);\n        await fs.writeFile(filePath, pdfBuffer);\n        console.log(`✅ PDF generated successfully: ${fileName} (${Math.round(pdfBuffer.length / 1024)}KB)`);\n        // Set headers for PDF download\n        res.setHeader('Content-Type', 'application/pdf');\n        res.setHeader('Content-Disposition', `attachment; filename=\"${fileName}\"`);\n        res.setHeader('Content-Length', pdfBuffer.length.toString());\n        // Send the PDF buffer directly\n        res.send(pdfBuffer);\n    }\n    catch (error) {\n        console.error('❌ Error generating compliance audit PDF:', error);\n        res.status(500).json({\n            success: false,\n            error: error instanceof Error ? error.message : 'PDF generation failed'\n        });\n    }\n});\n/**\n * Generate PDF for specific audit\n * POST /api/audits/:id/generate-pdf\n */\nrouter.post('/:id/generate-pdf', async (req, res) => {\n    try {\n        const { id } = req.params;\n        if (!id) {\n            return res.status(400).json({\n                success: false,\n                error: 'Audit ID is required'\n            });\n        }\n        console.log(`Generating PDF for audit ID: ${id}`);\n        const result = await generateAuditPDF(id);\n        if (result.success) {\n            res.json({\n                success: true,\n                message: 'PDF generated successfully',\n                pdfUrl: result.pdfUrl,\n                downloadUrl: result.downloadUrl\n            });\n        }\n        else {\n            res.status(500).json({\n                success: false,\n                error: result.error || 'Failed to generate PDF'\n            });\n        }\n    }\n    catch (error) {\n        console.error('Error in PDF generation route:', error);\n        res.status(500).json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Internal server error'\n        });\n    }\n});\n/**\n * Get previous audit reports for a company\n * GET /api/audits/previous/:company\n */\nrouter.get('/previous/:company', async (req, res) => {\n    try {\n        const { company } = req.params;\n        const limit = parseInt(req.query.limit) || 10;\n        if (!company) {\n            return res.status(400).json({\n                success: false,\n                error: 'Company parameter is required'\n            });\n        }\n        const previousAudits = await auditPDFGenerator.getPreviousAudits(company, limit);\n        res.json({\n            success: true,\n            audits: previousAudits\n        });\n    }\n    catch (error) {\n        console.error('Error fetching previous audits:', error);\n        res.status(500).json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Internal server error'\n        });\n    }\n});\n/**\n * View audit report as HTML\n * GET /api/audits/compliance/:id/view\n */\nrouter.get('/compliance/:id/view', async (req, res) => {\n    try {\n        if (!adminDb) {\n            return res.status(500).json({\n                success: false,\n                error: 'Firebase admin not available'\n            });\n        }\n        const { id } = req.params;\n        const auditDoc = await adminDb.collection('complianceAudits').doc(id).get();\n        if (!auditDoc.exists) {\n            return res.status(404).json({\n                success: false,\n                error: 'Audit not found'\n            });\n        }\n        const auditData = auditDoc.data();\n        // Generate HTML report\n        const htmlReport = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Compliance Audit Report - ${auditData?.company === 'EHI' ? 'Eastern Home Industries' : 'Eastern Mills Pvt. Ltd.'}</title>\n    <style>\n        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }\n        .container { max-width: 1000px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }\n        .header { text-align: center; border-bottom: 3px solid #003366; padding-bottom: 20px; margin-bottom: 30px; }\n        .company-name { font-size: 24px; font-weight: bold; color: #003366; margin-bottom: 5px; }\n        .report-title { font-size: 20px; color: #666; margin-bottom: 10px; }\n        .audit-info { display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 30px; }\n        .info-card { background: #f8f9fa; padding: 15px; border-radius: 6px; border-left: 4px solid #007bff; }\n        .info-label { font-weight: bold; color: #333; }\n        .info-value { color: #666; margin-top: 5px; }\n        .score-section { text-align: center; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; border-radius: 8px; margin-bottom: 30px; }\n        .score-value { font-size: 48px; font-weight: bold; }\n        .score-label { font-size: 18px; margin-top: 10px; }\n        .parts-section { margin-top: 30px; }\n        .part { margin-bottom: 25px; border: 1px solid #e0e0e0; border-radius: 8px; overflow: hidden; }\n        .part-header { background: #003366; color: white; padding: 15px; font-weight: bold; font-size: 16px; }\n        .part-content { padding: 20px; }\n        .checklist-item { margin-bottom: 15px; padding: 15px; border-left: 4px solid #e0e0e0; background: #f9f9f9; }\n        .question { font-weight: bold; color: #333; margin-bottom: 8px; }\n        .response { display: inline-block; padding: 4px 12px; border-radius: 20px; font-size: 12px; font-weight: bold; }\n        .response.yes { background: #d4edda; color: #155724; }\n        .response.no { background: #f8d7da; color: #721c24; }\n        .response.na { background: #e2e3e5; color: #383d41; }\n        .remark { margin-top: 8px; font-style: italic; color: #666; }\n        .evidence { margin-top: 10px; }\n        .evidence-image { max-width: 150px; max-height: 150px; margin: 5px; border-radius: 4px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }\n        .summary-stats { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-bottom: 30px; }\n        .stat-card { text-align: center; padding: 15px; background: #f8f9fa; border-radius: 6px; border-top: 3px solid #007bff; }\n        .stat-number { font-size: 24px; font-weight: bold; color: #007bff; }\n        .stat-label { color: #666; margin-top: 5px; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <div class=\"company-name\">${auditData?.company === 'EHI' ? 'Eastern Home Industries' : 'Eastern Mills Pvt. Ltd.'}</div>\n            <div class=\"report-title\">ISO 9001:2015 Compliance Audit Report</div>\n        </div>\n        \n        <div class=\"audit-info\">\n            <div class=\"info-card\">\n                <div class=\"info-label\">Auditor</div>\n                <div class=\"info-value\">${auditData?.auditorName || 'Quality Auditor'}</div>\n            </div>\n            <div class=\"info-card\">\n                <div class=\"info-label\">Date</div>\n                <div class=\"info-value\">${auditData?.auditDate || new Date().toLocaleDateString()}</div>\n            </div>\n            <div class=\"info-card\">\n                <div class=\"info-label\">Location</div>\n                <div class=\"info-value\">${auditData?.location || 'Main Factory'}</div>\n            </div>\n            <div class=\"info-card\">\n                <div class=\"info-label\">Scope</div>\n                <div class=\"info-value\">${auditData?.auditScope || 'ISO 9001:2015 Compliance'}</div>\n            </div>\n        </div>\n        \n        ${auditData?.scoreData ? `\n        <div class=\"score-section\">\n            <div class=\"score-value\">${auditData.scoreData.score}%</div>\n            <div class=\"score-label\">Overall Compliance Score</div>\n        </div>\n        \n        <div class=\"summary-stats\">\n            <div class=\"stat-card\">\n                <div class=\"stat-number\">${auditData.scoreData.totalItems}</div>\n                <div class=\"stat-label\">Total Items</div>\n            </div>\n            <div class=\"stat-card\">\n                <div class=\"stat-number\">${auditData.scoreData.yesCount}</div>\n                <div class=\"stat-label\">Compliant</div>\n            </div>\n            <div class=\"stat-card\">\n                <div class=\"stat-number\">${auditData.scoreData.noCount}</div>\n                <div class=\"stat-label\">Non-Compliant</div>\n            </div>\n            <div class=\"stat-card\">\n                <div class=\"stat-number\">${auditData.scoreData.naCount}</div>\n                <div class=\"stat-label\">Not Applicable</div>\n            </div>\n        </div>\n        ` : ''}\n        \n        <div class=\"parts-section\">\n            ${(auditData?.parts || []).map((part, partIndex) => `\n                <div class=\"part\">\n                    <div class=\"part-header\">Part ${partIndex + 1}: ${part.title || 'Checklist Section'}</div>\n                    <div class=\"part-content\">\n                        ${(part.items || []).map((item) => `\n                            <div class=\"checklist-item\">\n                                <div class=\"question\">${item.code || item.id}: ${item.question}</div>\n                                <span class=\"response ${(item.response || '').toLowerCase()}\">${item.response || 'Not Answered'}</span>\n                                ${item.remark ? `<div class=\"remark\">Remarks: ${item.remark}</div>` : ''}\n                                ${item.evidenceImages && item.evidenceImages.length > 0 ? `\n                                    <div class=\"evidence\">\n                                        <strong>Evidence Images:</strong><br>\n                                        ${item.evidenceImages.map((img) => `<img src=\"${img}\" class=\"evidence-image\" alt=\"Evidence\">`).join('')}\n                                    </div>\n                                ` : ''}\n                            </div>\n                        `).join('')}\n                    </div>\n                </div>\n            `).join('')}\n        </div>\n    </div>\n</body>\n</html>\n    `;\n        res.setHeader('Content-Type', 'text/html');\n        res.send(htmlReport);\n    }\n    catch (error) {\n        console.error('❌ Error generating audit view:', error);\n        res.status(500).json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Failed to generate audit view'\n        });\n    }\n});\n/**\n * Download endpoint for generated PDF files\n * GET /api/audits/download/:filename\n */\nrouter.get('/download/:filename', async (req, res) => {\n    try {\n        const { filename } = req.params;\n        const filePath = path.join(process.cwd(), 'uploads', filename);\n        // Check if file exists\n        try {\n            await fs.access(filePath);\n        }\n        catch {\n            return res.status(404).json({ error: 'File not found' });\n        }\n        // Set headers for PDF download\n        res.setHeader('Content-Type', 'application/pdf');\n        res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n        // Stream the file\n        const fileBuffer = await fs.readFile(filePath);\n        res.send(fileBuffer);\n    }\n    catch (error) {\n        res.status(500).json({\n            error: error instanceof Error ? error.message : 'Download failed'\n        });\n    }\n});\n/**\n * Test fallback PDF generation directly\n * GET /api/audits/test-fallback-pdf\n */\nrouter.get('/test-fallback-pdf', async (req, res) => {\n    try {\n        // Create sample audit data for testing\n        const sampleAuditData = {\n            id: 'test-audit-' + Date.now(),\n            auditorName: 'Quality Auditor',\n            auditDate: new Date().toISOString().split('T')[0],\n            company: 'EHI',\n            location: 'Main Factory - Karachi',\n            auditScope: 'Complete ISO 9001:2015 compliance verification',\n            scoreData: {\n                totalItems: 4,\n                yesCount: 3,\n                noCount: 1,\n                naCount: 0,\n                applicableItems: 4,\n                score: 75\n            }\n        };\n        // Use fallback jsPDF generator directly\n        const { generateComplianceAuditPDFFallback } = await import('../pdfFallback');\n        const pdfBuffer = await generateComplianceAuditPDFFallback(sampleAuditData);\n        // Create filename with timestamp\n        const fileName = `audit-fallback-test-${Date.now()}.pdf`;\n        const uploadsDir = path.join(process.cwd(), 'uploads');\n        // Ensure uploads directory exists\n        try {\n            await fs.access(uploadsDir);\n        }\n        catch {\n            await fs.mkdir(uploadsDir, { recursive: true });\n        }\n        // Save PDF to file\n        const filePath = path.join(uploadsDir, fileName);\n        await fs.writeFile(filePath, pdfBuffer);\n        // Return download URL\n        const downloadUrl = `/uploads/${fileName}`;\n        res.json({\n            success: true,\n            message: 'Fallback PDF generated successfully using jsPDF',\n            pdfSize: `${Math.round(pdfBuffer.length / 1024)}KB`,\n            downloadUrl,\n            fileName,\n            features: [\n                'jsPDF-based fallback system (no Puppeteer dependencies)',\n                'Professional layout structure',\n                'Eastern Mills logo placeholder',\n                'Clean structured headers with document references',\n                'Proper form layouts for audit data',\n                'Professional footer with signature fields',\n                'Reliable generation without system browser dependencies'\n            ]\n        });\n    }\n    catch (error) {\n        console.error('Error testing fallback PDF generation:', error);\n        res.status(500).json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Fallback PDF generation failed'\n        });\n    }\n});\n/**\n * Test PDF generation with LATO font\n * GET /api/audits/test-pdf\n */\nrouter.get('/test-pdf', async (req, res) => {\n    try {\n        // Create sample audit data for testing\n        const sampleAuditData = {\n            id: 'test-audit-' + Date.now(),\n            auditorInfo: {\n                auditorName: 'Test Auditor',\n                auditDate: new Date().toISOString().split('T')[0],\n                company: 'EHI',\n                location: 'Main Factory',\n                auditScope: 'Complete compliance audit'\n            },\n            checklist: [\n                {\n                    id: 'part1',\n                    title: 'Design Control (C1-C7)',\n                    items: [\n                        {\n                            id: 'C1',\n                            question: 'Are design and development procedures established?',\n                            response: 'Yes',\n                            remark: 'Comprehensive design control procedures in place',\n                            evidenceUrl: ''\n                        },\n                        {\n                            id: 'C2',\n                            question: 'Are design inputs properly documented?',\n                            response: 'Yes',\n                            remark: 'All design inputs documented and reviewed',\n                            evidenceUrl: ''\n                        }\n                    ]\n                }\n            ],\n            scoreData: {\n                totalItems: 2,\n                yesCount: 2,\n                noCount: 0,\n                naCount: 0,\n                applicableItems: 2,\n                score: 100\n            }\n        };\n        // Generate PDF and save to uploads directory\n        try {\n            const pdfBuffer = await generateTestPDF();\n            // Create filename with timestamp\n            const fileName = `audit-test-${Date.now()}.pdf`;\n            const uploadsDir = path.join(process.cwd(), 'uploads');\n            // Ensure uploads directory exists\n            try {\n                await fs.access(uploadsDir);\n            }\n            catch {\n                await fs.mkdir(uploadsDir, { recursive: true });\n            }\n            // Save PDF to file\n            const filePath = path.join(uploadsDir, fileName);\n            await fs.writeFile(filePath, pdfBuffer);\n            // Return download URL\n            const downloadUrl = `/uploads/${fileName}`;\n            res.json({\n                success: true,\n                message: 'Test PDF generated and saved successfully with LATO font',\n                pdfSize: `${Math.round(pdfBuffer.length / 1024)}KB`,\n                downloadUrl,\n                fileName,\n                features: [\n                    'LATO font throughout the document',\n                    'Professional layout structure',\n                    'Eastern Mills logo at top-left corner',\n                    'Clean structured headers with document references',\n                    'Proper table layouts for test results',\n                    'Professional footer with signature fields',\n                    'Reusable structure for all audit types'\n                ]\n            });\n        }\n        catch (error) {\n            res.status(500).json({\n                success: false,\n                error: error instanceof Error ? error.message : 'PDF generation failed'\n            });\n        }\n    }\n    catch (error) {\n        console.error('Error testing PDF generation:', error);\n        res.status(500).json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Internal server error'\n        });\n    }\n});\n/**\n * Get compliance audits\n * GET /api/audits/compliance\n */\nrouter.get('/compliance', async (req, res) => {\n    try {\n        if (!adminDb) {\n            return res.status(500).json({\n                success: false,\n                error: 'Firebase admin not available'\n            });\n        }\n        const snapshot = await adminDb.collection('complianceAudits')\n            .orderBy('updatedAt', 'desc')\n            .get();\n        const audits = snapshot.docs.map((doc) => {\n            const data = doc.data();\n            const convertFirestoreDate = (dateField) => {\n                if (!dateField)\n                    return null;\n                if (dateField instanceof Date)\n                    return dateField;\n                if (typeof dateField === 'string')\n                    return new Date(dateField);\n                if (dateField && typeof dateField.toDate === 'function') {\n                    return dateField.toDate();\n                }\n                if (dateField && dateField._seconds) {\n                    return new Date(dateField._seconds * 1000);\n                }\n                return new Date();\n            };\n            return {\n                id: doc.id,\n                ...data,\n                createdAt: convertFirestoreDate(data.createdAt),\n                updatedAt: convertFirestoreDate(data.updatedAt),\n                submittedAt: convertFirestoreDate(data.submittedAt),\n            };\n        });\n        // Debug logging for status tracking\n        const statusCounts = audits.reduce((counts, audit) => {\n            counts[audit.status] = (counts[audit.status] || 0) + 1;\n            return counts;\n        }, {});\n        console.log('📊 Server Status Counts:', statusCounts);\n        console.log('📋 Recent Audits:', audits.slice(0, 3).map(a => ({ id: a.id, status: a.status, company: a.company })));\n        res.json({\n            success: true,\n            audits\n        });\n    }\n    catch (error) {\n        console.error('Error fetching compliance audits:', error);\n        res.status(500).json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Failed to fetch audits'\n        });\n    }\n});\n/**\n * CLEAN REBUILD: Create compliance audit with single checklist[] structure\n * POST /api/audits/compliance\n */\nrouter.post('/compliance', async (req, res) => {\n    try {\n        if (!adminDb) {\n            return res.status(500).json({\n                success: false,\n                error: 'Firebase admin not available'\n            });\n        }\n        // 🧹 CLEAN REBUILD: Single checklist[] structure only\n        const auditData = {\n            auditDate: String(req.body.auditDate || new Date().toISOString().split('T')[0]),\n            company: String(req.body.company || 'EHI'),\n            auditorName: String(req.body.auditorName || ''),\n            location: String(req.body.location || ''),\n            auditScope: String(req.body.auditScope || ''),\n            checklist: (req.body.checklist || []).map((item) => ({\n                code: String(item.code || ''),\n                question: String(item.question || ''),\n                response: item.response === undefined ? '' : item.response,\n                remark: String(item.remark || ''),\n                evidence: Array.isArray(item.evidence) ? item.evidence.filter((url) => typeof url === 'string' && (url.startsWith('https://firebasestorage.googleapis.com/') ||\n                    url.startsWith('data:image/'))).slice(0, 5) : []\n            })),\n            status: String(req.body.status || 'draft'),\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString(),\n            createdBy: String(req.body.createdBy || '')\n        };\n        // Add submittedAt if status is submitted\n        if (auditData.status === 'submitted') {\n            auditData.submittedAt = new Date().toISOString();\n        }\n        console.log('🧹 CLEAN: Creating audit with checklist items:', auditData.checklist.length);\n        console.log('🧹 CLEAN: Evidence items count:', auditData.checklist.filter(item => item.evidence.length > 0).length);\n        console.log('🧹 CLEAN: Sample checklist item:', auditData.checklist[0] ? {\n            code: auditData.checklist[0].code,\n            response: auditData.checklist[0].response,\n            evidenceCount: auditData.checklist[0].evidence.length\n        } : 'No items');\n        const docRef = await adminDb.collection('complianceAudits').add(auditData);\n        res.json({\n            success: true,\n            id: docRef.id,\n            message: 'Compliance audit created successfully'\n        });\n    }\n    catch (error) {\n        console.error('Error creating compliance audit:', error);\n        res.status(500).json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Failed to create audit'\n        });\n    }\n});\n/**\n * CLEAN REBUILD: Update compliance audit with single checklist[] structure\n * PUT /api/audits/compliance/:id\n */\nrouter.put('/compliance/:id', async (req, res) => {\n    try {\n        if (!adminDb) {\n            return res.status(500).json({\n                success: false,\n                error: 'Firebase admin not available'\n            });\n        }\n        const auditId = req.params.id;\n        console.log('🔄 SERVER: Updating compliance audit:', auditId);\n        // DEBUG: Log the structure being saved to Firestore\n        if (req.body.parts) {\n            console.log('📊 SERVER: Audit parts structure being saved:');\n            req.body.parts.forEach((part, index) => {\n                const itemsWithData = part.items?.filter((item) => item.response || item.remark || (item.evidenceImages && item.evidenceImages.length > 0)) || [];\n                if (itemsWithData.length > 0) {\n                    console.log(`  Part ${index + 1} (${part.id}) - ${itemsWithData.length} items with data:`);\n                    itemsWithData.forEach((item) => {\n                        console.log(`    ${item.id}: response=\"${item.response}\", remark=\"${item.remark?.substring(0, 30)}...\", evidence=${item.evidenceImages?.length || 0} images`);\n                        if (item.evidenceImages && item.evidenceImages.length > 0) {\n                            item.evidenceImages.forEach((url, idx) => {\n                                console.log(`      Evidence ${idx + 1}: ${url.substring(0, 80)}...`);\n                            });\n                        }\n                    });\n                }\n            });\n        }\n        const { id } = req.params;\n        // 🧹 CLEAN REBUILD: Single checklist[] structure only\n        const updateData = {\n            auditDate: String(req.body.auditDate || new Date().toISOString().split('T')[0]),\n            company: String(req.body.company || 'EHI'),\n            auditorName: String(req.body.auditorName || ''),\n            location: String(req.body.location || ''),\n            auditScope: String(req.body.auditScope || ''),\n            checklist: (req.body.checklist || []).map((item) => ({\n                code: String(item.code || ''),\n                question: String(item.question || ''),\n                response: item.response === undefined ? '' : item.response,\n                remark: String(item.remark || ''),\n                evidence: Array.isArray(item.evidence) ? item.evidence.filter((url) => typeof url === 'string' && (url.startsWith('https://firebasestorage.googleapis.com/') ||\n                    url.startsWith('data:image/'))).slice(0, 5) : []\n            })),\n            status: String(req.body.status || 'draft'),\n            updatedAt: new Date().toISOString()\n        };\n        // Add submittedAt if status is submitted\n        if (updateData.status === 'submitted') {\n            updateData.submittedAt = new Date().toISOString();\n        }\n        console.log('🧹 CLEAN: Updating with checklist items:', updateData.checklist.length);\n        console.log('🧹 CLEAN: Evidence items count:', updateData.checklist.filter(item => item.evidence.length > 0).length);\n        // 🧹 CLEAN: Removed legacy parts[] image counting\n        console.log('🔄 Updating audit with data size:', (JSON.stringify(updateData).length / 1024).toFixed(2), 'KB');\n        // Verify document exists before updating\n        const docRef = adminDb.collection('complianceAudits').doc(id);\n        const docSnapshot = await docRef.get();\n        if (!docSnapshot.exists) {\n            console.error('❌ Document not found:', id);\n            return res.status(404).json({\n                success: false,\n                error: 'Audit not found'\n            });\n        }\n        const beforeUpdate = docSnapshot.data();\n        console.log('📋 Before update - Status:', beforeUpdate?.status, 'SubmittedAt:', beforeUpdate?.submittedAt);\n        await docRef.update(updateData);\n        // Verify the update worked\n        const afterSnapshot = await docRef.get();\n        const afterUpdate = afterSnapshot.data();\n        console.log('✅ After update - Status:', afterUpdate?.status, 'SubmittedAt:', afterUpdate?.submittedAt);\n        // If this was a submit operation, log success\n        if (updateData.status === 'submitted') {\n            console.log('🎯 AUDIT SUBMITTED SUCCESSFULLY - ID:', id, 'New Status:', afterUpdate?.status);\n        }\n        res.json({\n            success: true,\n            message: 'Compliance audit updated successfully'\n        });\n    }\n    catch (error) {\n        console.error('Error updating compliance audit:', error);\n        res.status(500).json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Failed to update audit'\n        });\n    }\n});\n/**\n * Get compliance audit details by ID\n * GET /api/audits/compliance/:id\n */\nrouter.get('/compliance/:id', async (req, res) => {\n    try {\n        if (!adminDb) {\n            return res.status(500).json({\n                success: false,\n                error: 'Firebase admin not available'\n            });\n        }\n        const { id } = req.params;\n        if (!id) {\n            return res.status(400).json({\n                success: false,\n                error: 'Audit ID is required'\n            });\n        }\n        console.log('📋 Fetching compliance audit:', id);\n        const doc = await adminDb.collection('complianceAudits').doc(id).get();\n        if (!doc.exists) {\n            return res.status(404).json({\n                success: false,\n                error: 'Audit not found'\n            });\n        }\n        const data = doc.data();\n        const audit = {\n            id: doc.id,\n            auditDate: data?.auditDate || '',\n            auditorName: data?.auditorName || '',\n            company: data?.company || 'EHI',\n            location: data?.location || '',\n            auditScope: data?.auditScope || '',\n            checklist: data?.checklist || [], // 🧹 CLEAN: Only checklist[] field used\n            status: data?.status || 'draft',\n            scoreData: data?.scoreData || null,\n            createdAt: convertFirestoreDate(data?.createdAt),\n            updatedAt: convertFirestoreDate(data?.updatedAt),\n            submittedAt: convertFirestoreDate(data?.submittedAt),\n        };\n        console.log('🧹 CLEAN: Retrieved audit with checklist items:', audit.checklist?.length || 0);\n        if (audit.checklist && audit.checklist.length > 0) {\n            console.log('📋 Sample checklist item:', {\n                code: audit.checklist[0].code,\n                question: audit.checklist[0].question?.substring(0, 30) + '...',\n                response: audit.checklist[0].response,\n                evidenceCount: audit.checklist[0].evidence?.length || 0\n            });\n        }\n        // 🧹 CLEAN: Debug evidence count in checklist[]\n        const evidenceCount = audit.checklist?.filter((item) => item.evidence?.length > 0).length || 0;\n        console.log(`🧹 CLEAN: Evidence items in checklist: ${evidenceCount}`);\n        res.json({\n            success: true,\n            audit\n        });\n    }\n    catch (error) {\n        console.error('Error fetching compliance audit:', error);\n        res.status(500).json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Failed to fetch audit'\n        });\n    }\n});\n// Modern PDF generation using LATO font and professional layout\nasync function generateTestPDF() {\n    const sampleData = {\n        id: 'test-audit-' + Date.now(),\n        auditorName: 'Quality Auditor',\n        auditDate: new Date().toISOString().split('T')[0],\n        company: 'EHI',\n        location: 'Main Factory - Karachi',\n        auditScope: 'Complete ISO 9001:2015 compliance verification',\n        scoreData: {\n            totalItems: 4,\n            yesCount: 3,\n            noCount: 1,\n            naCount: 0,\n            applicableItems: 4,\n            score: 75\n        }\n    };\n    try {\n        // Try LATO-based PDF generator first, fallback if it fails\n        try {\n            const pdfBuffer = await generateComplianceAuditPDF(sampleData);\n            return pdfBuffer;\n        }\n        catch (primaryError) {\n            console.log('Primary LATO PDF generation failed, trying fallback system...');\n            console.log('Primary error:', primaryError instanceof Error ? primaryError.message : primaryError);\n            // Use fallback jsPDF generator\n            const { generateComplianceAuditPDFFallback } = await import('../pdfFallback');\n            const fallbackBuffer = await generateComplianceAuditPDFFallback(sampleData);\n            console.log('✅ Fallback PDF generation successful');\n            return fallbackBuffer;\n        }\n    }\n    catch (error) {\n        console.error('Both PDF generation systems failed:', error);\n        throw new Error('Failed to generate PDF with both LATO and fallback systems');\n    }\n}\n// Test endpoint for improved lab inspection PDF layout\nrouter.post('/test/lab-inspection-improved', async (req, res) => {\n    try {\n        console.log('🧪 Testing improved lab inspection PDF generation...');\n        const testLabData = {\n            company: 'EHI',\n            labReportNumber: 'EHI-LAB-1001',\n            materialType: 'Dyed',\n            incomingDate: '2025-07-26',\n            challanNumber: '12312',\n            supplierName: 'Test Supplier Ltd',\n            purchaseOrder: 'PO-2025-001',\n            quantity: '500 KG',\n            transportCondition: 'OK',\n            testingParameters: [\n                { parameter: 'Color Fastness to rubbing (Dry)', standard: 'Wool - ≥ 4, Cotton - ≥ 3-4', result: 'OK' },\n                { parameter: 'Color Fastness to rubbing (Wet)', standard: 'Wool - ≥ 3-4, Cotton - ≥ 3', result: 'OK' },\n                { parameter: 'Moisture content', standard: 'Max - 12%', result: 'FAIL' },\n                { parameter: 'Shade matching', standard: 'As per approved sample', result: 'FAIL' },\n                { parameter: 'Hank variations', standard: 'As per approved sample', result: 'OK' },\n                { parameter: 'Cleanliness of hanks', standard: 'Proper neat & Clean', result: 'OK' },\n                { parameter: 'Smell', standard: 'Natural fiber smell only', result: 'FAIL' },\n                { parameter: 'Strength', standard: 'Ok', result: 'FAIL' },\n                { parameter: 'Stain/Dust', standard: 'NO', result: 'OK' }\n            ],\n            overallStatus: 'PENDING',\n            remarks: 'Material requires re-testing for moisture content and shade matching. Several parameters failed initial inspection.',\n            inspectorName: 'Lab Technician',\n            inspectionDate: '2025-07-26'\n        };\n        const { generateLabInspectionPDFFallback } = await import('../pdfFallback');\n        const pdfBuffer = await generateLabInspectionPDFFallback(testLabData);\n        const filename = `lab-inspection-improved-${Date.now()}.pdf`;\n        const filePath = path.join(process.cwd(), 'uploads', filename);\n        await fs.writeFile(filePath, pdfBuffer);\n        console.log(`✅ Improved lab inspection PDF saved: ${filename}`);\n        res.setHeader('Content-Type', 'application/pdf');\n        res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n        res.send(pdfBuffer);\n    }\n    catch (error) {\n        console.error('❌ Lab inspection PDF test failed:', error);\n        res.status(500).json({ error: 'Failed to generate lab inspection PDF' });\n    }\n});\nexport default router;\n",
      "size": 36427
    },
    {
      "path": "server/routes/audit.ts",
      "content": "import { Router } from 'express';\nimport { adminDb } from '../firestoreHelpers.js';\n\nconst router = Router();\n\ninterface ChecklistItem {\n  code: string;\n  question: string;\n  response?: 'Yes' | 'No' | 'NA';\n  remark?: string;\n  evidence: string[];\n}\n\ninterface AuditData {\n  auditDate: string;\n  company: 'EHI' | 'EMPL';\n  auditor: string;\n  status: 'draft' | 'submitted';\n  checklist: ChecklistItem[];\n  createdAt: string;\n  submittedAt?: string;\n}\n\n/**\n * Create new audit in clean 'audit' collection\n * POST /api/audit\n */\nrouter.post('/', async (req, res) => {\n  try {\n    console.log('🔍 Testing adminDb availability:', typeof adminDb);\n    console.log('🔍 AdminDb methods:', Object.getOwnPropertyNames(adminDb));\n    \n    // Test the collection access directly\n    try {\n      const testCollection = adminDb.collection('audit');\n      console.log('✅ Collection access works:', typeof testCollection);\n    } catch (collectionError: any) {\n      console.error('❌ Collection access failed:', collectionError);\n      return res.status(500).json({\n        success: false,\n        error: 'Firebase collection access failed: ' + (collectionError?.message || 'Unknown error')\n      });\n    }\n\n    console.log('🆕 Creating new audit with clean structure');\n    console.log('📋 Request status:', req.body.status);\n    \n    const auditData: AuditData = {\n      auditDate: String(req.body.auditDate || new Date().toISOString().split('T')[0]),\n      company: (req.body.company === 'EMPL' ? 'EMPL' : 'EHI') as 'EHI' | 'EMPL',\n      auditor: String(req.body.auditor || ''),\n      status: (req.body.status === 'submitted' ? 'submitted' : 'draft') as 'draft' | 'submitted',\n      checklist: (req.body.checklist || []).map((item: any) => ({\n        code: String(item.code || ''),\n        question: String(item.question || ''),\n        response: item.response === undefined ? '' : item.response,\n        remark: String(item.remark || ''),\n        evidence: Array.isArray(item.evidence) ? \n          item.evidence.filter((url: string) => typeof url === 'string').slice(0, 5) : []\n      })),\n      createdAt: new Date().toISOString()\n    };\n\n    // Only add submittedAt if status is submitted\n    let finalAuditData: AuditData = auditData;\n    if (req.body.status === 'submitted') {\n      finalAuditData = { ...auditData, submittedAt: new Date().toISOString() };\n      console.log('✅ Added submittedAt field');\n    } else {\n      console.log('⏸️ Skipping submittedAt (draft status)');\n    }\n    \n    console.log('📋 Final audit data keys:', Object.keys(finalAuditData));\n    console.log('📋 Has submittedAt:', 'submittedAt' in finalAuditData);\n\n    console.log('📋 Audit checklist items:', finalAuditData.checklist.length);\n    console.log('📊 Items with evidence:', finalAuditData.checklist.filter(item => item.evidence.length > 0).length);\n    console.log('📝 Sample item:', finalAuditData.checklist[0] ? {\n      code: finalAuditData.checklist[0].code,\n      response: finalAuditData.checklist[0].response,\n      evidenceCount: finalAuditData.checklist[0].evidence.length\n    } : 'No items');\n\n    // Save to new 'audit' collection\n    const docRef = await adminDb.collection('audit').add(finalAuditData);\n    \n    console.log('✅ Audit saved to collection \"audit\" with ID:', docRef.id);\n\n    res.json({\n      success: true,\n      id: docRef.id,\n      message: 'Audit created successfully in clean structure'\n    });\n\n  } catch (error) {\n    console.error('❌ Error creating audit:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to create audit'\n    });\n  }\n});\n\n/**\n * Get all audits from clean 'audit' collection\n * GET /api/audit\n */\nrouter.get('/', async (req, res) => {\n  try {\n    if (!adminDb) {\n      return res.status(500).json({\n        success: false,\n        error: 'Firebase admin not available'\n      });\n    }\n\n    console.log('📋 Fetching all audits from clean collection');\n    \n    const snapshot = await adminDb.collection('audit').orderBy('createdAt', 'desc').get();\n    \n    const audits = snapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n\n    console.log('✅ Retrieved', audits.length, 'audits from clean collection');\n\n    res.json({\n      success: true,\n      audits\n    });\n\n  } catch (error) {\n    console.error('❌ Error fetching audits:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to fetch audits'\n    });\n  }\n});\n\n/**\n * Get specific audit by ID from clean 'audit' collection\n * GET /api/audit/:id\n */\nrouter.get('/:id', async (req, res) => {\n  try {\n    if (!adminDb) {\n      return res.status(500).json({\n        success: false,\n        error: 'Firebase admin not available'\n      });\n    }\n\n    const { id } = req.params;\n    console.log('📋 Fetching audit by ID:', id);\n    \n    const doc = await adminDb.collection('audit').doc(id).get();\n    \n    if (!doc.exists) {\n      return res.status(404).json({\n        success: false,\n        error: 'Audit not found'\n      });\n    }\n\n    const auditData = doc.data() as AuditData;\n    const audit = {\n      id: doc.id,\n      ...auditData\n    };\n\n    console.log('✅ Retrieved audit with', audit.checklist?.length || 0, 'checklist items');\n\n    res.json({\n      success: true,\n      audit\n    });\n\n  } catch (error) {\n    console.error('❌ Error fetching audit:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to fetch audit'\n    });\n  }\n});\n\n/**\n * Update audit in clean 'audit' collection\n * PUT /api/audit/:id\n */\nrouter.put('/:id', async (req, res) => {\n  try {\n    if (!adminDb) {\n      return res.status(500).json({\n        success: false,\n        error: 'Firebase admin not available'\n      });\n    }\n\n    const { id } = req.params;\n    console.log('🔄 Updating audit:', id);\n\n    const updateData: any = {\n      auditDate: String(req.body.auditDate || new Date().toISOString().split('T')[0]),\n      company: req.body.company === 'EMPL' ? 'EMPL' : 'EHI',\n      auditor: String(req.body.auditor || ''),\n      status: req.body.status === 'submitted' ? 'submitted' : 'draft',\n      checklist: (req.body.checklist || []).map((item: any) => ({\n        code: String(item.code || ''),\n        question: String(item.question || ''),\n        response: item.response === undefined ? '' : item.response,\n        remark: String(item.remark || ''),\n        evidence: Array.isArray(item.evidence) ? \n          item.evidence.filter((url: string) => typeof url === 'string').slice(0, 5) : []\n      }))\n    };\n\n    // Add submittedAt if status is submitted\n    if (updateData.status === 'submitted') {\n      updateData.submittedAt = new Date().toISOString();\n    }\n\n    await adminDb.collection('audit').doc(id).update(updateData);\n    \n    console.log('✅ Audit updated successfully');\n\n    res.json({\n      success: true,\n      message: 'Audit updated successfully'\n    });\n\n  } catch (error) {\n    console.error('❌ Error updating audit:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to update audit'\n    });\n  }\n});\n\n/**\n * Delete audit from clean 'audit' collection\n * DELETE /api/audit/:id\n */\nrouter.delete('/:id', async (req, res) => {\n  try {\n    if (!adminDb) {\n      return res.status(500).json({\n        success: false,\n        error: 'Firebase admin not available'\n      });\n    }\n\n    const { id } = req.params;\n    console.log('🗑️ Deleting audit:', id);\n\n    await adminDb.collection('audit').doc(id).delete();\n    \n    console.log('✅ Audit deleted successfully');\n\n    res.json({\n      success: true,\n      message: 'Audit deleted successfully'\n    });\n\n  } catch (error) {\n    console.error('❌ Error deleting audit:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to delete audit'\n    });\n  }\n});\n\nexport default router;",
      "size": 8039
    },
    {
      "path": "server/routes/audit.js",
      "content": "import { Router } from 'express';\nimport { adminDb } from '../firestoreHelpers.js';\nconst router = Router();\n/**\n * Create new audit in clean 'audit' collection\n * POST /api/audit\n */\nrouter.post('/', async (req, res) => {\n    try {\n        console.log('🔍 Testing adminDb availability:', typeof adminDb);\n        console.log('🔍 AdminDb methods:', Object.getOwnPropertyNames(adminDb));\n        // Test the collection access directly\n        try {\n            const testCollection = adminDb.collection('audit');\n            console.log('✅ Collection access works:', typeof testCollection);\n        }\n        catch (collectionError) {\n            console.error('❌ Collection access failed:', collectionError);\n            return res.status(500).json({\n                success: false,\n                error: 'Firebase collection access failed: ' + (collectionError?.message || 'Unknown error')\n            });\n        }\n        console.log('🆕 Creating new audit with clean structure');\n        console.log('📋 Request status:', req.body.status);\n        const auditData = {\n            auditDate: String(req.body.auditDate || new Date().toISOString().split('T')[0]),\n            company: (req.body.company === 'EMPL' ? 'EMPL' : 'EHI'),\n            auditor: String(req.body.auditor || ''),\n            status: (req.body.status === 'submitted' ? 'submitted' : 'draft'),\n            checklist: (req.body.checklist || []).map((item) => ({\n                code: String(item.code || ''),\n                question: String(item.question || ''),\n                response: item.response === undefined ? '' : item.response,\n                remark: String(item.remark || ''),\n                evidence: Array.isArray(item.evidence) ?\n                    item.evidence.filter((url) => typeof url === 'string').slice(0, 5) : []\n            })),\n            createdAt: new Date().toISOString()\n        };\n        // Only add submittedAt if status is submitted\n        let finalAuditData = auditData;\n        if (req.body.status === 'submitted') {\n            finalAuditData = { ...auditData, submittedAt: new Date().toISOString() };\n            console.log('✅ Added submittedAt field');\n        }\n        else {\n            console.log('⏸️ Skipping submittedAt (draft status)');\n        }\n        console.log('📋 Final audit data keys:', Object.keys(finalAuditData));\n        console.log('📋 Has submittedAt:', 'submittedAt' in finalAuditData);\n        console.log('📋 Audit checklist items:', finalAuditData.checklist.length);\n        console.log('📊 Items with evidence:', finalAuditData.checklist.filter(item => item.evidence.length > 0).length);\n        console.log('📝 Sample item:', finalAuditData.checklist[0] ? {\n            code: finalAuditData.checklist[0].code,\n            response: finalAuditData.checklist[0].response,\n            evidenceCount: finalAuditData.checklist[0].evidence.length\n        } : 'No items');\n        // Save to new 'audit' collection\n        const docRef = await adminDb.collection('audit').add(finalAuditData);\n        console.log('✅ Audit saved to collection \"audit\" with ID:', docRef.id);\n        res.json({\n            success: true,\n            id: docRef.id,\n            message: 'Audit created successfully in clean structure'\n        });\n    }\n    catch (error) {\n        console.error('❌ Error creating audit:', error);\n        res.status(500).json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Failed to create audit'\n        });\n    }\n});\n/**\n * Get all audits from clean 'audit' collection\n * GET /api/audit\n */\nrouter.get('/', async (req, res) => {\n    try {\n        if (!adminDb) {\n            return res.status(500).json({\n                success: false,\n                error: 'Firebase admin not available'\n            });\n        }\n        console.log('📋 Fetching all audits from clean collection');\n        const snapshot = await adminDb.collection('audit').orderBy('createdAt', 'desc').get();\n        const audits = snapshot.docs.map(doc => ({\n            id: doc.id,\n            ...doc.data()\n        }));\n        console.log('✅ Retrieved', audits.length, 'audits from clean collection');\n        res.json({\n            success: true,\n            audits\n        });\n    }\n    catch (error) {\n        console.error('❌ Error fetching audits:', error);\n        res.status(500).json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Failed to fetch audits'\n        });\n    }\n});\n/**\n * Get specific audit by ID from clean 'audit' collection\n * GET /api/audit/:id\n */\nrouter.get('/:id', async (req, res) => {\n    try {\n        if (!adminDb) {\n            return res.status(500).json({\n                success: false,\n                error: 'Firebase admin not available'\n            });\n        }\n        const { id } = req.params;\n        console.log('📋 Fetching audit by ID:', id);\n        const doc = await adminDb.collection('audit').doc(id).get();\n        if (!doc.exists) {\n            return res.status(404).json({\n                success: false,\n                error: 'Audit not found'\n            });\n        }\n        const auditData = doc.data();\n        const audit = {\n            id: doc.id,\n            ...auditData\n        };\n        console.log('✅ Retrieved audit with', audit.checklist?.length || 0, 'checklist items');\n        res.json({\n            success: true,\n            audit\n        });\n    }\n    catch (error) {\n        console.error('❌ Error fetching audit:', error);\n        res.status(500).json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Failed to fetch audit'\n        });\n    }\n});\n/**\n * Update audit in clean 'audit' collection\n * PUT /api/audit/:id\n */\nrouter.put('/:id', async (req, res) => {\n    try {\n        if (!adminDb) {\n            return res.status(500).json({\n                success: false,\n                error: 'Firebase admin not available'\n            });\n        }\n        const { id } = req.params;\n        console.log('🔄 Updating audit:', id);\n        const updateData = {\n            auditDate: String(req.body.auditDate || new Date().toISOString().split('T')[0]),\n            company: req.body.company === 'EMPL' ? 'EMPL' : 'EHI',\n            auditor: String(req.body.auditor || ''),\n            status: req.body.status === 'submitted' ? 'submitted' : 'draft',\n            checklist: (req.body.checklist || []).map((item) => ({\n                code: String(item.code || ''),\n                question: String(item.question || ''),\n                response: item.response === undefined ? '' : item.response,\n                remark: String(item.remark || ''),\n                evidence: Array.isArray(item.evidence) ?\n                    item.evidence.filter((url) => typeof url === 'string').slice(0, 5) : []\n            }))\n        };\n        // Add submittedAt if status is submitted\n        if (updateData.status === 'submitted') {\n            updateData.submittedAt = new Date().toISOString();\n        }\n        await adminDb.collection('audit').doc(id).update(updateData);\n        console.log('✅ Audit updated successfully');\n        res.json({\n            success: true,\n            message: 'Audit updated successfully'\n        });\n    }\n    catch (error) {\n        console.error('❌ Error updating audit:', error);\n        res.status(500).json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Failed to update audit'\n        });\n    }\n});\n/**\n * Delete audit from clean 'audit' collection\n * DELETE /api/audit/:id\n */\nrouter.delete('/:id', async (req, res) => {\n    try {\n        if (!adminDb) {\n            return res.status(500).json({\n                success: false,\n                error: 'Firebase admin not available'\n            });\n        }\n        const { id } = req.params;\n        console.log('🗑️ Deleting audit:', id);\n        await adminDb.collection('audit').doc(id).delete();\n        console.log('✅ Audit deleted successfully');\n        res.json({\n            success: true,\n            message: 'Audit deleted successfully'\n        });\n    }\n    catch (error) {\n        console.error('❌ Error deleting audit:', error);\n        res.status(500).json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Failed to delete audit'\n        });\n    }\n});\nexport default router;\n",
      "size": 8460
    },
    {
      "path": "server/routes/audits-clean.ts",
      "content": "import express from 'express';\nimport { adminDb } from '../firebase';\n\nconst router = express.Router();\n\n/**\n * Clean Compliance Audit Routes - Single checklist[] structure\n */\n\n/**\n * Create compliance audit\n * POST /api/audits/compliance\n */\nrouter.post('/compliance', async (req, res) => {\n  try {\n    if (!adminDb) {\n      return res.status(500).json({\n        success: false,\n        error: 'Firebase admin not available'\n      });\n    }\n\n    // Clean structure with single checklist[] array\n    const auditData = {\n      auditDate: String(req.body.auditDate || new Date().toISOString().split('T')[0]),\n      company: String(req.body.company || 'EHI'),\n      auditorName: String(req.body.auditorName || ''),\n      location: String(req.body.location || ''),\n      auditScope: String(req.body.auditScope || ''),\n      checklist: (req.body.checklist || []).map((item: any) => ({\n        code: String(item.code || ''),\n        question: String(item.question || ''),\n        response: item.response || undefined,\n        remark: String(item.remark || ''),\n        evidence: Array.isArray(item.evidence) ? item.evidence.filter((url: string) => \n          typeof url === 'string' && (\n            url.startsWith('https://firebasestorage.googleapis.com/') ||\n            url.startsWith('data:image/')\n          )\n        ).slice(0, 5) : []\n      })),\n      status: String(req.body.status || 'draft'),\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n      createdBy: String(req.body.createdBy || '')\n    };\n\n    // Add submittedAt if status is submitted\n    if (auditData.status === 'submitted') {\n      (auditData as any).submittedAt = new Date().toISOString();\n    }\n\n    console.log('🧹 CLEAN: Creating audit with checklist items:', auditData.checklist.length);\n    console.log('🧹 CLEAN: Sample checklist item:', auditData.checklist[0] ? {\n      code: auditData.checklist[0].code,\n      response: auditData.checklist[0].response,\n      evidenceCount: auditData.checklist[0].evidence.length\n    } : 'No items');\n\n    const docRef = await adminDb.collection('complianceAudits').add(auditData);\n    \n    res.json({\n      success: true,\n      id: docRef.id,\n      message: 'Compliance audit created successfully'\n    });\n  } catch (error) {\n    console.error('Error creating compliance audit:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to create audit'\n    });\n  }\n});\n\n/**\n * Update compliance audit\n * PUT /api/audits/compliance/:id\n */\nrouter.put('/compliance/:id', async (req, res) => {\n  try {\n    if (!adminDb) {\n      return res.status(500).json({\n        success: false,\n        error: 'Firebase admin not available'\n      });\n    }\n\n    const auditId = req.params.id;\n    console.log('🧹 CLEAN: Updating audit:', auditId);\n\n    // Clean structure with single checklist[] array\n    const updateData = {\n      auditDate: String(req.body.auditDate || new Date().toISOString().split('T')[0]),\n      company: String(req.body.company || 'EHI'),\n      auditorName: String(req.body.auditorName || ''),\n      location: String(req.body.location || ''),\n      auditScope: String(req.body.auditScope || ''),\n      checklist: (req.body.checklist || []).map((item: any) => ({\n        code: String(item.code || ''),\n        question: String(item.question || ''),\n        response: item.response || undefined,\n        remark: String(item.remark || ''),\n        evidence: Array.isArray(item.evidence) ? item.evidence.filter((url: string) => \n          typeof url === 'string' && (\n            url.startsWith('https://firebasestorage.googleapis.com/') ||\n            url.startsWith('data:image/')\n          )\n        ).slice(0, 5) : []\n      })),\n      status: String(req.body.status || 'draft'),\n      updatedAt: new Date().toISOString()\n    };\n\n    // Add submittedAt if status is submitted\n    if (updateData.status === 'submitted') {\n      (updateData as any).submittedAt = new Date().toISOString();\n    }\n\n    console.log('🧹 CLEAN: Updating with checklist items:', updateData.checklist.length);\n    console.log('🧹 CLEAN: Evidence items count:', updateData.checklist.filter(item => item.evidence.length > 0).length);\n\n    const docRef = adminDb.collection('complianceAudits').doc(auditId);\n    const docSnapshot = await docRef.get();\n    \n    if (!docSnapshot.exists) {\n      return res.status(404).json({\n        success: false,\n        error: 'Audit not found'\n      });\n    }\n\n    await docRef.update(updateData);\n    \n    res.json({\n      success: true,\n      message: 'Compliance audit updated successfully'\n    });\n  } catch (error) {\n    console.error('Error updating compliance audit:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to update audit'\n    });\n  }\n});\n\n/**\n * Get compliance audit by ID\n * GET /api/audits/compliance/:id\n */\nrouter.get('/compliance/:id', async (req, res) => {\n  try {\n    if (!adminDb) {\n      return res.status(500).json({\n        success: false,\n        error: 'Firebase admin not available'\n      });\n    }\n\n    const auditId = req.params.id;\n    const doc = await adminDb.collection('complianceAudits').doc(auditId).get();\n    \n    if (!doc.exists) {\n      return res.status(404).json({\n        success: false,\n        error: 'Audit not found'\n      });\n    }\n\n    const data = doc.data();\n    \n    // Convert Firestore timestamps to ISO strings\n    const convertFirestoreDate = (dateField: any) => {\n      if (!dateField) return undefined;\n      if (typeof dateField === 'string') return dateField;\n      if (dateField._seconds) {\n        return new Date(dateField._seconds * 1000).toISOString();\n      }\n      return dateField.toISOString ? dateField.toISOString() : String(dateField);\n    };\n\n    const audit = {\n      id: doc.id,\n      auditDate: data?.auditDate,\n      company: data?.company,\n      auditorName: data?.auditorName,\n      location: data?.location,\n      auditScope: data?.auditScope,\n      checklist: data?.checklist || [],\n      status: data?.status,\n      createdAt: convertFirestoreDate(data?.createdAt),\n      updatedAt: convertFirestoreDate(data?.updatedAt),\n      submittedAt: convertFirestoreDate(data?.submittedAt),\n      createdBy: data?.createdBy\n    };\n\n    console.log('🧹 CLEAN: Retrieved audit with checklist items:', audit.checklist.length);\n    console.log('🧹 CLEAN: Evidence items count:', audit.checklist.filter((item: any) => item.evidence?.length > 0).length);\n\n    res.json({\n      success: true,\n      audit\n    });\n  } catch (error) {\n    console.error('Error fetching compliance audit:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to fetch audit'\n    });\n  }\n});\n\n/**\n * Get all compliance audits\n * GET /api/audits/compliance\n */\nrouter.get('/compliance', async (req, res) => {\n  try {\n    if (!adminDb) {\n      return res.status(500).json({\n        success: false,\n        error: 'Firebase admin not available'\n      });\n    }\n\n    const snapshot = await adminDb.collection('complianceAudits')\n      .orderBy('updatedAt', 'desc')\n      .get();\n    \n    const audits = snapshot.docs.map((doc: any) => {\n      const data = doc.data();\n      \n      const convertFirestoreDate = (dateField: any) => {\n        if (!dateField) return undefined;\n        if (typeof dateField === 'string') return dateField;\n        if (dateField._seconds) {\n          return new Date(dateField._seconds * 1000).toISOString();\n        }\n        return dateField.toISOString ? dateField.toISOString() : String(dateField);\n      };\n\n      return {\n        id: doc.id,\n        auditDate: data.auditDate,\n        company: data.company,\n        auditorName: data.auditorName,\n        location: data.location,\n        auditScope: data.auditScope,\n        status: data.status,\n        createdAt: convertFirestoreDate(data.createdAt),\n        updatedAt: convertFirestoreDate(data.updatedAt),\n        submittedAt: convertFirestoreDate(data.submittedAt),\n        checklistItemsCount: data.checklist?.length || 0\n      };\n    });\n\n    console.log('🧹 CLEAN: Retrieved', audits.length, 'audits');\n\n    res.json({\n      success: true,\n      audits\n    });\n  } catch (error) {\n    console.error('Error fetching compliance audits:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to fetch audits'\n    });\n  }\n});\n\nexport default router;",
      "size": 8532
    },
    {
      "path": "server/routes/audits-clean.js",
      "content": "import express from 'express';\nimport { adminDb } from '../firebase';\nconst router = express.Router();\n/**\n * Clean Compliance Audit Routes - Single checklist[] structure\n */\n/**\n * Create compliance audit\n * POST /api/audits/compliance\n */\nrouter.post('/compliance', async (req, res) => {\n    try {\n        if (!adminDb) {\n            return res.status(500).json({\n                success: false,\n                error: 'Firebase admin not available'\n            });\n        }\n        // Clean structure with single checklist[] array\n        const auditData = {\n            auditDate: String(req.body.auditDate || new Date().toISOString().split('T')[0]),\n            company: String(req.body.company || 'EHI'),\n            auditorName: String(req.body.auditorName || ''),\n            location: String(req.body.location || ''),\n            auditScope: String(req.body.auditScope || ''),\n            checklist: (req.body.checklist || []).map((item) => ({\n                code: String(item.code || ''),\n                question: String(item.question || ''),\n                response: item.response || undefined,\n                remark: String(item.remark || ''),\n                evidence: Array.isArray(item.evidence) ? item.evidence.filter((url) => typeof url === 'string' && (url.startsWith('https://firebasestorage.googleapis.com/') ||\n                    url.startsWith('data:image/'))).slice(0, 5) : []\n            })),\n            status: String(req.body.status || 'draft'),\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString(),\n            createdBy: String(req.body.createdBy || '')\n        };\n        // Add submittedAt if status is submitted\n        if (auditData.status === 'submitted') {\n            auditData.submittedAt = new Date().toISOString();\n        }\n        console.log('🧹 CLEAN: Creating audit with checklist items:', auditData.checklist.length);\n        console.log('🧹 CLEAN: Sample checklist item:', auditData.checklist[0] ? {\n            code: auditData.checklist[0].code,\n            response: auditData.checklist[0].response,\n            evidenceCount: auditData.checklist[0].evidence.length\n        } : 'No items');\n        const docRef = await adminDb.collection('complianceAudits').add(auditData);\n        res.json({\n            success: true,\n            id: docRef.id,\n            message: 'Compliance audit created successfully'\n        });\n    }\n    catch (error) {\n        console.error('Error creating compliance audit:', error);\n        res.status(500).json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Failed to create audit'\n        });\n    }\n});\n/**\n * Update compliance audit\n * PUT /api/audits/compliance/:id\n */\nrouter.put('/compliance/:id', async (req, res) => {\n    try {\n        if (!adminDb) {\n            return res.status(500).json({\n                success: false,\n                error: 'Firebase admin not available'\n            });\n        }\n        const auditId = req.params.id;\n        console.log('🧹 CLEAN: Updating audit:', auditId);\n        // Clean structure with single checklist[] array\n        const updateData = {\n            auditDate: String(req.body.auditDate || new Date().toISOString().split('T')[0]),\n            company: String(req.body.company || 'EHI'),\n            auditorName: String(req.body.auditorName || ''),\n            location: String(req.body.location || ''),\n            auditScope: String(req.body.auditScope || ''),\n            checklist: (req.body.checklist || []).map((item) => ({\n                code: String(item.code || ''),\n                question: String(item.question || ''),\n                response: item.response || undefined,\n                remark: String(item.remark || ''),\n                evidence: Array.isArray(item.evidence) ? item.evidence.filter((url) => typeof url === 'string' && (url.startsWith('https://firebasestorage.googleapis.com/') ||\n                    url.startsWith('data:image/'))).slice(0, 5) : []\n            })),\n            status: String(req.body.status || 'draft'),\n            updatedAt: new Date().toISOString()\n        };\n        // Add submittedAt if status is submitted\n        if (updateData.status === 'submitted') {\n            updateData.submittedAt = new Date().toISOString();\n        }\n        console.log('🧹 CLEAN: Updating with checklist items:', updateData.checklist.length);\n        console.log('🧹 CLEAN: Evidence items count:', updateData.checklist.filter(item => item.evidence.length > 0).length);\n        const docRef = adminDb.collection('complianceAudits').doc(auditId);\n        const docSnapshot = await docRef.get();\n        if (!docSnapshot.exists) {\n            return res.status(404).json({\n                success: false,\n                error: 'Audit not found'\n            });\n        }\n        await docRef.update(updateData);\n        res.json({\n            success: true,\n            message: 'Compliance audit updated successfully'\n        });\n    }\n    catch (error) {\n        console.error('Error updating compliance audit:', error);\n        res.status(500).json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Failed to update audit'\n        });\n    }\n});\n/**\n * Get compliance audit by ID\n * GET /api/audits/compliance/:id\n */\nrouter.get('/compliance/:id', async (req, res) => {\n    try {\n        if (!adminDb) {\n            return res.status(500).json({\n                success: false,\n                error: 'Firebase admin not available'\n            });\n        }\n        const auditId = req.params.id;\n        const doc = await adminDb.collection('complianceAudits').doc(auditId).get();\n        if (!doc.exists) {\n            return res.status(404).json({\n                success: false,\n                error: 'Audit not found'\n            });\n        }\n        const data = doc.data();\n        // Convert Firestore timestamps to ISO strings\n        const convertFirestoreDate = (dateField) => {\n            if (!dateField)\n                return undefined;\n            if (typeof dateField === 'string')\n                return dateField;\n            if (dateField._seconds) {\n                return new Date(dateField._seconds * 1000).toISOString();\n            }\n            return dateField.toISOString ? dateField.toISOString() : String(dateField);\n        };\n        const audit = {\n            id: doc.id,\n            auditDate: data?.auditDate,\n            company: data?.company,\n            auditorName: data?.auditorName,\n            location: data?.location,\n            auditScope: data?.auditScope,\n            checklist: data?.checklist || [],\n            status: data?.status,\n            createdAt: convertFirestoreDate(data?.createdAt),\n            updatedAt: convertFirestoreDate(data?.updatedAt),\n            submittedAt: convertFirestoreDate(data?.submittedAt),\n            createdBy: data?.createdBy\n        };\n        console.log('🧹 CLEAN: Retrieved audit with checklist items:', audit.checklist.length);\n        console.log('🧹 CLEAN: Evidence items count:', audit.checklist.filter((item) => item.evidence?.length > 0).length);\n        res.json({\n            success: true,\n            audit\n        });\n    }\n    catch (error) {\n        console.error('Error fetching compliance audit:', error);\n        res.status(500).json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Failed to fetch audit'\n        });\n    }\n});\n/**\n * Get all compliance audits\n * GET /api/audits/compliance\n */\nrouter.get('/compliance', async (req, res) => {\n    try {\n        if (!adminDb) {\n            return res.status(500).json({\n                success: false,\n                error: 'Firebase admin not available'\n            });\n        }\n        const snapshot = await adminDb.collection('complianceAudits')\n            .orderBy('updatedAt', 'desc')\n            .get();\n        const audits = snapshot.docs.map((doc) => {\n            const data = doc.data();\n            const convertFirestoreDate = (dateField) => {\n                if (!dateField)\n                    return undefined;\n                if (typeof dateField === 'string')\n                    return dateField;\n                if (dateField._seconds) {\n                    return new Date(dateField._seconds * 1000).toISOString();\n                }\n                return dateField.toISOString ? dateField.toISOString() : String(dateField);\n            };\n            return {\n                id: doc.id,\n                auditDate: data.auditDate,\n                company: data.company,\n                auditorName: data.auditorName,\n                location: data.location,\n                auditScope: data.auditScope,\n                status: data.status,\n                createdAt: convertFirestoreDate(data.createdAt),\n                updatedAt: convertFirestoreDate(data.updatedAt),\n                submittedAt: convertFirestoreDate(data.submittedAt),\n                checklistItemsCount: data.checklist?.length || 0\n            };\n        });\n        console.log('🧹 CLEAN: Retrieved', audits.length, 'audits');\n        res.json({\n            success: true,\n            audits\n        });\n    }\n    catch (error) {\n        console.error('Error fetching compliance audits:', error);\n        res.status(500).json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Failed to fetch audits'\n        });\n    }\n});\nexport default router;\n",
      "size": 9512
    },
    {
      "path": "server/routes/auditForms.ts",
      "content": "import express from 'express';\nimport { firestore } from '../firebase.js';\nimport { FieldValue } from 'firebase-admin/firestore';\n\nconst router = express.Router();\n\n// Get all audit forms for a company\nrouter.get('/', async (req, res) => {\n  try {\n    const { company, status, auditType } = req.query;\n    \n    let query = firestore.collection('auditForms');\n    \n    if (company) {\n      query = query.where('company', '==', company);\n    }\n    if (status) {\n      query = query.where('status', '==', status);\n    }\n    if (auditType) {\n      query = query.where('auditType', '==', auditType);\n    }\n    \n    const snapshot = await query.orderBy('createdAt', 'desc').get();\n    const auditForms = snapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n    \n    console.log(`📋 Found ${auditForms.length} audit forms`);\n    res.json(auditForms);\n  } catch (error) {\n    console.error('❌ Error fetching audit forms:', error);\n    res.status(500).json({ error: 'Failed to fetch audit forms' });\n  }\n});\n\n// Get a specific audit form by ID\nrouter.get('/:id', async (req, res) => {\n  try {\n    const { id } = req.params;\n    const doc = await firestore.collection('auditForms').doc(id).get();\n    \n    if (!doc.exists) {\n      return res.status(404).json({ error: 'Audit form not found' });\n    }\n    \n    res.json({ id: doc.id, ...doc.data() });\n  } catch (error) {\n    console.error('❌ Error fetching audit form:', error);\n    res.status(500).json({ error: 'Failed to fetch audit form' });\n  }\n});\n\n// Create a new audit form\nrouter.post('/', async (req, res) => {\n  try {\n    const auditFormData = {\n      ...req.body,\n      createdAt: FieldValue.serverTimestamp(),\n      updatedAt: FieldValue.serverTimestamp()\n    };\n    \n    const docRef = await firestore.collection('auditForms').add(auditFormData);\n    console.log('✅ Created audit form with ID:', docRef.id);\n    \n    // Get the created document\n    const doc = await docRef.get();\n    res.status(201).json({ id: doc.id, ...doc.data() });\n  } catch (error) {\n    console.error('❌ Error creating audit form:', error);\n    res.status(500).json({ error: 'Failed to create audit form' });\n  }\n});\n\n// Update an audit form\nrouter.put('/:id', async (req, res) => {\n  try {\n    const { id } = req.params;\n    const updateData = {\n      ...req.body,\n      updatedAt: FieldValue.serverTimestamp()\n    };\n    \n    await firestore.collection('auditForms').doc(id).update(updateData);\n    console.log('✅ Updated audit form:', id);\n    \n    // Get the updated document\n    const doc = await firestore.collection('auditForms').doc(id).get();\n    res.json({ id: doc.id, ...doc.data() });\n  } catch (error) {\n    console.error('❌ Error updating audit form:', error);\n    res.status(500).json({ error: 'Failed to update audit form' });\n  }\n});\n\n// Delete an audit form\nrouter.delete('/:id', async (req, res) => {\n  try {\n    const { id } = req.params;\n    await firestore.collection('auditForms').doc(id).delete();\n    console.log('✅ Deleted audit form:', id);\n    res.json({ message: 'Audit form deleted successfully' });\n  } catch (error) {\n    console.error('❌ Error deleting audit form:', error);\n    res.status(500).json({ error: 'Failed to delete audit form' });\n  }\n});\n\nexport default router;",
      "size": 3276
    },
    {
      "path": "server/routes/auditForms.js",
      "content": "import express from 'express';\nimport { firestore } from '../firebase.js';\nimport { FieldValue } from 'firebase-admin/firestore';\nconst router = express.Router();\n// Get all audit forms for a company\nrouter.get('/', async (req, res) => {\n    try {\n        const { company, status, auditType } = req.query;\n        let query = firestore.collection('auditForms');\n        if (company) {\n            query = query.where('company', '==', company);\n        }\n        if (status) {\n            query = query.where('status', '==', status);\n        }\n        if (auditType) {\n            query = query.where('auditType', '==', auditType);\n        }\n        const snapshot = await query.orderBy('createdAt', 'desc').get();\n        const auditForms = snapshot.docs.map(doc => ({\n            id: doc.id,\n            ...doc.data()\n        }));\n        console.log(`📋 Found ${auditForms.length} audit forms`);\n        res.json(auditForms);\n    }\n    catch (error) {\n        console.error('❌ Error fetching audit forms:', error);\n        res.status(500).json({ error: 'Failed to fetch audit forms' });\n    }\n});\n// Get a specific audit form by ID\nrouter.get('/:id', async (req, res) => {\n    try {\n        const { id } = req.params;\n        const doc = await firestore.collection('auditForms').doc(id).get();\n        if (!doc.exists) {\n            return res.status(404).json({ error: 'Audit form not found' });\n        }\n        res.json({ id: doc.id, ...doc.data() });\n    }\n    catch (error) {\n        console.error('❌ Error fetching audit form:', error);\n        res.status(500).json({ error: 'Failed to fetch audit form' });\n    }\n});\n// Create a new audit form\nrouter.post('/', async (req, res) => {\n    try {\n        const auditFormData = {\n            ...req.body,\n            createdAt: FieldValue.serverTimestamp(),\n            updatedAt: FieldValue.serverTimestamp()\n        };\n        const docRef = await firestore.collection('auditForms').add(auditFormData);\n        console.log('✅ Created audit form with ID:', docRef.id);\n        // Get the created document\n        const doc = await docRef.get();\n        res.status(201).json({ id: doc.id, ...doc.data() });\n    }\n    catch (error) {\n        console.error('❌ Error creating audit form:', error);\n        res.status(500).json({ error: 'Failed to create audit form' });\n    }\n});\n// Update an audit form\nrouter.put('/:id', async (req, res) => {\n    try {\n        const { id } = req.params;\n        const updateData = {\n            ...req.body,\n            updatedAt: FieldValue.serverTimestamp()\n        };\n        await firestore.collection('auditForms').doc(id).update(updateData);\n        console.log('✅ Updated audit form:', id);\n        // Get the updated document\n        const doc = await firestore.collection('auditForms').doc(id).get();\n        res.json({ id: doc.id, ...doc.data() });\n    }\n    catch (error) {\n        console.error('❌ Error updating audit form:', error);\n        res.status(500).json({ error: 'Failed to update audit form' });\n    }\n});\n// Delete an audit form\nrouter.delete('/:id', async (req, res) => {\n    try {\n        const { id } = req.params;\n        await firestore.collection('auditForms').doc(id).delete();\n        console.log('✅ Deleted audit form:', id);\n        res.json({ message: 'Audit form deleted successfully' });\n    }\n    catch (error) {\n        console.error('❌ Error deleting audit form:', error);\n        res.status(500).json({ error: 'Failed to delete audit form' });\n    }\n});\nexport default router;\n",
      "size": 3524
    },
    {
      "path": "client/src/components/AuditFormsDashboard.js",
      "content": "import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\nimport { Button } from './ui/button';\nimport { Badge } from './ui/badge';\nimport { Input } from './ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';\nimport { Plus, Eye, Download, Calendar, AlertTriangle, Search, ClipboardCheck } from 'lucide-react';\nimport { useAuditForms } from '../hooks/useAuditForms';\nimport { AuditFormEditor } from './AuditFormEditor';\nexport function AuditFormsDashboard({ selectedCompany }) {\n    const [view, setView] = useState('internal');\n    const { auditForms, isLoading } = useAuditForms(selectedCompany);\n    const [showFormEditor, setShowFormEditor] = useState(false);\n    const [editingFormId, setEditingFormId] = useState(null);\n    const [searchTerm, setSearchTerm] = useState('');\n    const [filterStatus, setFilterStatus] = useState('all');\n    const [filterType, setFilterType] = useState('all');\n    // Filter audit forms\n    const filteredForms = auditForms.filter((form) => {\n        const matchesSearch = form.createdBy?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n            form.auditType?.toLowerCase().includes(searchTerm.toLowerCase());\n        const matchesStatus = filterStatus === 'all' || form.status === filterStatus;\n        const matchesType = filterType === 'all' || form.auditType === filterType;\n        return matchesSearch && matchesStatus && matchesType;\n    });\n    // Calculate metrics\n    const totalForms = auditForms.length;\n    const draftForms = auditForms.filter((form) => form.status === 'draft').length;\n    const submittedForms = auditForms.filter((form) => form.status === 'submitted').length;\n    const droppedForms = auditForms.filter((form) => form.status === 'dropped').length;\n    const handleCreateForm = () => {\n        setEditingFormId(null);\n        setShowFormEditor(true);\n    };\n    const handleEditForm = (formId) => {\n        setEditingFormId(formId);\n        setShowFormEditor(true);\n    };\n    const handleCloseEditor = () => {\n        setShowFormEditor(false);\n        setEditingFormId(null);\n    };\n    if (showFormEditor) {\n        return (_jsx(AuditFormEditor, { formId: editingFormId, selectedCompany: selectedCompany, onClose: handleCloseEditor }));\n    }\n    if (isLoading) {\n        return (_jsx(\"div\", { className: \"flex items-center justify-center p-8\", children: _jsxs(\"div\", { className: \"text-center\", children: [_jsx(ClipboardCheck, { className: \"h-12 w-12 text-blue-500 mx-auto mb-4 animate-pulse\" }), _jsx(\"p\", { className: \"text-gray-600\", children: \"Loading audit forms...\" })] }) }));\n    }\n    return (_jsxs(\"div\", { className: \"space-y-6\", children: [_jsxs(\"div\", { className: \"flex justify-between items-center\", children: [_jsxs(\"div\", { children: [_jsx(\"h2\", { className: \"text-2xl font-bold text-gray-900\", children: \"Audit Dashboard\" }), _jsxs(\"p\", { className: \"text-gray-600\", children: [\"Manage quality audit forms for \", selectedCompany] })] }), _jsxs(Button, { onClick: handleCreateForm, className: \"bg-blue-600 hover:bg-blue-700\", children: [_jsx(Plus, { className: \"h-4 w-4 mr-2\" }), \"Create New Audit\"] })] }), _jsxs(Tabs, { value: view, onValueChange: setView, className: \"w-full\", children: [_jsxs(TabsList, { className: \"grid w-full grid-cols-2 mb-6 bg-white border\", children: [_jsx(TabsTrigger, { value: \"internal\", className: \"data-[state=active]:bg-blue-50 data-[state=active]:text-blue-700 data-[state=active]:border-blue-200\", children: \"Internal Audits\" }), _jsx(TabsTrigger, { value: \"external\", className: \"data-[state=active]:bg-blue-50 data-[state=active]:text-blue-700 data-[state=active]:border-blue-200\", children: \"External Audits\" })] }), _jsx(TabsContent, { value: \"internal\", className: \"mt-0\", children: _jsx(InternalAuditView, { auditForms: filteredForms, isLoading: isLoading, totalForms: totalForms, draftForms: draftForms, submittedForms: submittedForms, droppedForms: droppedForms, searchTerm: searchTerm, setSearchTerm: setSearchTerm, filterStatus: filterStatus, setFilterStatus: setFilterStatus, filterType: filterType, setFilterType: setFilterType, handleEditForm: handleEditForm, handleCreateForm: handleCreateForm }) }), _jsx(TabsContent, { value: \"external\", className: \"mt-0\", children: _jsx(ExternalAuditView, { selectedCompany: selectedCompany }) })] })] }));\n}\nfunction InternalAuditView({ auditForms, isLoading, totalForms, draftForms, submittedForms, droppedForms, searchTerm, setSearchTerm, filterStatus, setFilterStatus, filterType, setFilterType, handleEditForm, handleCreateForm }) {\n    return (_jsxs(\"div\", { className: \"space-y-6\", children: [_jsxs(\"div\", { className: \"grid grid-cols-1 md:grid-cols-4 gap-4\", children: [_jsxs(Card, { children: [_jsx(CardHeader, { className: \"pb-2\", children: _jsx(CardTitle, { className: \"text-sm font-medium text-gray-600\", children: \"Total Forms\" }) }), _jsx(CardContent, { className: \"pt-0\", children: _jsx(\"div\", { className: \"text-2xl font-bold text-blue-600\", children: totalForms }) })] }), _jsxs(Card, { children: [_jsx(CardHeader, { className: \"pb-2\", children: _jsx(CardTitle, { className: \"text-sm font-medium text-gray-600\", children: \"Draft\" }) }), _jsx(CardContent, { className: \"pt-0\", children: _jsx(\"div\", { className: \"text-2xl font-bold text-orange-600\", children: draftForms }) })] }), _jsxs(Card, { children: [_jsx(CardHeader, { className: \"pb-2\", children: _jsx(CardTitle, { className: \"text-sm font-medium text-gray-600\", children: \"Submitted\" }) }), _jsx(CardContent, { className: \"pt-0\", children: _jsx(\"div\", { className: \"text-2xl font-bold text-green-600\", children: submittedForms }) })] }), _jsxs(Card, { children: [_jsx(CardHeader, { className: \"pb-2\", children: _jsx(CardTitle, { className: \"text-sm font-medium text-gray-600\", children: \"Dropped\" }) }), _jsx(CardContent, { className: \"pt-0\", children: _jsx(\"div\", { className: \"text-2xl font-bold text-red-600\", children: droppedForms }) })] })] }), _jsxs(\"div\", { className: \"flex flex-wrap gap-4 items-center\", children: [_jsx(\"div\", { className: \"flex-1 min-w-[200px]\", children: _jsxs(\"div\", { className: \"relative\", children: [_jsx(Search, { className: \"h-4 w-4 absolute left-3 top-3 text-gray-400\" }), _jsx(Input, { placeholder: \"Search by creator or audit type...\", value: searchTerm, onChange: (e) => setSearchTerm(e.target.value), className: \"pl-10\" })] }) }), _jsxs(Select, { value: filterStatus, onValueChange: setFilterStatus, children: [_jsx(SelectTrigger, { className: \"w-[150px]\", children: _jsx(SelectValue, { placeholder: \"Status\" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: \"all\", children: \"All Status\" }), _jsx(SelectItem, { value: \"draft\", children: \"Draft\" }), _jsx(SelectItem, { value: \"submitted\", children: \"Submitted\" }), _jsx(SelectItem, { value: \"dropped\", children: \"Dropped\" })] })] }), _jsxs(Select, { value: filterType, onValueChange: setFilterType, children: [_jsx(SelectTrigger, { className: \"w-[180px]\", children: _jsx(SelectValue, { placeholder: \"Audit Type\" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: \"all\", children: \"All Types\" }), _jsx(SelectItem, { value: \"Final Inspection\", children: \"Final Inspection\" }), _jsx(SelectItem, { value: \"Washing\", children: \"Washing\" }), _jsx(SelectItem, { value: \"Bazar\", children: \"Bazar\" })] })] })] }), _jsx(\"div\", { className: \"space-y-4\", children: auditForms.length === 0 ? (_jsxs(Card, { className: \"p-8 text-center\", children: [_jsx(ClipboardCheck, { className: \"h-12 w-12 text-gray-400 mx-auto mb-4\" }), _jsx(\"h3\", { className: \"text-lg font-medium text-gray-900 mb-2\", children: \"No internal audit forms found\" }), _jsx(\"p\", { className: \"text-gray-600 mb-4\", children: \"Create your first internal audit form to get started\" }), _jsxs(Button, { onClick: handleCreateForm, variant: \"outline\", children: [_jsx(Plus, { className: \"h-4 w-4 mr-2\" }), \"Create First Internal Audit\"] })] })) : (auditForms.map((form) => (_jsx(Card, { className: \"hover:shadow-md transition-shadow\", children: _jsx(CardContent, { className: \"p-4\", children: _jsxs(\"div\", { className: \"flex items-center justify-between\", children: [_jsxs(\"div\", { className: \"flex-1\", children: [_jsxs(\"div\", { className: \"flex items-center gap-3 mb-2\", children: [_jsx(\"h3\", { className: \"font-semibold text-gray-900\", children: form.auditType }), _jsx(Badge, { variant: form.status === 'submitted' ? 'default' :\n                                                        form.status === 'draft' ? 'secondary' : 'destructive', children: form.status })] }), _jsxs(\"div\", { className: \"flex items-center gap-4 text-sm text-gray-600\", children: [_jsxs(\"span\", { children: [\"Created by: \", form.createdBy] }), _jsxs(\"span\", { children: [\"Company: \", form.company] }), form.createdAt && (_jsxs(\"span\", { children: [_jsx(Calendar, { className: \"h-4 w-4 inline mr-1\" }), new Date(form.createdAt?.seconds * 1000).toLocaleDateString()] }))] })] }), _jsxs(\"div\", { className: \"flex items-center gap-2\", children: [_jsxs(Button, { variant: \"outline\", size: \"sm\", onClick: () => handleEditForm(form.id), children: [_jsx(Eye, { className: \"h-4 w-4 mr-1\" }), form.status === 'draft' ? 'Edit' : 'View'] }), form.status === 'submitted' && (_jsxs(Button, { variant: \"outline\", size: \"sm\", children: [_jsx(Download, { className: \"h-4 w-4 mr-1\" }), \"PDF\"] }))] })] }) }) }, form.id)))) })] }));\n}\nfunction ExternalAuditView({ selectedCompany }) {\n    return (_jsxs(\"div\", { className: \"space-y-6\", children: [_jsxs(\"div\", { className: \"grid grid-cols-1 md:grid-cols-4 gap-4\", children: [_jsxs(Card, { children: [_jsx(CardHeader, { className: \"pb-2\", children: _jsx(CardTitle, { className: \"text-sm font-medium text-gray-600\", children: \"External Audits\" }) }), _jsx(CardContent, { className: \"pt-0\", children: _jsx(\"div\", { className: \"text-2xl font-bold text-purple-600\", children: \"8\" }) })] }), _jsxs(Card, { children: [_jsx(CardHeader, { className: \"pb-2\", children: _jsx(CardTitle, { className: \"text-sm font-medium text-gray-600\", children: \"Pending\" }) }), _jsx(CardContent, { className: \"pt-0\", children: _jsx(\"div\", { className: \"text-2xl font-bold text-orange-600\", children: \"2\" }) })] }), _jsxs(Card, { children: [_jsx(CardHeader, { className: \"pb-2\", children: _jsx(CardTitle, { className: \"text-sm font-medium text-gray-600\", children: \"Completed\" }) }), _jsx(CardContent, { className: \"pt-0\", children: _jsx(\"div\", { className: \"text-2xl font-bold text-green-600\", children: \"5\" }) })] }), _jsxs(Card, { children: [_jsx(CardHeader, { className: \"pb-2\", children: _jsx(CardTitle, { className: \"text-sm font-medium text-gray-600\", children: \"Failed\" }) }), _jsx(CardContent, { className: \"pt-0\", children: _jsx(\"div\", { className: \"text-2xl font-bold text-red-600\", children: \"1\" }) })] })] }), _jsxs(Card, { className: \"p-8 text-center\", children: [_jsx(AlertTriangle, { className: \"h-12 w-12 text-purple-400 mx-auto mb-4\" }), _jsx(\"h3\", { className: \"text-lg font-medium text-gray-900 mb-2\", children: \"External Audits Coming Soon\" }), _jsx(\"p\", { className: \"text-gray-600 mb-4\", children: \"External audit management system for third-party auditors and certification bodies\" }), _jsxs(\"div\", { className: \"text-sm text-gray-500\", children: [\"Features will include:\", _jsxs(\"ul\", { className: \"mt-2 space-y-1\", children: [_jsx(\"li\", { children: \"\\u2022 Third-party auditor management\" }), _jsx(\"li\", { children: \"\\u2022 Certification tracking\" }), _jsx(\"li\", { children: \"\\u2022 Compliance reports\" }), _jsx(\"li\", { children: \"\\u2022 Audit scheduling\" })] })] })] })] }));\n}\n",
      "size": 11748
    },
    {
      "path": "client/src/components/AuditFormEditor.js",
      "content": "import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\nimport { Button } from './ui/button';\nimport { Input } from './ui/input';\nimport { Textarea } from './ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';\nimport { Badge } from './ui/badge';\nimport { ArrowLeft, Save, Send, Plus, Trash2 } from 'lucide-react';\nimport { useAuditForm, useAuditForms } from '../hooks/useAuditForms';\nimport { useToast } from '../hooks/use-toast';\nexport function AuditFormEditor({ formId, selectedCompany, onClose }) {\n    const { toast } = useToast();\n    const { auditForm, isLoading } = useAuditForm(formId || '');\n    const { createAuditForm, updateAuditForm, isCreating, isUpdating } = useAuditForms();\n    const [formData, setFormData] = useState({\n        createdBy: 'abdulansari@easternmills.com', // This would come from auth context\n        status: 'draft',\n        company: selectedCompany === 'EHI' ? 'Eastern Home Industries' : 'Eastern Mills Pvt. Ltd.',\n        auditType: 'Final Inspection',\n        sections: []\n    });\n    useEffect(() => {\n        if (auditForm && formId) {\n            setFormData({\n                createdBy: auditForm.createdBy,\n                status: auditForm.status,\n                company: auditForm.company,\n                auditType: auditForm.auditType,\n                sections: auditForm.sections || []\n            });\n        }\n    }, [auditForm, formId]);\n    const addSection = () => {\n        const newSection = {\n            title: '',\n            questions: []\n        };\n        setFormData(prev => ({\n            ...prev,\n            sections: [...prev.sections, newSection]\n        }));\n    };\n    const updateSection = (sectionIndex, title) => {\n        setFormData(prev => ({\n            ...prev,\n            sections: prev.sections.map((section, index) => index === sectionIndex ? { ...section, title } : section)\n        }));\n    };\n    const removeSection = (sectionIndex) => {\n        setFormData(prev => ({\n            ...prev,\n            sections: prev.sections.filter((_, index) => index !== sectionIndex)\n        }));\n    };\n    const addQuestion = (sectionIndex) => {\n        const newQuestion = {\n            question: '',\n            answer: '',\n            comments: '',\n            images: []\n        };\n        setFormData(prev => ({\n            ...prev,\n            sections: prev.sections.map((section, index) => index === sectionIndex\n                ? { ...section, questions: [...section.questions, newQuestion] }\n                : section)\n        }));\n    };\n    const updateQuestion = (sectionIndex, questionIndex, field, value) => {\n        setFormData(prev => ({\n            ...prev,\n            sections: prev.sections.map((section, sIndex) => sIndex === sectionIndex\n                ? {\n                    ...section,\n                    questions: section.questions.map((question, qIndex) => qIndex === questionIndex ? { ...question, [field]: value } : question)\n                }\n                : section)\n        }));\n    };\n    const removeQuestion = (sectionIndex, questionIndex) => {\n        setFormData(prev => ({\n            ...prev,\n            sections: prev.sections.map((section, sIndex) => sIndex === sectionIndex\n                ? { ...section, questions: section.questions.filter((_, qIndex) => qIndex !== questionIndex) }\n                : section)\n        }));\n    };\n    const handleSave = async () => {\n        try {\n            if (formId) {\n                await updateAuditForm({ id: formId, ...formData });\n                toast({ title: \"✅ Audit form updated successfully\" });\n            }\n            else {\n                await createAuditForm(formData);\n                toast({ title: \"✅ Audit form created successfully\" });\n            }\n        }\n        catch (error) {\n            toast({\n                title: \"❌ Error\",\n                description: \"Failed to save audit form\",\n                variant: \"destructive\"\n            });\n        }\n    };\n    const handleSubmit = async () => {\n        try {\n            const submitData = { ...formData, status: 'submitted' };\n            if (formId) {\n                await updateAuditForm({ id: formId, ...submitData });\n                toast({ title: \"✅ Audit form submitted successfully\" });\n            }\n            else {\n                await createAuditForm(submitData);\n                toast({ title: \"✅ Audit form created and submitted successfully\" });\n            }\n            onClose();\n        }\n        catch (error) {\n            toast({\n                title: \"❌ Error\",\n                description: \"Failed to submit audit form\",\n                variant: \"destructive\"\n            });\n        }\n    };\n    if (isLoading && formId) {\n        return (_jsx(\"div\", { className: \"flex items-center justify-center p-8\", children: _jsxs(\"div\", { className: \"text-center\", children: [_jsx(\"div\", { className: \"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4\" }), _jsx(\"p\", { className: \"text-gray-600\", children: \"Loading audit form...\" })] }) }));\n    }\n    const isReadOnly = formData.status === 'submitted';\n    return (_jsxs(\"div\", { className: \"space-y-6\", children: [_jsxs(\"div\", { className: \"flex items-center justify-between\", children: [_jsxs(\"div\", { className: \"flex items-center gap-4\", children: [_jsxs(Button, { variant: \"outline\", onClick: onClose, children: [_jsx(ArrowLeft, { className: \"h-4 w-4 mr-2\" }), \"Back to Dashboard\"] }), _jsxs(\"div\", { children: [_jsx(\"h2\", { className: \"text-2xl font-bold text-gray-900\", children: formId ? 'Edit Audit Form' : 'Create New Audit Form' }), _jsx(\"p\", { className: \"text-gray-600\", children: isReadOnly ? 'Viewing submitted audit form' : 'Configure sections and questions for your audit' })] })] }), formData.status && (_jsx(Badge, { variant: formData.status === 'submitted' ? 'default' : 'secondary', children: formData.status }))] }), _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, { children: \"Audit Details\" }) }), _jsx(CardContent, { className: \"space-y-4\", children: _jsxs(\"div\", { className: \"grid grid-cols-1 md:grid-cols-2 gap-4\", children: [_jsxs(\"div\", { children: [_jsx(\"label\", { className: \"block text-sm font-medium text-gray-700 mb-2\", children: \"Audit Type\" }), _jsxs(Select, { value: formData.auditType, onValueChange: (value) => setFormData(prev => ({ ...prev, auditType: value })), disabled: isReadOnly, children: [_jsx(SelectTrigger, { children: _jsx(SelectValue, {}) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: \"Final Inspection\", children: \"Final Inspection\" }), _jsx(SelectItem, { value: \"Washing\", children: \"Washing\" }), _jsx(SelectItem, { value: \"Bazar\", children: \"Bazar\" })] })] })] }), _jsxs(\"div\", { children: [_jsx(\"label\", { className: \"block text-sm font-medium text-gray-700 mb-2\", children: \"Company\" }), _jsx(Input, { value: formData.company, onChange: (e) => setFormData(prev => ({ ...prev, company: e.target.value })), disabled: isReadOnly })] })] }) })] }), _jsxs(\"div\", { className: \"space-y-4\", children: [_jsxs(\"div\", { className: \"flex items-center justify-between\", children: [_jsx(\"h3\", { className: \"text-lg font-semibold text-gray-900\", children: \"Audit Sections\" }), !isReadOnly && (_jsxs(Button, { onClick: addSection, variant: \"outline\", children: [_jsx(Plus, { className: \"h-4 w-4 mr-2\" }), \"Add Section\"] }))] }), formData.sections.length === 0 ? (_jsxs(Card, { className: \"p-8 text-center\", children: [_jsx(\"h3\", { className: \"text-lg font-medium text-gray-900 mb-2\", children: \"No sections yet\" }), _jsx(\"p\", { className: \"text-gray-600 mb-4\", children: \"Add your first section to start building your audit form\" }), !isReadOnly && (_jsxs(Button, { onClick: addSection, children: [_jsx(Plus, { className: \"h-4 w-4 mr-2\" }), \"Add First Section\"] }))] })) : (formData.sections.map((section, sectionIndex) => (_jsxs(Card, { children: [_jsx(CardHeader, { children: _jsxs(\"div\", { className: \"flex items-center justify-between\", children: [_jsx(Input, { value: section.title, onChange: (e) => updateSection(sectionIndex, e.target.value), placeholder: \"Section title (e.g., Packing, Quality Check)\", className: \"text-lg font-semibold\", disabled: isReadOnly }), !isReadOnly && (_jsx(Button, { variant: \"ghost\", size: \"sm\", onClick: () => removeSection(sectionIndex), children: _jsx(Trash2, { className: \"h-4 w-4\" }) }))] }) }), _jsxs(CardContent, { className: \"space-y-4\", children: [section.questions.map((question, questionIndex) => (_jsxs(\"div\", { className: \"border rounded-lg p-4 space-y-3\", children: [_jsxs(\"div\", { className: \"flex items-start justify-between gap-4\", children: [_jsxs(\"div\", { className: \"flex-1\", children: [_jsx(\"label\", { className: \"block text-sm font-medium text-gray-700 mb-2\", children: \"Question\" }), _jsx(Input, { value: question.question, onChange: (e) => updateQuestion(sectionIndex, questionIndex, 'question', e.target.value), placeholder: \"Enter your question...\", disabled: isReadOnly })] }), !isReadOnly && (_jsx(Button, { variant: \"ghost\", size: \"sm\", onClick: () => removeQuestion(sectionIndex, questionIndex), children: _jsx(Trash2, { className: \"h-4 w-4\" }) }))] }), _jsxs(\"div\", { className: \"grid grid-cols-1 md:grid-cols-2 gap-4\", children: [_jsxs(\"div\", { children: [_jsx(\"label\", { className: \"block text-sm font-medium text-gray-700 mb-2\", children: \"Answer\" }), _jsxs(Select, { value: question.answer, onValueChange: (value) => updateQuestion(sectionIndex, questionIndex, 'answer', value), disabled: isReadOnly, children: [_jsx(SelectTrigger, { children: _jsx(SelectValue, { placeholder: \"Select answer\" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: \"\", children: \"Not answered\" }), _jsx(SelectItem, { value: \"Yes\", children: \"Yes\" }), _jsx(SelectItem, { value: \"No\", children: \"No\" }), _jsx(SelectItem, { value: \"Pass\", children: \"Pass\" }), _jsx(SelectItem, { value: \"Fail\", children: \"Fail\" })] })] })] }), _jsxs(\"div\", { children: [_jsx(\"label\", { className: \"block text-sm font-medium text-gray-700 mb-2\", children: \"Comments\" }), _jsx(Textarea, { value: question.comments, onChange: (e) => updateQuestion(sectionIndex, questionIndex, 'comments', e.target.value), placeholder: \"Additional comments...\", className: \"min-h-[80px]\", disabled: isReadOnly })] })] })] }, questionIndex))), !isReadOnly && (_jsxs(Button, { variant: \"outline\", onClick: () => addQuestion(sectionIndex), className: \"w-full\", children: [_jsx(Plus, { className: \"h-4 w-4 mr-2\" }), \"Add Question\"] }))] })] }, sectionIndex))))] }), !isReadOnly && (_jsxs(\"div\", { className: \"flex justify-end gap-4 pt-6 border-t\", children: [_jsxs(Button, { variant: \"outline\", onClick: handleSave, disabled: isCreating || isUpdating, children: [_jsx(Save, { className: \"h-4 w-4 mr-2\" }), \"Save Draft\"] }), _jsxs(Button, { onClick: handleSubmit, disabled: isCreating || isUpdating, className: \"bg-green-600 hover:bg-green-700\", children: [_jsx(Send, { className: \"h-4 w-4 mr-2\" }), \"Submit Audit\"] })] }))] }));\n}\n",
      "size": 11177
    },
    {
      "path": "client/src/components/ComplianceDashboard.js",
      "content": "import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useState, useEffect } from 'react';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent } from './ui/card';\nimport { Button } from './ui/button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';\nimport { Badge } from './ui/badge';\nimport { Input } from './ui/input';\nimport { Plus, FileText, Eye, Download, Edit, Trash2, Clock, Calendar, CheckCircle, XCircle, Search, ShieldCheck, TrendingUp, BarChart3 } from 'lucide-react';\nimport { useComplianceAudit } from '../hooks/useComplianceAudit';\nimport { useToast } from '../hooks/use-toast';\nimport { ComplianceAuditForm } from './ComplianceAuditForm';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';\nexport function ComplianceDashboard({ selectedCompany }) {\n    const { toast } = useToast();\n    const queryClient = useQueryClient();\n    const { audits, draftAudits, submittedAudits, isLoading: auditsLoading, deleteAuditMutation } = useComplianceAudit();\n    const [activeTab, setActiveTab] = useState('overview');\n    const [searchTerm, setSearchTerm] = useState('');\n    const [showCreateForm, setShowCreateForm] = useState(false);\n    const [currentCompany, setCurrentCompany] = useState(selectedCompany);\n    const [editingAudit, setEditingAudit] = useState(null);\n    const [isRefreshing, setIsRefreshing] = useState(false);\n    // Update when selectedCompany changes\n    useEffect(() => {\n        setCurrentCompany(selectedCompany);\n    }, [selectedCompany]);\n    // Listen for real-time audit updates via window events\n    useEffect(() => {\n        const handleAuditUpdate = () => {\n            console.log('🔄 Received audit update event, refreshing data...');\n            setIsRefreshing(true);\n            // Force refresh the audits data\n            queryClient.invalidateQueries({ queryKey: ['compliance-audits'] });\n            queryClient.invalidateQueries({ queryKey: ['/api/audit'] }); // Also refresh new audit API\n            setTimeout(() => setIsRefreshing(false), 1500);\n        };\n        // Listen for both old and new event types\n        window.addEventListener('compliance-audit-saved', handleAuditUpdate);\n        window.addEventListener('compliance-audit-submitted', handleAuditUpdate);\n        window.addEventListener('auditSaved', handleAuditUpdate); // New event from AuditFormV2\n        return () => {\n            window.removeEventListener('compliance-audit-saved', handleAuditUpdate);\n            window.removeEventListener('compliance-audit-submitted', handleAuditUpdate);\n            window.removeEventListener('auditSaved', handleAuditUpdate);\n        };\n    }, [queryClient]);\n    // Show form if requested\n    if (showCreateForm) {\n        return (_jsx(ComplianceAuditForm, { company: currentCompany, onBack: () => setShowCreateForm(false), existingAudit: editingAudit }));\n    }\n    // Filter data by company and search term\n    const companyAudits = audits.filter((audit) => audit.company === currentCompany &&\n        (audit.auditorName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n            audit.location?.toLowerCase().includes(searchTerm.toLowerCase())));\n    const companyDraftAudits = draftAudits.filter((audit) => audit.company === currentCompany &&\n        (audit.auditorName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n            audit.location?.toLowerCase().includes(searchTerm.toLowerCase())));\n    const companySubmittedAudits = submittedAudits.filter((audit) => audit.company === currentCompany &&\n        (audit.auditorName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n            audit.location?.toLowerCase().includes(searchTerm.toLowerCase())));\n    // Calculate metrics\n    const totalAudits = companyAudits.length;\n    const totalDrafts = companyDraftAudits.length;\n    const totalSubmitted = companySubmittedAudits.length;\n    // This week calculations\n    const oneWeekAgo = new Date();\n    oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\n    const submittedThisWeek = companySubmittedAudits.filter((audit) => {\n        const submittedDate = audit.submittedAt ? new Date(audit.submittedAt) : null;\n        return submittedDate && submittedDate >= oneWeekAgo;\n    }).length;\n    // Pass rate calculation (assuming score > 80 is pass)\n    const auditssWithScores = companySubmittedAudits.filter((audit) => audit.scoreData?.score !== undefined);\n    const passedAudits = auditssWithScores.filter((audit) => (audit.scoreData?.score || 0) >= 80);\n    const passRate = auditssWithScores.length > 0 ? Math.round((passedAudits.length / auditssWithScores.length) * 100) : 0;\n    const failedAudits = auditssWithScores.filter((audit) => (audit.scoreData?.score || 0) < 80).length;\n    const handleDeleteAudit = async (auditId) => {\n        if (window.confirm('Are you sure you want to delete this audit? This action cannot be undone.')) {\n            try {\n                await deleteAuditMutation.mutateAsync(auditId);\n                toast({\n                    title: \"✅ Audit Deleted\",\n                    description: \"Compliance audit has been successfully deleted.\",\n                });\n            }\n            catch (error) {\n                toast({\n                    title: \"❌ Delete Failed\",\n                    description: \"Failed to delete audit. Please try again.\",\n                    variant: \"destructive\",\n                });\n            }\n        }\n    };\n    const handleViewAudit = (audit) => {\n        // Open the audit in a new tab/window using the HTML view route\n        const viewUrl = `/api/audits/compliance/${audit.id}/view`;\n        window.open(viewUrl, '_blank', 'width=1200,height=800,scrollbars=yes,resizable=yes');\n    };\n    const handleDownloadPDF = async (audit) => {\n        try {\n            setIsRefreshing(true);\n            // Create download URL for the audit PDF\n            const downloadUrl = `/api/audits/compliance/${audit.id}/pdf`;\n            // Create a temporary anchor element to trigger download\n            const link = document.createElement('a');\n            link.href = downloadUrl;\n            link.download = `compliance-audit-${audit.company}-${audit.id}.pdf`;\n            // Append to body, click, and remove\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n            toast({\n                title: \"Success\",\n                description: \"📄 PDF download started\",\n            });\n        }\n        catch (error) {\n            console.error('PDF download error:', error);\n            toast({\n                title: \"Error\",\n                description: \"❌ Failed to download PDF\",\n                variant: \"destructive\",\n            });\n        }\n        finally {\n            setIsRefreshing(false);\n        }\n    };\n    const formatDate = (dateString) => {\n        if (!dateString)\n            return 'No date';\n        try {\n            return new Date(dateString).toLocaleDateString();\n        }\n        catch {\n            return 'Invalid date';\n        }\n    };\n    const formatTimeAgo = (dateString) => {\n        if (!dateString)\n            return 'Unknown';\n        try {\n            const date = new Date(dateString);\n            const now = new Date();\n            const diffInHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60));\n            if (diffInHours < 1)\n                return 'Just now';\n            if (diffInHours < 24)\n                return `${diffInHours}h ago`;\n            const diffInDays = Math.floor(diffInHours / 24);\n            if (diffInDays < 7)\n                return `${diffInDays}d ago`;\n            const diffInWeeks = Math.floor(diffInDays / 7);\n            return `${diffInWeeks}w ago`;\n        }\n        catch {\n            return 'Unknown';\n        }\n    };\n    const MetricCard = ({ title, value, icon: Icon, description, color }) => (_jsx(Card, { className: \"border-0 shadow-sm\", children: _jsx(CardContent, { className: \"p-3 sm:p-4\", children: _jsxs(\"div\", { className: \"flex items-center justify-between\", children: [_jsxs(\"div\", { className: \"flex-1 min-w-0\", children: [_jsx(\"p\", { className: \"text-xs sm:text-sm font-medium text-gray-600 truncate\", children: title }), _jsx(\"p\", { className: `text-lg sm:text-2xl font-bold ${color} truncate`, children: value }), _jsx(\"p\", { className: \"text-xs text-gray-500 mt-1 truncate\", children: description })] }), _jsx(\"div\", { className: `p-2 sm:p-3 rounded-full flex-shrink-0 ml-2 ${color.includes('blue') ? 'bg-blue-100' : color.includes('green') ? 'bg-green-100' : color.includes('red') ? 'bg-red-100' : 'bg-gray-100'}`, children: _jsx(Icon, { className: `h-4 w-4 sm:h-6 sm:w-6 ${color}` }) })] }) }) }));\n    const AuditCard = ({ audit, showStatus = true }) => (_jsx(Card, { className: \"border-0 shadow-sm hover:shadow-md transition-shadow\", children: _jsxs(CardContent, { className: \"p-4\", children: [_jsxs(\"div\", { className: \"flex items-start justify-between mb-3\", children: [_jsxs(\"div\", { className: \"flex-1\", children: [_jsx(\"h3\", { className: \"font-semibold text-gray-900 mb-1\", children: `${audit.auditorName} - ${audit.location}` }), _jsxs(\"div\", { className: \"flex items-center gap-4 text-sm text-gray-500\", children: [_jsxs(\"span\", { className: \"flex items-center gap-1\", children: [_jsx(Calendar, { className: \"h-3 w-3\" }), formatDate(audit.createdAt?.toString())] }), _jsxs(\"span\", { className: \"flex items-center gap-1\", children: [_jsx(Clock, { className: \"h-3 w-3\" }), formatTimeAgo(audit.updatedAt?.toString())] })] })] }), showStatus && (_jsx(Badge, { variant: audit.status === 'submitted' ? 'default' : 'secondary', children: audit.status === 'submitted' ? 'Submitted' : 'Draft' }))] }), audit.scoreData?.score !== undefined && (_jsxs(\"div\", { className: \"mb-3\", children: [_jsxs(\"div\", { className: \"flex items-center justify-between text-sm\", children: [_jsx(\"span\", { className: \"truncate\", children: \"Compliance Score\" }), _jsxs(\"span\", { className: `font-medium ml-2 flex-shrink-0 ${audit.scoreData.score >= 80 ? 'text-green-600' : 'text-red-600'}`, children: [audit.scoreData.score, \"%\"] })] }), _jsx(\"div\", { className: \"w-full bg-gray-200 rounded-full h-2 mt-1 overflow-hidden\", children: _jsx(\"div\", { className: `h-2 rounded-full transition-all duration-300 ${audit.scoreData.score >= 80 ? 'bg-green-500' : 'bg-red-500'}`, style: { width: `${Math.min(100, Math.max(0, audit.scoreData.score))}%` } }) })] })), _jsx(\"div\", { className: \"flex flex-col sm:flex-row items-stretch sm:items-center gap-2\", children: _jsxs(\"div\", { className: \"flex gap-2 flex-1\", children: [_jsxs(Button, { size: \"sm\", variant: \"outline\", onClick: () => handleViewAudit(audit), className: \"flex-1 sm:flex-none\", children: [_jsx(Eye, { className: \"h-3 w-3 mr-1\" }), _jsx(\"span\", { className: \"hidden sm:inline\", children: \"View\" })] }), audit.status === 'draft' && (_jsxs(Button, { size: \"sm\", variant: \"outline\", onClick: () => {\n                                    setEditingAudit(audit);\n                                    setShowCreateForm(true);\n                                }, className: \"flex-1 sm:flex-none\", children: [_jsx(Edit, { className: \"h-3 w-3 mr-1\" }), _jsx(\"span\", { className: \"hidden sm:inline\", children: \"Edit\" })] })), audit.status === 'submitted' && (_jsxs(Button, { size: \"sm\", variant: \"outline\", onClick: () => handleDownloadPDF(audit), className: \"flex-1 sm:flex-none\", disabled: isRefreshing, children: [_jsx(Download, { className: \"h-3 w-3 mr-1\" }), _jsx(\"span\", { className: \"hidden sm:inline\", children: \"PDF\" })] })), audit.status === 'draft' && (_jsxs(Button, { size: \"sm\", variant: \"outline\", onClick: () => handleDeleteAudit(audit.id), className: \"text-red-600 hover:text-red-700 hover:bg-red-50 flex-1 sm:flex-none\", children: [_jsx(Trash2, { className: \"h-3 w-3\" }), _jsx(\"span\", { className: \"hidden sm:inline ml-1\", children: \"Delete\" })] }))] }) })] }) }));\n    if (auditsLoading) {\n        return (_jsxs(\"div\", { className: \"p-8 text-center\", children: [_jsx(\"div\", { className: \"animate-spin h-8 w-8 border-2 border-blue-500 border-t-transparent rounded-full mx-auto mb-4\" }), _jsx(\"p\", { className: \"text-gray-600\", children: \"Loading compliance audits...\" })] }));\n    }\n    return (_jsxs(\"div\", { className: \"bg-white\", children: [_jsxs(\"div\", { className: \"bg-white border-b p-3 sm:p-6\", children: [_jsxs(\"div\", { className: \"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4 mb-4\", children: [_jsxs(\"div\", { className: \"flex-1\", children: [_jsx(\"h2\", { className: \"text-lg sm:text-xl font-bold text-gray-900 mb-2 lg:mb-0\", children: \"Compliance Audits\" }), _jsxs(\"div\", { className: \"flex flex-col sm:flex-row sm:items-center gap-2 sm:gap-4\", children: [_jsx(\"span\", { className: \"text-sm text-gray-600\", children: \"Company:\" }), _jsxs(Select, { value: currentCompany, onValueChange: (value) => setCurrentCompany(value), children: [_jsx(SelectTrigger, { className: \"w-full sm:w-64\", children: _jsx(SelectValue, {}) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: \"EHI\", children: \"Eastern Home Industries\" }), _jsx(SelectItem, { value: \"EMPL\", children: \"Eastern Mills Private Limited\" })] })] })] })] }), _jsx(Button, { onClick: () => setShowCreateForm(true), className: \"w-full lg:w-auto bg-blue-600 hover:bg-blue-700 text-sm sm:text-base\", disabled: isRefreshing, children: isRefreshing ? (_jsxs(_Fragment, { children: [_jsx(\"div\", { className: \"animate-spin h-4 w-4 mr-2 border-2 border-white border-t-transparent rounded-full\" }), \"Refreshing...\"] })) : (_jsxs(_Fragment, { children: [_jsx(Plus, { className: \"h-4 w-4 mr-2\" }), _jsx(\"span\", { className: \"hidden sm:inline\", children: \"New Compliance Audit\" }), _jsx(\"span\", { className: \"sm:hidden\", children: \"+ New Audit\" })] })) })] }), _jsxs(\"div\", { className: \"relative\", children: [_jsx(Search, { className: \"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" }), _jsx(Input, { placeholder: \"Search audits by auditor, location, or title...\", value: searchTerm, onChange: (e) => setSearchTerm(e.target.value), className: \"pl-10\" })] })] }), _jsx(\"div\", { className: \"p-3 sm:p-6\", children: _jsxs(Tabs, { value: activeTab, onValueChange: setActiveTab, className: \"w-full\", children: [_jsxs(TabsList, { className: \"grid w-full grid-cols-3 mb-6 bg-blue-50\", children: [_jsx(TabsTrigger, { value: \"overview\", className: \"data-[state=active]:bg-white data-[state=active]:text-blue-700\", children: \"Overview\" }), _jsxs(TabsTrigger, { value: \"drafts\", className: \"data-[state=active]:bg-white data-[state=active]:text-blue-700\", children: [\"Drafts (\", totalDrafts, \")\"] }), _jsxs(TabsTrigger, { value: \"submitted\", className: \"data-[state=active]:bg-white data-[state=active]:text-blue-700\", children: [\"Submitted (\", totalSubmitted, \")\"] })] }), _jsxs(TabsContent, { value: \"overview\", className: \"mt-0\", children: [_jsxs(\"div\", { className: \"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-3 sm:gap-4 mb-6\", children: [_jsx(MetricCard, { title: \"Total Audits\", value: totalAudits, icon: ShieldCheck, description: \"All compliance audits\", color: \"text-blue-600\" }), _jsx(MetricCard, { title: \"Draft Audits\", value: totalDrafts, icon: FileText, description: \"In progress\", color: \"text-yellow-600\" }), _jsx(MetricCard, { title: \"Submitted Audits\", value: totalSubmitted, icon: CheckCircle, description: \"Completed audits\", color: \"text-green-600\" }), _jsx(MetricCard, { title: \"Submitted This Week\", value: submittedThisWeek, icon: TrendingUp, description: \"Last 7 days\", color: \"text-blue-600\" }), _jsx(MetricCard, { title: \"Pass Rate\", value: `${passRate}%`, icon: BarChart3, description: \"Score \\u2265 80%\", color: \"text-green-600\" }), _jsx(MetricCard, { title: \"Failed Audits\", value: failedAudits, icon: XCircle, description: \"Score < 80%\", color: \"text-red-600\" })] }), _jsxs(\"div\", { children: [_jsx(\"h3\", { className: \"text-lg font-semibold text-gray-900 mb-4\", children: \"Recent Audits\" }), companyAudits.length === 0 ? (_jsx(Card, { className: \"border-dashed border-2 border-gray-300\", children: _jsxs(CardContent, { className: \"p-8 text-center\", children: [_jsx(ShieldCheck, { className: \"h-12 w-12 text-gray-400 mx-auto mb-4\" }), _jsx(\"h3\", { className: \"text-lg font-semibold text-gray-900 mb-2\", children: \"No audits found\" }), _jsx(\"p\", { className: \"text-gray-600 mb-4\", children: \"Create your first compliance audit to get started\" }), _jsxs(Button, { onClick: () => setShowCreateForm(true), className: \"bg-blue-600 hover:bg-blue-700\", children: [_jsx(Plus, { className: \"h-4 w-4 mr-2\" }), \"Create First Audit\"] })] }) })) : (_jsx(\"div\", { className: \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\", children: companyAudits.slice(0, 6).map((audit) => (_jsx(AuditCard, { audit: audit }, audit.id))) }))] })] }), _jsx(TabsContent, { value: \"drafts\", className: \"mt-0\", children: _jsxs(\"div\", { className: \"space-y-4\", children: [_jsx(\"h3\", { className: \"text-lg font-semibold text-gray-900\", children: \"Draft Audits\" }), companyDraftAudits.length === 0 ? (_jsx(Card, { className: \"border-dashed border-2 border-gray-300\", children: _jsxs(CardContent, { className: \"p-8 text-center\", children: [_jsx(FileText, { className: \"h-12 w-12 text-gray-400 mx-auto mb-4\" }), _jsx(\"h3\", { className: \"text-lg font-semibold text-gray-900 mb-2\", children: \"No draft audits\" }), _jsx(\"p\", { className: \"text-gray-600\", children: \"All audits have been completed and submitted\" })] }) })) : (_jsx(\"div\", { className: \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\", children: companyDraftAudits.map((audit) => (_jsx(AuditCard, { audit: audit, showStatus: false }, audit.id))) }))] }) }), _jsx(TabsContent, { value: \"submitted\", className: \"mt-0\", children: _jsxs(\"div\", { className: \"space-y-4\", children: [_jsx(\"h3\", { className: \"text-lg font-semibold text-gray-900\", children: \"Submitted Audits\" }), companySubmittedAudits.length === 0 ? (_jsx(Card, { className: \"border-dashed border-2 border-gray-300\", children: _jsxs(CardContent, { className: \"p-8 text-center\", children: [_jsx(CheckCircle, { className: \"h-12 w-12 text-gray-400 mx-auto mb-4\" }), _jsx(\"h3\", { className: \"text-lg font-semibold text-gray-900 mb-2\", children: \"No submitted audits\" }), _jsx(\"p\", { className: \"text-gray-600\", children: \"Complete and submit audits to see them here\" })] }) })) : (_jsx(\"div\", { className: \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\", children: companySubmittedAudits.map((audit) => (_jsx(AuditCard, { audit: audit, showStatus: false }, audit.id))) }))] }) })] }) })] }));\n}\n",
      "size": 18674
    },
    {
      "path": "test-clean-audits.js",
      "content": "// Test script for the new clean audit system\nconst BASE_URL = 'http://localhost:5001/api/v2';\n\nasync function testComplianceAudits() {\n  console.log('🧪 Testing Compliance Audits API...\\n');\n\n  try {\n    // Test 1: Create a new compliance audit\n    console.log('📝 Test 1: Creating compliance audit...');\n    const newAudit = {\n      company: 'EHI',\n      auditorName: 'Test Auditor',\n      location: 'Main Factory',\n      auditScope: 'Complete compliance verification',\n      auditDate: '2025-01-29',\n      checklist: [\n        {\n          code: 'C1',\n          question: 'Are design and development procedures established?',\n          response: 'Yes',\n          remarks: 'Comprehensive procedures in place',\n          evidence: []\n        },\n        {\n          code: 'C2', \n          question: 'Are design input requirements identified and reviewed?',\n          response: 'No',\n          remarks: 'Needs improvement in documentation',\n          evidence: []\n        }\n      ],\n      status: 'draft',\n      createdBy: 'test-script'\n    };\n\n    const createResponse = await fetch(`${BASE_URL}/compliance-audits`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(newAudit)\n    });\n\n    if (!createResponse.ok) {\n      throw new Error(`Create failed: ${createResponse.status}`);\n    }\n\n    const createResult = await createResponse.json();\n    console.log('✅ Created audit:', createResult.id);\n    const auditId = createResult.id;\n\n    // Test 2: Fetch the created audit\n    console.log('\\n📋 Test 2: Fetching created audit...');\n    const fetchResponse = await fetch(`${BASE_URL}/compliance-audits/${auditId}`);\n    \n    if (!fetchResponse.ok) {\n      throw new Error(`Fetch failed: ${fetchResponse.status}`);\n    }\n\n    const audit = await fetchResponse.json();\n    console.log('✅ Fetched audit:', audit.audit.auditorName);\n    console.log('   Checklist items:', audit.audit.checklist.length);\n\n    // Test 3: Update the audit\n    console.log('\\n📝 Test 3: Updating audit...');\n    const updateData = {\n      ...audit.audit,\n      checklist: [\n        ...audit.audit.checklist,\n        {\n          code: 'C3',\n          question: 'Are design reviews conducted at key stages?',\n          response: 'Yes',\n          remarks: 'Regular review meetings held',\n          evidence: []\n        }\n      ],\n      status: 'submitted'\n    };\n\n    const updateResponse = await fetch(`${BASE_URL}/compliance-audits/${auditId}`, {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(updateData)\n    });\n\n    if (!updateResponse.ok) {\n      throw new Error(`Update failed: ${updateResponse.status}`);\n    }\n\n    console.log('✅ Updated audit successfully');\n\n    // Test 4: List all audits\n    console.log('\\n📋 Test 4: Listing all audits...');\n    const listResponse = await fetch(`${BASE_URL}/compliance-audits`);\n    \n    if (!listResponse.ok) {\n      throw new Error(`List failed: ${listResponse.status}`);\n    }\n\n    const allAudits = await listResponse.json();\n    console.log('✅ Found audits:', allAudits.audits.length);\n    console.log('   Draft audits:', allAudits.audits.filter(a => a.status === 'draft').length);\n    console.log('   Submitted audits:', allAudits.audits.filter(a => a.status === 'submitted').length);\n\n    console.log('\\n🎉 Compliance Audits API tests PASSED!');\n\n  } catch (error) {\n    console.error('❌ Compliance Audits test failed:', error.message);\n  }\n}\n\nasync function testLabInspections() {\n  console.log('\\n🔬 Testing Lab Inspections API...\\n');\n\n  try {\n    // Test 1: Create a new lab inspection\n    console.log('📝 Test 1: Creating lab inspection...');\n    const newInspection = {\n      company: 'EHI',\n      inspectionType: 'dyed',\n      dateOfIncoming: '2025-01-29',\n      challanInvoiceNo: 'CH001',\n      supplierName: 'Test Supplier Ltd',\n      transportCondition: 'ok',\n      materialDetails: 'Wool yarn - Red color',\n      lotNo: 'LOT001',\n      articleName: 'Premium Wool',\n      tagNo: 'TAG001',\n      shadeNo: 'RED001',\n      qty: '100 KG',\n      programQty: '100 KG', // Added programQty explicitly\n      selectedHanks: 50,\n      sampleResults: [\n        {\n          sampleNumber: 1,\n          results: {\n            'Color Fastness to rubbing (Dry)': 'Pass',\n            'Color Fastness to rubbing (Wet)': 'Pass'\n          }\n        }\n      ],\n      overallStatus: 'pass',\n      remarks: 'All tests passed successfully',\n      checkedBy: 'Lab Technician',\n      status: 'draft',\n      createdBy: 'test-script'\n    };\n\n    const createResponse = await fetch(`${BASE_URL}/lab-inspections`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(newInspection)\n    });\n\n    if (!createResponse.ok) {\n      throw new Error(`Create failed: ${createResponse.status}`);\n    }\n\n    const createResult = await createResponse.json();\n    console.log('✅ Created inspection:', createResult.id);\n    const inspectionId = createResult.id;\n\n    // Test 2: Update the inspection to submitted\n    console.log('\\n📝 Test 2: Submitting inspection...');\n    const updateResponse = await fetch(`${BASE_URL}/lab-inspections/${inspectionId}`, {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        ...newInspection,\n        status: 'submitted',\n        verifiedBy: 'Quality Manager'\n      })\n    });\n\n    if (!updateResponse.ok) {\n      throw new Error(`Update failed: ${updateResponse.status}`);\n    }\n\n    console.log('✅ Submitted inspection successfully');\n\n    // Test 3: List all inspections\n    console.log('\\n📋 Test 3: Listing all inspections...');\n    const listResponse = await fetch(`${BASE_URL}/lab-inspections`);\n    \n    if (!listResponse.ok) {\n      throw new Error(`List failed: ${listResponse.status}`);\n    }\n\n    const allInspections = await listResponse.json();\n    console.log('✅ Found inspections:', allInspections.inspections.length);\n    console.log('   Draft inspections:', allInspections.inspections.filter(i => i.status === 'draft').length);\n    console.log('   Submitted inspections:', allInspections.inspections.filter(i => i.status === 'submitted').length);\n\n    console.log('\\n🎉 Lab Inspections API tests PASSED!');\n\n  } catch (error) {\n    console.error('❌ Lab Inspections test failed:', error.message);\n  }\n}\n\nasync function runTests() {\n  console.log('🚀 Starting Clean Audit System Tests\\n');\n  console.log('=' .repeat(50));\n  \n  await testComplianceAudits();\n  await testLabInspections();\n  \n  console.log('\\n' + '='.repeat(50));\n  console.log('🏁 All tests completed!');\n}\n\nrunTests().catch(console.error);",
      "size": 6719
    },
    {
      "path": "test-compliance-api.mjs",
      "content": "import admin from 'firebase-admin';\nimport fs from 'fs';\n\n// Initialize Firebase Admin\ntry {\n  const serviceAccount = JSON.parse(fs.readFileSync('./server/serviceAccountKey.json', 'utf8'));\n  \n  if (admin.apps.length === 0) {\n    admin.initializeApp({\n      credential: admin.credential.cert(serviceAccount),\n      projectId: 'rugcraftpro'\n    });\n  }\n  \n  admin.firestore().settings({\n    ignoreUndefinedProperties: true\n  });\n  \n  const db = admin.firestore();\n\n  async function testComplianceAPI() {\n    console.log('🧪 Testing Compliance Audit API...');\n    \n    try {\n      // Test 1: Get existing compliance audits\n      console.log('\\n📋 Test 1: Getting existing compliance audits...');\n      const auditsSnapshot = await db.collection('complianceAudits')\n        .orderBy('updatedAt', 'desc')\n        .limit(5)\n        .get();\n      \n      console.log(`Found ${auditsSnapshot.size} existing compliance audits`);\n      \n      auditsSnapshot.forEach((doc, index) => {\n        const data = doc.data();\n        console.log(`  ${index + 1}. ${doc.id}: ${data.company} - ${data.status} (${data.auditorName})`);\n      });\n      \n      // Test 2: Create a new compliance audit\n      console.log('\\n📝 Test 2: Creating new compliance audit...');\n      const now = new Date().toISOString();\n      const testAudit = {\n        company: 'EHI',\n        auditorName: 'Test Auditor API',\n        location: 'Test Location',\n        auditScope: 'API Test Scope',\n        auditDate: now.split('T')[0],\n        checklist: [\n          {\n            code: 'C1',\n            question: 'Test question 1?',\n            response: 'Yes',\n            remarks: 'API test remark 1'\n          },\n          {\n            code: 'C2', \n            question: 'Test question 2?',\n            response: 'No',\n            remarks: 'API test remark 2'\n          }\n        ],\n        status: 'draft',\n        createdBy: 'API Test',\n        createdAt: now,\n        updatedAt: now\n      };\n      \n      const docRef = await db.collection('complianceAudits').add(testAudit);\n      console.log(`✅ Created test audit: ${docRef.id}`);\n      \n      // Test 3: Update the audit\n      console.log('\\n📝 Test 3: Updating the audit...');\n      const updateData = {\n        ...testAudit,\n        status: 'submitted',\n        submittedAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n        checklist: [\n          ...testAudit.checklist,\n          {\n            code: 'C3',\n            question: 'Updated test question 3?',\n            response: 'NA',\n            remarks: 'Added during update test'\n          }\n        ]\n      };\n      \n      await docRef.update(updateData);\n      console.log('✅ Audit updated successfully');\n      \n      // Test 4: Verify the update\n      console.log('\\n🔍 Test 4: Verifying the update...');\n      const updatedDoc = await docRef.get();\n      if (updatedDoc.exists) {\n        const data = updatedDoc.data();\n        console.log(`✅ Verified update: Status is ${data.status}, ${data.checklist.length} checklist items`);\n      }\n      \n      // Test 5: Check if API routes are working\n      console.log('\\n🌐 Test 5: Checking server API...');\n      try {\n        // Try to make HTTP request to local server\n        const response = await fetch('http://localhost:5000/api/v2/compliance-audits', {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        \n        if (response.ok) {\n          const data = await response.json();\n          console.log(`✅ API endpoint working: Found ${data.audits?.length || 0} audits via HTTP`);\n        } else {\n          console.log(`⚠️ API endpoint returned status: ${response.status}`);\n        }\n      } catch (fetchError) {\n        console.log('⚠️ Server not running or API not accessible via HTTP');\n      }\n      \n      // Clean up test data\n      console.log('\\n🧹 Cleaning up test data...');\n      await docRef.delete();\n      console.log('✅ Test audit deleted');\n      \n    } catch (error) {\n      console.error('❌ Test failed:', error);\n    }\n  }\n\n  testComplianceAPI().then(() => {\n    console.log('\\n🎉 Compliance API test complete!');\n    process.exit(0);\n  }).catch(error => {\n    console.error('❌ Test error:', error);\n    process.exit(1);\n  });\n\n} catch (error) {\n  console.error('❌ Firebase initialization failed:', error);\n  process.exit(1);\n}",
      "size": 4418
    },
    {
      "path": "test-firebase-audit.js",
      "content": "// Test script to create auditForms collection with sample data\nimport admin from 'firebase-admin';\nimport fs from 'fs';\n\n// Initialize Firebase Admin\nconst serviceAccount = JSON.parse(fs.readFileSync('./serviceAccountKey.json', 'utf8'));\nadmin.initializeApp({\n  credential: admin.credential.cert(serviceAccount),\n});\n\nconst db = admin.firestore();\n\nasync function createAuditFormsCollection() {\n  try {\n    // Create a test document in auditForms collection\n    const auditData = {\n      createdBy: 'abdulansari@easternmills.com',\n      createdAt: admin.firestore.FieldValue.serverTimestamp(),\n      updatedAt: admin.firestore.FieldValue.serverTimestamp(),\n      status: 'draft',\n      company: 'Eastern Home Industries',\n      auditType: 'Final Inspection',\n      sections: [\n        {\n          title: 'Packing',\n          questions: [\n            {\n              question: 'Is packing as per spec?',\n              answer: '',\n              comments: '',\n              images: []\n            },\n            {\n              question: 'Are labels properly attached?',\n              answer: '',\n              comments: '',\n              images: []\n            }\n          ]\n        },\n        {\n          title: 'Quality Check',\n          questions: [\n            {\n              question: 'Does the product meet quality standards?',\n              answer: '',\n              comments: '',\n              images: []\n            }\n          ]\n        }\n      ]\n    };\n\n    const docRef = await db.collection('auditForms').add(auditData);\n    console.log('✅ Created auditForms collection with document ID:', docRef.id);\n    \n    // Create another test document\n    const auditData2 = {\n      ...auditData,\n      auditType: 'Washing',\n      status: 'submitted',\n      sections: [\n        {\n          title: 'Washing Process',\n          questions: [\n            {\n              question: 'Is washing temperature correct?',\n              answer: 'Yes',\n              comments: 'Temperature maintained at 40°C',\n              images: []\n            }\n          ]\n        }\n      ]\n    };\n\n    const docRef2 = await db.collection('auditForms').add(auditData2);\n    console.log('✅ Created second audit document with ID:', docRef2.id);\n\n  } catch (error) {\n    console.error('❌ Error creating auditForms collection:', error);\n  }\n}\n\ncreateAuditFormsCollection();",
      "size": 2357
    }
  ]
}